
<?page id="main-page"?>
<window
    title="Ingresar Recomendaciones"
    id="principal">
    <zscript>
<![CDATA[
import java.math.BigDecimal;
import bean.recomendaciones;
import jcinform.persistencia.*;
import jcinform.procesos.Administrador;
 import bean.Permisos;
import java.util.Date;
import org.joda.time.DateMidnight;
import org.zkoss.zul.Listbox;

Administrador adm = new Administrador();
Session ses = Sessions.getCurrent();
Periodo periodo = (Periodo) ses.getAttribute("periodo");
//List cursos = adm.query("Select o from Cursos as o where o.periodo.codigoper = '"+periodo.getCodigoper()+"' ");


Empleados user =  (Empleados)ses.getAttribute("user");
List cursos = adm.query("Select distinct o.curso from MateriaProfesor as o " +
      " where o.empleado.codigoemp = '"+ user.getCodigoemp() +"'  " + 
      " and o.curso.periodo.codigoper =  '"+periodo.getCodigoper()+"' order by o.curso.secuencia, o.curso.paralelo.descripcion ");
    if(user.getTipo().equals("Interna")){
        cursos = adm.query("Select distinct o.curso from MateriaProfesor as o " +
            " where o.curso.periodo.codigoper =  '"+periodo.getCodigoper()+"' order by o.curso.secuencia, o.curso.paralelo.descripcion ");
    }


void buscar2(Cursos cur){
        List empleadosEncontrados = adm.query("Select o from MateriaProfesor as o " + 
        " where o.curso.codigocur = '"+cur.codigocur+"' " + 
        " and (o.materia.descripcion not like '%disciplina%'  and o.materia.descripcion not like '%comportamental%') " + 
        " and o.empleado.codigoemp = '"+user.getCodigoemp()+"'  order by o.orden");
        if(user.getTipo().equals("Interna")){
                 empleadosEncontrados = adm.query("Select o from MateriaProfesor as o " + 
                    " where o.curso.codigocur = '"+cur.codigocur+"' " + 
                    " and (o.materia.descripcion not like '%disciplina%'  and o.materia.descripcion not like '%comportamental%') " + 
                    "  order by o.orden");
            }
            mates.getChildren().clear();
            datos.getRows().getChildren().clear();
            bd2.value = "";
               for (Iterator it = empleadosEncontrados.iterator(); it.hasNext();) {
                      MateriaProfesor estudent = (MateriaProfesor) it.next();
                        Listitem item = new Listitem();
                        item.setValue(estudent);
                        item.appendChild(new Listcell(estudent.getMateria()+" ("+estudent.getEmpleado()+")"));
                        mates.appendChild(item);
             }
    }


Cursos curS = new Cursos(-1);
cursos.add(0,curS);
Permisos permiso = new Permisos();
recomendaciones no = new recomendaciones();

List equivalen = adm.query("Select o from Perfil as o where o.periodo.codigoper =  '"+periodo.getCodigoper()+"'  ");

List trimestres = adm.query("Select o from Trimestres as o where  o.periodo = '"+periodo.getCodigoper()+"' order by o.codigotrim  ");
List sistemas = new ArrayList();
 for (Iterator it = trimestres.iterator(); it.hasNext();) {
              Trimestres trime = (Trimestres) it.next();
              List sistemas0 = adm.query("Select o from Sistemacalificacion as o " +
              " where o.trimestre.codigotrim = '"+ trime.getCodigotrim() +"' and  o.periodo.codigoper = '"+periodo.getCodigoper()+"'  and o.faltas = true  order by o.orden");

              Sistemacalificacion stodos = new Sistemacalificacion();
              stodos.setNombre("==========>>>>> "+trime.getDescripcion()+"");
              int orden = 0;
              int codigo=0;
              if(sistemas0.size() >0 ){
                  orden = ((Sistemacalificacion) sistemas0.get(sistemas0.size()-1)).getOrden();
                  codigo = ((Sistemacalificacion) sistemas0.get(sistemas0.size()-1)).getCodigosis();

              }
              stodos.setOrden(orden);
              stodos.setCodigosis(codigo);
              stodos.setTrimestre(trime);
              sistemas.add(stodos);
              for (Iterator it2 = sistemas0.iterator(); it2.hasNext();){
                    Sistemacalificacion siste = (Sistemacalificacion) it2.next();
                    sistemas.add(siste);
               }

 }


 
String[][] values = new String[equivalen.size()][2];

          for (int i=0;i<equivalen.size();i++) {
             values[i][0]= ((Perfil)equivalen.get(i)).getNombre();
             values[i][1]= "String";
           }
guardar(){
    recomendaciones nso = new recomendaciones();
    recomendaciones r = (recomendaciones) datos.getRows();
    
    nso.guardarPerfil(r.getChildren(),((Cursos)curs.selectedItem.value),(Sistemacalificacion)sisis.selectedItem.value,mates.selectedItem.value);
    int a = Messagebox.show("Registro Almacenado con Ã©xito...! \n ", "Administrador ", Messagebox.OK, Messagebox.QUESTION);
 

}


 Boolean verificar(String accion){
        return permiso.verificarPermiso("Recomendaciones",accion);
 }
 
doAdd(Cursos curso,MateriaProfesor mateP){
            if(!verificar("Agregar")){
            }
        Sistemacalificacion sistema = sisis.getSelectedItem().getValue();
        filas.addPerfil(curso,sistema,mateP);
}
]]>
    </zscript>
    <grid>
        <rows>
            <row>

                <span style="float:right"> Periodo Trimestre(*):</span>
                <span>
                    <listbox id="sisis" mold="select" width="420px"
                             onSelect="curs.setSelectedIndex(0)">
                        <listitem forEach="${sistemas}" value="${each}">
                            <listcell label="${each.nombre}" />

                        </listitem>
                    </listbox>
                    <button label="Guardar"  id="guardar1" image="/images/guardar.gif" onClick="guardar();"/>
                </span>

            </row>
            <row>
                <span style="float:right"> Curso(*):</span>

                <listbox id="curs"  mold="select"  width="420px"
                             onSelect="buscar2(((Cursos)curs.selectedItem.value));">

                    <listitem forEach="${cursos}" value="${each}">
                        <listcell label="${each.descripcion} ${each.especialidad}  ${each.paralelo}" />

                    </listitem>
                </listbox>

            </row>
            
            <row>
                 <span style="float:right"> Materias(*):</span>
                      
                            <bandbox  width="300px" readonly="true"  id="bd2">
                                <bandpopup>
                                    <vbox>
                                        <listbox id="mates" height="300px"  width="420px"
                                                 onSelect='bd2.value=self.selectedItem.label;bd2.closeDropdown();doAdd(((Cursos)curs.selectedItem.value),((MateriaProfesor)self.selectedItem.value));'>

                                            <listitem forEach="${materias}" value="${each}">
                                                <listcell label="${each.descripcion}" />

                                            </listitem>
                                        </listbox>
                                    </vbox>
                                </bandpopup>
                            </bandbox>
            </row>


        </rows>
    </grid>
    <grid  id="datos"  >
        <columns>
            <column width="10px" label ="Mat."/>
            <column width="400px" label ="Estudiante"/>
            <column width="400px" label ="Recomendaciones"/>
            <column width="400px" label ="Plan Mejoras"/>
              
 
        </columns>
        <rows  id="filas" use="bean.recomendaciones">
        </rows>
    </grid>
    <button label="Guardar"   id="guardar2"   image="/images/guardar.gif" onClick="guardar();"/>
  

</window>

	