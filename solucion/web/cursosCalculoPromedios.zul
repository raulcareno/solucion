<?xml version="1.0" encoding="utf-8"?>
<?page id="main-page"?>
<zk xmlns="http://www.zkoss.org/2005/zul">
    <zscript>
        <![CDATA[
import bean.Procesos;
import bean.reportesClase;
import java.math.BigDecimal;
import jcinform.persistencia.*;
import jcinform.procesos.Administrador;
 import bean.notas;
import java.util.Date;
import org.joda.time.DateMidnight;
import org.zkoss.zul.Listbox;
import bean.notasActa;

 Administrador adm = new Administrador();
Session ses = Sessions.getCurrent();
Periodo periodo = (Periodo) ses.getAttribute("periodo");
reportesClase  noti = new reportesClase();
List cursos = adm.query("Select o from Cursos as o "+ 
" where o.periodo.codigoper = '"+periodo.getCodigoper()+"' order by o.secuencia, o.descripcion, o.paralelo.descripcion ");
List materias = adm.query("Select o from Global as o "+ 
" where o.grupo = 'MAT' and o.descripcion like '%PROM%' order by o.descripcion ");

void aprovechamiento(){
        
        Procesos pro = new Procesos();
                Set items = cursosList.getSelectedItems();
						if (items.isEmpty()) {
							Messagebox.show("Seleccione al menos un Curso para continuar...!", "Administrador Educativo", Messagebox.OK, Messagebox.EXCLAMATION);
                            return;
						}else{
							List al = new ArrayList(items);
							for (Iterator it = al.iterator(); it.hasNext();) {
								Listitem li = (Listitem)it.next();
                                    Cursos curses = li.getValue();
                                        pro.aprovechamiento(curses);
                                    
							}
						}
    
        Messagebox.show("Proceso terminado...!", "Administrador Educativo", Messagebox.OK, Messagebox.INFORMATION);
  }
  
  void aprovechamiento2(){
        
                Procesos pro = new Procesos();
                Set items = cursosList2.getSelectedItems();
						if (items.isEmpty()) {
							Messagebox.show("Seleccione al menos un Curso para continuar...!", "Administrador Educativo", Messagebox.OK, Messagebox.EXCLAMATION);
                            return;
						}else{
							List al = new ArrayList(items);
							for (Iterator it = al.iterator(); it.hasNext();) {
								Listitem li = (Listitem)it.next();
                                    Cursos curses = li.getValue();
                                    if(incluir.checked){
                                        recalcular(curses);
                                    }
                                    pro.aprovechamiento2(curses,materiasList.selectedItem.value);
                                        if(curses.getSecuencia().equals(6)){
                                            //GUARDO NOTAS DEL ACTA DE UNA VEZ
                                                filasActa.addRow(curses);
                                                notasActa notasAc = new notasActa();
                                                notasActa rAc = (notasActa) datosActa.getRows();
                                                String resultado = notasAc.guardar(rAc.getChildren(),curses);
                                                filasActa.getChildren().clear();
                                            //GUARDO NOTAS DEL ACTA DE UNA VEZ 2 
                                       }
                                    
							}
						}
    
        Messagebox.show("Proceso terminado...!", "Administrador Educativo", Messagebox.OK, Messagebox.INFORMATION);
  }
  void recalcular(Cursos curso){
   List hoy = adm.query("SELECT o FROM MateriaProfesor AS  o " +
                " where o.curso.codigocur = '"+curso.getCodigocur()+"'  order by o.orden ");
        System.out.println("FecI REC:"+new Date());
                        bean.notas n = new bean.notas();
        for (Iterator it = hoy.iterator(); it.hasNext();) {
                MateriaProfesor materia = (MateriaProfesor) it.next();
                n.recalculoNotas(materia, curso);
        }
    System.out.println("FecF REC:"+new Date());
}
  
  public void aprobados(){
      Administrador adm = new Administrador();
      Session ses = Sessions.getCurrent();
      Periodo periodo = (Periodo) ses.getAttribute("periodo");
      
      Set items = cursosList5.getSelectedItems();
                        if (items.isEmpty()) {
							Messagebox.show("Seleccione al menos un Curso para continuar...!", "Administrador Educativo", Messagebox.OK, Messagebox.EXCLAMATION);
                            return;
						}else{
                             List  notas = adm.query("Select o from Notanotas as o "
                                + " where o.sistema.periodo.codigoper = '" + periodo.getCodigoper() + "'  "
                                + "and o.sistema.promediofinal = 'PF' ");
							List al = new ArrayList(items);
							for (Iterator it = al.iterator(); it.hasNext();) {
								Listitem li = (Listitem)it.next();
                                    
                                    Cursos curses = li.getValue();
                                    String quera = "update matriculas set perdio = false where curso = '"+curses.getCodigocur()+"' ";
                                     adm.ejecutaSqlNativo(quera);
                                        List listaMatriculasPerdidos = noti.cuadroverificar(curses, notas.get(0).getSistema());
                                        for (Iterator  it = listaMatriculasPerdidos.iterator(); it.hasNext();) {
                                            Matriculas matriculas = it.next();
                                            matriculas.setPerdio(true);
                                            adm.actualizar(matriculas);
                                        }
                                       
                               
                                    
							}
						}
 
        
     Messagebox.show("Proceso terminado...!", "Administrador Educativo", Messagebox.OK, Messagebox.INFORMATION);
    
}
  
void disciplina2(){
        Procesos pro = new Procesos();
                 Set items = cursosList2.getSelectedItems();
						if (items.isEmpty()) {
							Messagebox.show("Seleccione al menos un Curso para continuar...!", "Administrador Educativo", Messagebox.OK, Messagebox.EXCLAMATION);
                            return;
						}else{
							List al = new ArrayList(items);
							for (Iterator it = al.iterator(); it.hasNext();) {
								Listitem li = (Listitem)it.next();
                                    Cursos curses = li.getValue();
                                        pro.disciplina(curses);
                                    
							}
						}
    
        Messagebox.show("Proceso terminado...!", "Administrador Educativo", Messagebox.OK, Messagebox.INFORMATION);
        
}
void disciplina(){
        Procesos pro = new Procesos();
                 Set items = cursosList.getSelectedItems();
						if (items.isEmpty()) {
							Messagebox.show("Seleccione al menos un Curso para continuar...!", "Administrador Educativo", Messagebox.OK, Messagebox.EXCLAMATION);
                            return;
						}else{
							List al = new ArrayList(items);
							for (Iterator it = al.iterator(); it.hasNext();) {
								Listitem li = (Listitem)it.next();
                                    Cursos curses = li.getValue();
                                        pro.disciplina(curses);
                                    
							}
						}
    
        Messagebox.show("Proceso terminado...!", "Administrador Educativo", Messagebox.OK, Messagebox.INFORMATION);
        
}


void recalculo(){

    notas nso = new notas();
     Set items = curs.getSelectedItems();
						if (items.isEmpty()) {
							Messagebox.show("Seleccione al menos un Curso para continuar...!", "Administrador Educativo", Messagebox.OK, Messagebox.EXCLAMATION);
                            return;
						}else{
							List al = new ArrayList(items);
							for (Iterator it = al.iterator(); it.hasNext();) {
								Listitem li = (Listitem)it.next();
                                    Cursos curses = li.getValue();
                                 
                                        nso.calcularDisciplina(curses);
                                    
							}
						}
    

}
void generar(String tipo,Date fecha,Boolean empi){
    notas nso = new notas();
    nso.generarNumeros(tipo,fecha,empi);

}
]]>
    </zscript>
    <portallayout >
        <portalchildren style="padding: 5px" width="50%">

            <panel title="RECORD ACADEMICO"    style="margin-bottom:10px" framable="true" >
                <panelchildren>

                    <grid>
                        <rows>
                            <row style="background:transparent"  spans="2">

                Nos permite hacer el Recalculo del Promedio final para el Record Acad√©mico

                            </row>
                            <row style="background:transparent" >
                                <span style="float:right"> Curso(*):</span>
                                <span>
                                    <listbox   id="cursosList"  height="150px" multiple="true" checkmark="true"  width="420px" >
                                        <listhead>
                                            <listheader label="Seleccionar Todos"/>    
                                        </listhead>
                                        <listitem forEach="${cursos}" value="${each}">
                                            <listcell label="${each.descripcion} ${each.especialidad}  ${each.paralelo}" />
                                        </listitem>
                                    </listbox>
                                  
                                    <button label="Aprovechamiento"   image="/images/run.gif" onClick="aprovechamiento();"/>
                                    <button label="Disciplina"   image="/images/run.gif" onClick="disciplina()"/>
                                </span>
                            </row>
                        </rows>
                    </grid>


                </panelchildren>

            </panel>
            <panel framable="true" style="margin-bottom:10px"  title="RECALCULO DE DISCIPLINA">
                <panelchildren>
                    <grid>
                        <rows>
                            <row  style="background:transparent" spans="2">

                                <span style="color:blue"> Recalculo de notas de disciplina, en caso de usar modo de caliciaci√≥n diferente a ingreso de notas de disciplina manualmente
                                </span>
                            </row>
                            <row style="background:transparent" >

                                <span style="float:right"> Curso(*):</span>
                                <span>
                                  
                                    <listbox fixedLayout="true" height="150px" multiple="true" checkmark="true" id="curs" width="420px">
                                        <listhead>
                                            <listheader label="Seleccionar Todos"/>    
                                        </listhead>

                                        <listitem forEach="${cursos}" value="${each}">
                                            <listcell label="${each.descripcion} ${each.especialidad}  ${each.paralelo}" />

                                        </listitem>
                                    </listbox>
                                           

                                    <button label="Recalcular Disciplina"    image="/images/run.gif"  onClick="recalculo();"/>
                                </span>
                            </row>
        
                        </rows>
                    </grid>
                </panelchildren>

            </panel>
            <panel  framable="true" style="margin-bottom:10px" title="RECALCULO DE ACTAS DE GRADO">
                <panelchildren>
                    <grid>
                        <rows>
           
                            <row style="background:transparent"  spans="2">
                                Generar Actas de Grado, √∫nicamente a los que no est√°n perdidos de a√±o o suspensos
                                (Se recomienda primero que actualice los datos en Matriculas > Actualizar)
                            </row>

                            <row style="background:transparent"  spans="2">
                                 <span>
                                    <button label="Generar N√∫meros de Actas"      onClick='generar("all",fechaacta.value,false)' />
                                    <datebox id="fechaacta" onCreate="self.value = new Date()"/>
                                    
                                </span>
                            </row>
                        </rows>
                    </grid>
                </panelchildren>

            </panel>
        </portalchildren>
        <portalchildren style="padding: 5px"  width="50%">
            

            <panel title="RECORD ACADEMICO SI PROMEDIO ES UNA MATERIA"    style="margin-bottom:10px" framable="true" >
                <panelchildren>

                    <grid>
                        <rows>

                            <row style="background:transparent"  spans="2">

                 Recalcula el Promedio final para el Record Acad√©mico, si el promedio es una materia.

                            </row>
                            <row>
                                <span style="float:right"> Materias(*):</span>
                                <listbox   id="materiasList" mold="select" width="420px" >
                                    <listhead>
                                        <listheader label="Seleccionar Todos"/>    
                                    </listhead>
                                    <listitem forEach="${materias}" value="${each}">
                                        <listcell label="${each.descripcion}" />
                                    </listitem>
                                </listbox>    
                            </row>
                            <row style="background:transparent" >
                                <span style="float:right"> Curso(*):</span>
                                <span>
                                    <listbox   id="cursosList2"  height="120px" multiple="true" checkmark="true"  width="420px" >
                                        <listhead>
                                            <listheader label="Seleccionar Todos"/>    
                                        </listhead>
                                        <listitem forEach="${cursos}" value="${each}">
                                            <listcell label="${each.descripcion} ${each.especialidad}  ${each.paralelo}" />
                                        </listitem>
                                    </listbox>
                                  <checkbox id="incluir" style="font-weight:bold" label="PREVIO RECALCULO?"  />
                                    <button label="Aprovechamiento"   image="/images/run.gif" onClick="aprovechamiento2();"/>
                                    <!--button label="Disciplina"   image="/images/run.gif" onClick="disciplina()"/-->
                                 
                                </span>
                            </row>
                        </rows>
                    </grid>


                </panelchildren>

            </panel>
            
            <panel title="RECALCULO DE APROBADOS O PERDIDOS"    style="margin-bottom:10px" framable="true" >
                <panelchildren>

                    <grid>
                        <rows>

                            <row style="background:transparent"  spans="2">

                                    Recalcula los estudiantes que aprueban o reprueban el a√±o, en base a la sumatoria, y los supletorios.

                            </row>
                            <row style="background:transparent" >
                                <span style="float:right"> Cursos(*):</span>
                                <span>
                                    <listbox   id="cursosList5"  height="150px" multiple="true" checkmark="true"  width="420px" >
                                        <listhead>
                                            <listheader label="Seleccionar Todos"/>    
                                        </listhead>
                                        <listitem forEach="${cursos}" value="${each}">
                                            <listcell label="${each.descripcion} ${each.especialidad}  ${each.paralelo}" />
                                        </listitem>
                                    </listbox>
                                    
                                    <button label="Calcular Aprobados/Reprobados"   image="/images/run.gif" onClick="aprobados();"/>
                                    Este proceso puede tardar un poco.
                                </span>
                            </row>
                        </rows>
                    </grid>


                </panelchildren>

            </panel>
           

            <panel framable="true" style="margin-bottom:10px"  title="ACTAS DE SUSPENSO">
                <panelchildren>
                    <grid>
                        <rows>
                            <row style="background:transparent"  spans="2">
                                Generar Actas de Grado Suspensos
                            </row>
                            <row  style="background:transparent" spans="2">
                                <span>
                                    <button label="Generar N√∫meros de Actas"   onClick='generar("sus",fechasuspenso.value,empezar.checked)' />
                                    <datebox id="fechasuspenso" onCreate="self.value = new Date()"/>
                                    <checkbox style="font-weight:bold" id="empezar" label="Empezar en 1" />
                                </span>
                                
                            </row>
                        </rows>
                    </grid>
                </panelchildren>
            </panel>
        </portalchildren>
    </portallayout>
    <grid  id="datosActa" >
        <columns>
            <column width="15px"   label ="Mat."/>
            <column width="300px" label ="Estudiante"/>
            <column forEach="${values}"  width="25px" label="${each[0]}" align="right"  />
            <column label ="ACTA"/>
            <column label ="Fecha"/>
        </columns>
        <rows id="filasActa" use="bean.notasActa">
        </rows>
    </grid>
</zk>

