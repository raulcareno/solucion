<?xml version="1.0" encoding="UTF-8"?>

<zk xmlns="http://www.zkoss.org/2005/zul">
    <window>
        <zscript>
        <![CDATA[
        
import bean.reportesClase;
import java.math.BigDecimal;
import bean.notasPlanificacionEvaluadores;
import jcinform.persistencia.*;
import jcinform.procesos.Administrador;
import java.util.Date;
import org.joda.time.DateMidnight;
import org.zkoss.zul.Listbox;
import sources.*;
import bean.Permisos;
import net.sf.jasperreports.engine.JRDataSource;
import bean.exportarExcel;

import org.zkoss.zul.Auxhead;
import org.zkoss.zul.Auxheader;
import org.zkoss.zul.Grid;
import org.zkoss.zul.Column;
import org.zkoss.zul.Columns;

Administrador adm = new Administrador();
exportarExcel exp = new exportarExcel();

 Session ses = Sessions.getCurrent();
 Periodo periodo = (Periodo) ses.getAttribute("periodo");
 Empleados user =  (Empleados)ses.getAttribute("user");
Permisos permiso = new Permisos();    
Planificacion pla = new Planificacion();

List evaluaciones = adm.query("Select o from PlanificacionEvaluadores as o " + 
             " where  o.periodo.codigoper = '"+periodo.getCodigoper()+"' order by o.codigo  ");
            String[][] values = new String[evaluaciones.size()][2];
                      for (int i=0;i< evaluaciones.size();i++) {
                         values[i][0]= ((PlanificacionEvaluadores)evaluaciones.get(i)).getNombre();
                      }
List cursos0 = null;
    if(user.getTipo().equals("Interna")){
        cursos0 = adm.query("Select distinct o.curso from MateriaProfesor as o " +
          " where o.curso.periodo.codigoper =  '"+periodo.getCodigoper()+"' " + 
           " group by o.curso order by o.curso.secuencia, o.curso.paralelo.descripcion ");
    }else{
        cursos0 = adm.query("Select distinct o.curso from MateriaProfesor as o " +
          " where o.empleado.codigoemp = '"+ user.getCodigoemp() +"'  " + 
          " and o.curso.periodo.codigoper =  '"+periodo.getCodigoper()+"' order by o.curso.secuencia, o.curso.paralelo.descripcion ");
    }
    List cursos = new ArrayList();
    List secuencias = new ArrayList();
    int i =0;
    for (Iterator it = cursos0.iterator(); it.hasNext();) {
                      Cursos estudent = (Cursos) it.next();
                      if(i==0){
                      cursos.add(estudent);
                      secuencias.add(estudent.getSecuencia());
                      }else{
                        if(!secuencias.contains(estudent.getSecuencia())){
                            cursos.add(estudent); 
                            secuencias.add(estudent.getSecuencia());
                        }
                      
                      }
                      i++;
 
    }
     Boolean verificar(String accion){
        return permiso.verificarPermiso("Planificacion",accion);

    }
    
    void modificar(){
  if(verificar("Modificar")){
       guardar.disabled=false; estado(false,true);
    }else{
            Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    }
}
    void nuevo(){
        if(verificar("Agregar")){
                guardar.disabled=false;
                    pla = new Planificacion();
                    pla.setCodigo(0);
                    llenar(pla);
                    estado(false,false);
                    filas.addFila();  
 
       }else{
                    Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
        }
}

void llenar(Planificacion pla){
try{
 
        pla.getMateria(materia.selectedItem.value);
        pla.getCurso(curs.selectedItem.value+"");
        }catch(Exception abc){
        
        }
        if(pla.getCurso()!=null){
                  for (int i = 0; i <= curs.getItems().size(); i++) {
                  try{
                            Cursos tr0 = ((Cursos)((Listitem)curs.getItems().get(i)).getValue());
                            int primero = tr0.getSecuencia();
                            int segundo = pla.getCurso();
                            if(primero == segundo){
                                curs.setSelectedItem((Listitem)curs.getItems().get(i));
                                //bd.value = pla.getMateria()+"";
                                break;
                            }
                            }catch(Exception erroCur){}
                   }


                    
         }
         Cursos tmp = new Cursos(pla.getCurso());
         tmp.setSecuencia(pla.getCurso());
         buscarMaterias(tmp);
         if(pla.getMateria()!=null){
                  for (int i = 0; i <= materia.getItems().size(); i++) {
                  try{
                            Global tr0 = ((Global)((Listitem)materia.getItems().get(i)).getValue());
                            int primero = tr0.getCodigo();
                            int segundo = pla.getMateria().getCodigo();
                            if(primero == segundo){
                                materia.setSelectedItem((Listitem)materia.getItems().get(i));
                                //bd.value = pla.getMateria()+"";
                                break;
                            }
                            }catch(Exception erroMa){}
                   }


                    
         }
         
          
        
        bloque.value = pla.getBloque(); 
        duracion.value = pla.getDuracion(); 
        fechainicio.value = pla.getFechainicio();
        fechafin.value = pla.getFechafin();
        objetivos.value = pla.getObjetivos();
        ejetransversal.value = pla.getEjetransversal();
        ejeaprendizaje.value = pla.getEjeaprendizaje();
        ejeintegrador.value = pla.getEjeintegrador(); 
        
         
}//FIN DE LA funcion llenar
 void buscar(String p){
        List empleadosEncontrados = adm.query("Select o from Planificacion as o " + 
        " where o.materia.descripcion like '%"+p+"%' order by o.materia.descripcion");
        datosBusca = new Listbox();
        int a=0;
            for (Iterator it = datosBusca.getItems().iterator(); it.hasNext();) {
                    datosBusca.getItems().remove(a);
                }


               for (Iterator it = empleadosEncontrados.iterator(); it.hasNext();) {
                      Planificacion acceIt = (Planificacion) it.next();
                      Listitem li = new Listitem();
                      li.setValue(acceIt);
                      li.appendChild(new Listcell(acceIt.getMateria()+""));
                      li.appendChild(new Listcell(acceIt.getFechainicio().toLocaleString().substring(0,10)+""));
                      li.appendChild(new Listcell(acceIt.getFechafin().toLocaleString().substring(0,10)+""));
                      li.appendChild(new Listcell(" "+acceIt.getCurso()+" " ));
                      datosBusca.appendChild(li);
             }

    }
 void move(){
        llenar((Planificacion)datosBusca.selectedItem.value);
        modificar.disabled = false;
  }
void estado(Boolean estado,Boolean modificar){
          curs.disabled = estado; 
        materia.disabled = estado;
        ejeintegrador.readonly = estado;
        ejeaprendizaje.readonly = estado;
        bloque.readonly = estado;
        duracion.readonly = estado;
        fechainicio.disabled = estado;
        fechafin.disabled = estado;
        fechainicio.readonly = estado;
        fechafin.readonly = estado;
        objetivos.readonly = estado;
        ejetransversal .readonly = estado;
         
}


    
void buscarMaterias(Cursos curso){
        List materias;
            if(user.getTipo().equals("Interna")){
                materias = adm.query("Select distinct  o.materia from MateriaProfesor as o " +
                " where o.curso.periodo.codigoper =  '"+periodo.getCodigoper()+"' and o.curso.secuencia = '"+curso.getSecuencia()+"'  " + 
                " order by o.materia.descripcion ");
            }else{
                materias= adm.query("Select distinct o.materia from MateriaProfesor as o " +
                " where o.empleado.codigoemp = '"+ user.getCodigoemp() +"'  and o.curso.secuencia = '"+curso.getSecuencia()+"'    " + 
                " and o.curso.periodo.codigoper =  '"+periodo.getCodigoper()+"' order by o.materia.descripcion ");
            }
        materia.getChildren().clear();
             bd2.value = "";
               for (Iterator it = materias.iterator(); it.hasNext();) {
                      Global estudent = (Global) it.next();
                        Listitem item = new Listitem();
                        item.setValue(estudent);
                        item.appendChild(new Listcell(estudent.getDescripcion()+""));
                        materia.appendChild(item);
             }
    }

    void guardar(){
        
      if(bloque.value.equals("")  || duracion.value.equals("")){
            Messagebox.show("Ingrese todos los campos con (*) ...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
            return;
        }
        pla.setPeriodo(periodo);
        pla.setMateria(materia.selectedItem.value);
        pla.setCurso(curs.selectedItem.value.secuencia);
        pla.setBloque(bloque.value); 
        pla.setDuracion(duracion.value); 
        pla.setFechainicio(fechainicio.value);
        pla.setFechafin(fechafin.value);
        pla.setObjetivos(objetivos.value);
        pla.setEjetransversal(ejetransversal.value);
        pla.setEjeaprendizaje(ejeaprendizaje.value);
        pla.setEjeintegrador(ejeintegrador.value); 
        if((!pla.getCodigo().equals(0)) ){
             adm.actualizar(pla);
         }else{
         pla.setCodigo(adm.getNuevaClave("Planificacion","codigo"));
             adm.guardar(pla);
         }
         
         // EMPIEZA A GUARDAR DETALLES
                  List col = datos.getRows().getChildren();
            for (int i = 0; i < col.size(); i++) {
                    Row object = (Row) col.get(i);
                    List labels = object.getChildren();
                    for (int j = 0; j < labels.size(); j++) {
                       PlanificacionDetalle det = new PlanificacionDetalle();
                       det.setEvaluador(evaluaciones.get(i));
                       det.setPlanificacion(pla);
                       det.setDescripcion(((Textbox)labels.get(j)).getValue());
                       adm.guardar(det);
                    }
           }
         //TERMINA GUARDAR DETALLE
                         Messagebox.show("Registro Almacenado con Éxito...!", "Administrador Educativo", Messagebox.OK, Messagebox.INFORMATION);
         
   }
//
]]>
        </zscript>
      <tabbox width="100%">
            <tabs>
                <tab id="registro" label="Registro" />
                <tab id="busqueda" label="Busquedas" />
            </tabs>
            <tabpanels>
                <tabpanel>
                              
        <vbox>
            <vbox>
                <hbox>
                    <button image="/images/guardar.gif" id="guardar" label="Guardar"  disabled="true"  onClick="guardar();"/>
                    <button  image="/images/nuevo.gif" id="agregar" label="Agregar" onClick="nuevo();" />
                    <button  image="/images/editar.gif" id="modificar"  label="Modificar" disabled="true"  onClick="modificar()"/>
                    <button  image="/images/eliminar.gif" id="eliminar"  label="Eliminar" disabled="true"  onClick="eliminar();"/>
                </hbox>
            </vbox>

        </vbox>

         

            <grid width="100%">
                <rows>
              
                    <row>
                        
                        <span style="float:right"> AÑO:</span>
                        <span>
                         
                            <listbox id="curs" disabled="true"   mold ="select" 
                                  onSelect="buscarMaterias(self.selectedItem.value)">
                                <listitem label="SELECCIONE" value="-1"/>
                                <listitem forEach="${cursos}" value="${each}">
                                    <listcell label="${each.descripcion}" />

                                </listitem>
                            </listbox> </span>
                            <span> AREA(*):</span>
                          
                            <listbox id="materia"  disabled="true"  mold="select" >
                                <listitem label="SELECCIONE" value="0"/> 
                                <listitem forEach="${materias}" value="${each}">
                                    <listcell label="${each.descripcion}" />

                                </listitem>
                            </listbox>
                       
                        
                    </row>
                    <row>
                        <span style="float:right"> EJE INTEGRADOR:</span>
                        <textbox id="ejeintegrador" rows="2"  cols="60" readonly="true"   />   
                    
                        <span style="float:right"> EJE APRENDIZAJE:</span>
                        <textbox id="ejeaprendizaje" rows="2"  cols="60" readonly="true"   />   
                    </row>
                    
                    <row>
                        <span style="float:right"> BLOQUES:</span>
                        <textbox id="bloque" cols="60" readonly="true"   />   
                        
                            <span> FECHA DE INICIO:</span>
                            <datebox id="fechainicio" />
                    </row>
                    <row>
                        <span style="float:right"> DURACIÓN:</span>
                        <span>
                            <textbox id="duracion" cols="40" readonly="true" />   
                     
                            </span>
 
                            <span> FECHA DE EVALUACIÓN:</span>
                            <datebox id="fechafin" />

                    </row>
                    
                    <row>
                        <span style="float:right"> OBJETIVOS:</span>
                        <textbox id="objetivos" cols="60" rows="2"  readonly="true"   />   
                        <span style="float:right"> EJE TRANSVERSAL:</span>
                        <textbox id="ejetransversal" rows="2" cols="60" readonly="true"   />   
                    </row>
                    
                </rows>
            </grid>
         
      
            <grid height="400px"  width="100%" id="datos" >
                <columns>
                    <column forEach="${values}" height="70px" style="text-align:justify"  width="155px"  align="justify" >
                        <textbox style="text-align:justify;background:transparent;border:0px"  width="155px" value="${each[0]}" rows="3"/>
                    </column>
                </columns>
                <rows id="filas" use="bean.Planificacion">
                </rows>
            </grid>
       
         
                </tabpanel>
                
               
                <tabpanel>

                    <groupbox  width="100%" mold="3d" >

                        <caption label="Busquedas" />
                        <vbox>
                            <hbox>  MATERIA:
                                <textbox onChanging="buscar(event.value)" id="buscarText"  maxlength="60" cols="40" />
                                <button id="buscar"  label="Buscar" onClick="buscar(buscarText.getValue());"/>
                            </hbox>
                            <hbox>
                                <listbox mold="paging" rows="20" pageSize="20"  onSelect="move();estado(true,false);eliminar.disabled=false;guardar.disabled=true" id="datosBusca" width="550px">
                                    <listhead>
                                        <listheader label="Materia"/>
                                        <listheader label="Fecha"/>
                                        <listheader label="Evaluación"/>
                                        <listheader label="Curso"/>
                                    </listhead>
                                </listbox>


                            </hbox>
                        </vbox>
                    </groupbox>



                </tabpanel>

                </tabpanels>
                
           </tabbox>
      

    </window>

</zk>
