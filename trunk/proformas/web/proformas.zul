<?xml version="1.0" encoding="utf-8"?>
<?page title="Compras Sin Series"?>
<?page id="comprasinseries"?>
 
<window id="controlventana">
    <zscript>
            <![CDATA[
 import siscontrol.*;
 import siscontrol.cnx.*;
  import java.util.ArrayList;
  import org.zkoss.image.AImage;
  import org.zkoss.image.Image;
  import java.math.BigDecimal;
  import java.math.RoundingMode;
  import siscontrol.cnx.*;
    Administrador adm = new Administrador();
 Session ses = Sessions.getCurrent();
  
    Permisos permiso = new Permisos();
    List perfiles = adm.query("Select o from Productos as o where o.codigo = 0 order by o.nombre ");
    //List proveedoresList = adm.query("Select o from Proveedores as o order by o.razonsocial ");
    Object media = null;
Empleados usuario = ses.getAttribute("user");
            if(usuario==null){
                Executions.sendRedirect("login.zul");
            }
            
  Empresa empresa = ses.getAttribute("empresa");
  String directorioReportes = empresa.getReportes();
            
            
//FUNCIONES
void cargarFoto(byte[] imageData){
  foto0.setContent(new org.zkoss.image.AImage("fotito", imageData));
}
void cargarVacio(){
  foto0.setContent(new org.zkoss.image.AImage("t", desktop.webApp.getResourceAsStream("/fotos/vacio.gif")));
}

//FUNCIONES

void llenar(Factura empa){

    codigo.value = empa.getCodigo();
    factura.value = empa.getFactura();
    fecha.value = empa.getFecha();
    if(empa.getFecha()==null){
        fecha.value = adm.Date();
    }
    observacion.value = empa.getSeries();
 
    /* compra  productos, cantidad  costo pvp1 */
filas.getChildren().clear();
    List detalleCompra = adm.query("Select o from Detalle as o where o.factura.codigo = '"+empa.getCodigo()+"' ");
       for (Iterator it = detalleCompra.iterator(); it.hasNext();) {
                      Detalle acceIt = (Detalle) it.next();
                        try{
                            Row row = new Row();
                                   Doublebox dou = new Doublebox(0);
                                    dou.setStyle("float:right;text-align:right");
                                    dou.setValue(acceIt.getCosto());
                                    Intbox intb = new Intbox(acceIt.getCantidad());
                                    intb.setCols(3);
                                     intb.setStyle("float:right;text-align:right");
                                    Label prod = new Label(acceIt.getProductos().getNombre() +" "+ acceIt.getProductos().getModelo()+" "+acceIt.getProductos().getMarcas());
                                    row.appendChild(intb);
                                    row.appendChild(prod);
                                    row.appendChild(dou);
                                    //SELECCIONO LAS SERIES INGRESADAS A ÉSTE DETALLE
                                    List series = adm.query("Select o from Series as o  " + 
                                    " where o.detalle.codigo = '"+acceIt.getCodigo()+"' and o.sucursal.codigo = '"+sucursalEmp.getSucursal().getCodigo()+"' ");
                                    ArrayList seriesA = new ArrayList();
                                    for (Iterator it = series.iterator(); it.hasNext();) {
                                            Series serIt = (Series) it.next();
                                            seriesA.add(serIt.getSerie());
                                    }


                                    Button aButton = null;
                                    aButton = new Button("quitar");
                                    aButton.setImage("/images/quitar.gif");
                                    aButton.setHeight("5px");
                                    aButton.setAttribute("series"+acceIt.getProductos().getCodigo(),seriesA);
                                    aButton.setId("id"+acceIt.getProductos().getCodigo());
                                    aButton.setDisabled(true);
                                    aButton.addEventListener("onClick", new EventListener() {
                                        public void onEvent(Event event) throws Exception {
                                                seriespanel.visible = false;
                                                quitarFila(aButton.getId());
                                                


                                        }
                                    });
                                    row.appendChild(aButton);
                                    
                                    
                             Button aButtons = null;
                            aButtons = new Button("series");
                            aButtons.setImage("/images/series.png");
                            aButtons.setHeight("5px");
                            aButtons.setId("ids"+acceIt.getProductos().getCodigo());
                            aButtons.setAttribute("series"+acceIt.getProductos().getCodigo(),seriesA);
                            aButtons.addEventListener("onClick", new EventListener() {
                                public void onEvent(Event event) throws Exception {
                                        //quitarFila(aButtons.getId());
                                        ArrayList series = aButtons.getAttribute("series"+aButtons.getId().replace("ids",""));
                                              seriespanel.visible = true;
                                              actualizar.visible = true; 
                                              continuar.visible = false;
                                              seriespanel.setAttribute("productoid",aButtons.getId().replace("ids",""));
                                               filas2.getChildren().clear();
                                              int i = 0;
                                              for (Iterator it = series.iterator(); it.hasNext();) {
                                                    String object = (String) it.next();
                                                      Row row = new Row();
                                                       Textbox t = new Textbox(object);
                                                           t.focus();    t.setId("cod"+i);   t.setCols(14);
                                                        t.setReadonly(true);
                                                            row.appendChild(new Label((i+1)+".- "));
                                                            row.appendChild(t);
                                                            filas2.appendChild(row);
                                                            if(i==0)
                                                                t.focus();
                                                                i++;
                                             }
                                }
                            });
                            row.appendChild(aButtons);
                                    
                                    
                                    
                                    row.setValue(new Productos(acceIt.getProductos().getCodigo())); 

                            filas.appendChild(row);

                            }catch(Exception e){
                            
                                alert("YA SE HA AGREGADO ESTE PRODUCTO \n"+e);
                            }                    
        }
    

    
  
}
 
void estado(Boolean estado,Boolean modificar){
        if(modificar){
            empa = (Factura)datos.selectedItem.value;
        }

    cantidad.readonly = estado;
    precio.readonly = estado;
    vu.readonly = estado;
    //add.disabled = estado;
    factura.readonly = estado;
    fecha.disabled = estado;
    perf.disabled = estado;
    observacion.readonly = estado;
    bd.disabled = estado;
    bd2.disabled = estado;
    buscarE3.disabled = estado;
    buscarPro.disabled = estado;
    
}
Boolean validarSeries(){
    String seriesTodas = "";
    String seriesAcumuladasDuplicadas = "";
    ArrayList seriesAcumuladas = new ArrayList();
    int sihay = 0;
    List col = opciones.getRows().getChildren();
             for (int i = 0; i < col.size(); i++) {
                    Row object = (Row) col.get(i);
                     List labels = object.getChildren();
                        Button bu = ((Button) labels.get(3));
                        ArrayList series = bu.getAttribute("series"+((Productos)object.getValue()).getCodigo());
                          for (Iterator it = series.iterator(); it.hasNext();) {
                                    String object = (String) it.next();
                                    seriesTodas = "'"+object+"',"+seriesTodas;
                                    if(!seriesAcumuladas.contains(object)){
                                            seriesAcumuladas.add(object);
                                     }else{
                                            seriesAcumuladasDuplicadas += object+"," ;
                                            sihay++;
                                            
                                            
                                     }
                          }
             }
             
              if(sihay>0){
                    Messagebox.show("ESTÁ INGRESANDO SERIES DUPLICADAS EN LOS PRODUCTOS ACTUALES \n SERIES: "+ seriesAcumuladasDuplicadas, "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                        return true;              
              }
              if(seriesTodas.length()>0){
                seriesTodas = seriesTodas.substring(0,seriesTodas.length()-1);
              } 
             
             List encontradas =  adm.query("Select o from Series as o "+ 
             " where o.serie in ("+ seriesTodas+") and o.sucursal.codigo = '"+sucursalEmp.getSucursal().getCodigo()+"' ");
             String sencontradas="";
              for (Iterator it = encontradas.iterator(); it.hasNext();) {
                        Series object = it.next();
                        sencontradas = object.getSerie()+", "+ sencontradas;
              }
             if(sencontradas.length()> 0){
                    Messagebox.show("LAS SERIES QUE ESTA TRATANDO DE GUARDAR YA EXISTEN, NO PODRA CONTINUAR \n SERIES: "+ sencontradas, "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                    return true;
             }
             
            return false;
             
}

Boolean validarSeriesAju(){
    String seriesTodas = "";
    String seriesAcumuladasDuplicadas = "";
    ArrayList seriesAcumuladas = new ArrayList();
    int sihay = 0;
    List col = opciones.getRows().getChildren();
             for (int i = 0; i < col.size(); i++) {
                    Row objectfila = (Row) col.get(i);
                     List labels = objectfila.getChildren();
                        Button bu = ((Button) labels.get(3));
                        ArrayList series = bu.getAttribute("series"+((Productos)objectfila.getValue()).getCodigo());
                          for (Iterator it = series.iterator(); it.hasNext();) {
                                    String object = (String) it.next();
                                    Plan plan = new Plan(((Productos)objectfila.getValue()).getCodigo());
                                        plan.setNombre(object);
                                        seriesTodas = "'"+object+"',"+seriesTodas;
                                     if(!seriesAcumuladas.contains(plan)){
                                            seriesAcumuladas.add(plan);
                                     }else{
                                            seriesAcumuladasDuplicadas += object+"," ;
                                            sihay++;
                                     }
                          }
             }
             
              if(sihay>0){
                    Messagebox.show("ESTÁ INGRESANDO SERIES DUPLICADAS EN LOS PRODUCTOS ACTUALES \n SERIES: "+ seriesAcumuladasDuplicadas, "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                        return true;              
              }
              if(seriesTodas.length()>0){
                seriesTodas = seriesTodas.substring(0,seriesTodas.length()-1);
              } 
             
             List encontradas =  adm.query("Select o from Series as o where o.serie in ("+ seriesTodas+") and o.sucursal.codigo = '"+sucursalEmp.getSucursal().getCodigo()+"'");
             String sencontradas="";
             ArrayList encontradasActualizar = new ArrayList();
             if(encontradas.size() <= 0){
                    Messagebox.show("UNA O VARIAS SERIES NO EXISTEN EN LOS REGISTROS", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                    return true;
             }
             int nohay = 0;
              for (Iterator it = encontradas.iterator(); it.hasNext();) {
                        Series object = it.next();
                        Plan pla = new Plan(object.getDetalle().getProductos().getCodigo());
                        pla.setNombre(object.getSerie());
                        if(!seriesAcumuladas.contains(pla)){
                            nohay ++;
                        }
 
              }
             if(nohay >0){
                    Messagebox.show("LAS SERIES QUE ESTA INGRESANDO NO COINCIDEN CON EL PRODUCTO QUE SE ENCUENTRA EN STOCK", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                    return true;
             }
             
            return false;
             
}


 void guardar(){
  secuencial sec = new secuencial();
   List colValida = opciones.getRows().getChildren();
      if(colValida.size() <= 0){
          Messagebox.show("No ha ingresado productos...!", "Administrador Educativo", Messagebox.OK, Messagebox.EXCLAMATION);
          return;  
      }
     if(nombres.value == "" ){
        Messagebox.show("Registre todos los campos para continuar ...!", "Administrador Educativo", Messagebox.OK, Messagebox.EXCLAMATION);
        return;
     }
      if(observacion.value == "" ){
        Messagebox.show("Registre todos los campos para continuar ...!", "Administrador Educativo", Messagebox.OK, Messagebox.EXCLAMATION);
        return;
      }
            Clientes empa = new Clientes();
            empa.setCodigo(idproveedores.value);
            empa.setNombres(nombres.value);
            empa.setRazonsocial(razonsocial.value);
            empa.setCedula(cedula.value);
            empa.setDireccion(direccion.value);
            empa.setTelefono(telefono.value);
            empa.setReferencia(referencia.value);
        if(empa.getCodigo() == 0){ 
            empa.setCodigo(adm.getNuevaClave("Clientes","codigo"));
            adm.guardar(empa);
         }else{
            adm.actualizar(empa);
        }
 
    
       Factura cabeceraFactura = new Factura();
       cabeceraFactura.setCodigo(adm.getNuevaClave("Factura","codigo"));
       cabeceraFactura.setCliente(empa);
       //cabeceraFactura.setNumero();
       cabeceraFactura.setFecha(fecha.value);
       cabeceraFactura.setObservaciones(observacion.value);
       cabeceraFactura.setCantidad(new BigDecimal(0));
       cabeceraFactura.setEmpleado(emp);
                        Boolean pasar = true;
                        Integer numero = adm.getNuevaClave("Factura","numero");
                        while(pasar){
                            List sihay = adm.query("Select o from Factura as o where o.numero = '"+numero+"'"); 
                            if(sihay.size()<=0){//no existe el numero y paso
                                pasar = false;
                                cabeceraFactura.setNumero(numero);
                                factura.value = numero;
                            }else{//existe el numero y sumo en uno
                                numero++;
                            }

                        }
                    

        cabeceraFactura.setSubtotal(totalFinal.getValue());
        cabeceraFactura.setSubtotal1(totalFinal2.getValue());
        cabeceraFactura.setDescuento(descuento.getValue());
        cabeceraFactura.setIva(iva.getValue());
        cabeceraFactura.setTotal(total.getValue());
        

       adm.guardar(cabeceraFactura);
            List col = opciones.getRows().getChildren();
             for (int i = 0; i < col.size(); i++) {
                    Row object = (Row) col.get(i);
                    Detalle det = new Detalle();
                     det.setCodigo(sec.generarClave());
                     det.setFactura(cabeceraFactura);
                     List labels = object.getChildren();
                         det.setProducto((Productos)object.getValue());
                         det.setCantidad(((Decimalbox) labels.get(0)).getValue());
                         det.setDescripcion(((Label) labels.get(1)).getValue());
                         det.setValor(((Decimalbox) labels.get(2)).getValue());                         
                         det.setSubtotal(((Decimalbox) labels.get(3)).getValue());
                         //Button bu = ((Button) labels.get(3));
                         cabeceraFactura.setCantidad(cabeceraFactura.getCantidad().add(det.getCantidad()));

                       adm.guardar(det);
             }
      adm.actualizar(cabeceraFactura);
              Boolean a = true;
            if(a){
                Messagebox.show("Registro Almacenado con Éxito...!", "Administrador Educativo", Messagebox.OK, Messagebox.INFORMATION);
                //permiso.auditar("Factura"+documento.selectedItem.value,"Guardar","FAC"+factura.value+" USD:"+ cabeceraFactura.getTotal() + " PROV:"+idproveedores.value);
                    guardar.disabled=true;
                    agregar.disabled=false;
                    imprimir.disabled = false;
                    estado(true,false);
                    add.disabled = false;
                   // llenar(new Factura(0));
                    
            }else{
                Messagebox.show("No se pudo almacenar...X", "Administrador Educativo", Messagebox.OK, Messagebox.EXCLAMATION);
            }

    }

   Boolean verificar(String accion){
        return true;

    }
 void nuevo(){
    if(verificar("Agregar")){
          
          guardar.disabled=false; 
          //llenar(new Factura(0));
          //estado(false,false);
          cantidad.setReadonly(false);
          nombres.setReadonly(false);
          direccion.setReadonly(false);
          telefono.setReadonly(false);
          referencia.setReadonly(false);
          razonsocial.setReadonly(false);
          cedula.setReadonly(false);
          
          observacion.setReadonly(false);
          fecha.setDisabled(false);
          filas.getChildren().clear();
          
    }else{
            Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    }
}
 void move(){
        llenar((Factura)datos.selectedItem.value);
        modificar.disabled = false;
        registro.setSelected(true);
  }
void modificar(){
  if(verificar("Modificar")){
       guardar.disabled=false; estado(false,true);
    }else{
            Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    }
}
void eliminar(){
  if(verificar("Eliminar")){
        try{
             empa = (Factura)datos.selectedItem.value;
             adm.eliminarObjeto(Factura.class, empa.getCodigo());
             permiso.auditar("Factura","Eliminar",""+nombre.value);
            datos.removeItemAt(datos.getSelectedIndex());
            llenar(new Factura(0));
                Messagebox.show("Registro Eliminado con Éxito...!", "Administrador Educativo", Messagebox.OK, Messagebox.INFORMATION);
        }catch(Exception e){
            Messagebox.show("No se pudo eliminar el Registro...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
        }
}else{
            Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    }
}

void cargar(Productos g){
empa.setProductos(g);
}
  Listbox llenaProve(Listbox ba){
    ba.setMold("select");
                   for (Iterator it = proveedoresList.iterator(); it.hasNext();) {
                      Proveedores acceIt = (Proveedores) it.next();
                      Listitem li = new Listitem();
                      li.setValue(acceIt);
                      li.setSelected(true);
                      li.appendChild(new Listcell(acceIt.getRazonsocial()+""));
                      ba.appendChild(li);
             }
    return ba;
}
  Listbox llenaEquipo(Listbox eq){
            eq.setMold("select");
                   for (Iterator it = perfiles.iterator(); it.hasNext();) {
                      Productos acceIt = (Productos) it.next();
                      Listitem li = new Listitem();
                      li.setValue(acceIt);
                      li.setSelected(true);
                      li.appendChild(new Listcell(acceIt.getNombre()+" "+ acceIt.getMarcas()+" "+acceIt.getModelo()));
                      eq.appendChild(li);
             }
    return eq;
}
llenarGrid(){
                try{
                    Row row = new Row();
                      
                      //CARGO LAS SERIES COMO ATRIBUTO
                      List col = opciones2.getRows().getChildren();
                    
                           Decimalbox dou = new Decimalbox(new BigDecimal(0));
                            dou.setStyle("float:right;text-align:right");
                            dou.setValue(vu.value);
                            dou.setReadonly(true);
                            
                             Decimalbox tot = new Decimalbox(new BigDecimal(0));
                            tot.setStyle("float:right;text-align:right");
                            tot.setValue(vt.value);
                            tot.setReadonly(true);
                            
                            Decimalbox intb = new Decimalbox(cantidad.value);
                            intb.setCols(3);
                            intb.setReadonly(true);
                            intb.setStyle("float:right;text-align:right");
                             
                            Label prod = new Label(productod.value);
                            
                            row.appendChild(intb);
                            row.appendChild(prod);
                            row.appendChild(dou);
                            row.appendChild(tot);
                            
                            Button aButton = null;
                            aButton = new Button("quitar");
                            aButton.setImage("/images/quitar.gif");
                            aButton.setHeight("5px");
                            aButton.setId("id"+idproducto.value);
                            aButton.addEventListener("onClick", new EventListener() {
                                public void onEvent(Event event) throws Exception {
                                     int valor0 = Messagebox.show("Seguro que desea quitar este elemento, Desea Continuar?", "JCINFORM-Seguridad", Messagebox.YES | Messagebox.NO, Messagebox.QUESTION);
                                     seriespanel.visible = false;
                                     if(valor0 == 16){
                                        quitarFila(aButton.getId());
                                     }
                                        
                                }
                            });
                            row.appendChild(aButton);
                            
                            row.setValue(new Productos(idproducto.value)); 
                    filas.appendChild(row);
                    }catch(Exception e){
                        alert("YA SE HA AGREGADO ESTE PRODUCTO");
                    }
                        vu.value=null;
                        cantidad.value= new BigDecimal(1);
                        productod.value=null;
                        idproducto.value = null;
                        cantidad.focus();
 seriespanel.visible = false;       
}

  public void imprimir(){
            try{
                   Map parameters = new HashMap();
                   parameters.put("ruc",empresa.getRuc());
                   parameters.put("usuario",usuario.getNombres());
                   parameters.put("cargo",usuario.getCargo());
                   List detalleFac = adm.query("Select o from Detalle as o where o.factura.codigo = '" + 11 + "'");
                   ArrayList detalles = new ArrayList();
                   for (Iterator itAbono =detalleFac.iterator(); itAbono.hasNext();) {
                        Detalle det = itAbono.next();
                         detalles.add(det);
                   }
                   ReporteFacturaDataSource ds = new ReporteFacturaDataSource(detalles);
                   reportelocal.setSrc(directorioReportes+"proforma.jasper");
                   reportelocal.setParameters(parameters);
                   reportelocal.setDatasource(ds);
                   reportelocal.setType("pdf");
            }catch(Exception  ex){
                System.out.println("EXXX: "+ex);
            }
  }
llenarGridActualizar(){
               
                    Row row = new Row();
                      String producto = seriespanel.getAttribute("productoid");
                      //CARGO LAS SERIES COMO ATRIBUTO
                      List col = opciones2.getRows().getChildren();
                      ArrayList series = new ArrayList();
                         for (int i = 0; i < col.size(); i++) {
                                Row object = (Row) col.get(i);
                                 List labels = object.getChildren();
                                String serie = ((Textbox) labels.get(1)).getValue();
                                 if(serie.trim().length()<=0){
                                    Messagebox.show("DEBE INGRESAR TODAS LAS SERIES PARA CONTINUAR", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                                    ((Textbox) labels.get(1)).focus();
                                    return;
                                    
                                }
                                
                                 series.add(serie);
                         }
                     aButtons = Path.getComponent("/controlventana/ids"+producto);
                     aButton = Path.getComponent("/controlventana/id"+producto);
                     aButton.setAttribute("series"+producto,series);
                     aButtons.setAttribute("series"+producto,series);
                     actualizar.visible = false; 
                     continuar.visible = true; 
                    
              seriespanel.visible = false;       
        
}


 public void quitarFila(String codigoBuscar){
                 Rows filas2 =opciones.getRows();
                List listadoProductos = filas2.getChildren();
                    for (int i = 0; i <= listadoProductos.size()-1; i++) {
                       Row object = (Row) listadoProductos.get(i);
                       Productos nuevo = ((Productos)object.getValue());
                       String codigoA = "id"+nuevo.getCodigo();
                       if(codigoA.equals(codigoBuscar)){
                            opciones.getRows().removeChild(object);
                            break;
                       }
                    }
sumarTotal("");
}
 public void sumarTotal(String valor){
                 Rows filas2 =opciones.getRows();
                List listadoProductos = filas2.getChildren();
                BigDecimal totalf = new BigDecimal(0);
                    for (int i = 0; i <= listadoProductos.size()-1; i++) {
                       Row object = (Row) listadoProductos.get(i);
                       List labels = object.getChildren();
                         totalf = totalf.add((((Decimalbox) labels.get(3)).getValue()));
                    }
                    totalFinal.value = totalf;
                    //descuento.value = 0;
                    try{totalFinal2.value = totalFinal.value.subtract(descuento.value);}catch(Exception e){}
                    iva.value = totalFinal.value.subtract(descuento.value).multiply(viva.value).divide(new BigDecimal(100), 2, RoundingMode.HALF_UP);
                    //fac.setValoriva(valor.subtract(object.getDescuento()).multiply(suc.getEmpresa().getIva().divide(new BigDecimal(100), 2, RoundingMode.HALF_UP)));
                    total.value = iva.value.add(totalFinal.value.subtract(descuento.value));

}
 

void tipoDocumento(String tipo){
    compras1.visible = false;
    observacionrow.visible = true;
        if(tipo.equals("COM")){
            compras1.visible = true;
            observacionrow.visible = false;
        }
}

]]>
    </zscript>  <!--button label="" disabled="true"  id="buscarE3"  image="/images/auditoria.gif">
                                    <attribute name="onClick">{
                                        final Window win = (Window) Executions.createComponents("buscarProveedores.zul", null, null);
                                        win.setMaximizable(true);
                                        win.setClosable(true);
                                        win.setAttribute("nuevo", true);
                                        win.setAttribute("equipo", 3);
                                        win.setTitle("Buscar");
                                        win.doModal();
                                        }                            
                                    </attribute>
                                </button--> 
    <tabbox width="100%">
        <tabs>
            <tab id="registro" label="Registro" />
            <tab id="busqueda" label="Busquedas" />
            <tab id="reporteVer" label="Reporte" />
        </tabs>
        <tabpanels>
            <tabpanel>
                <grid width="100%">
                    <rows>
                       
                        <row id="compras1" style="background-color:cyan">
                            <span style="float:right; font-weight:bold"> <label value="Buscar Cliente: " style="font-weight:bold" /><image  src="/images/auditoria.gif" /> </span> 
                            <span>
                                 
                                <combobox  cols="35"  id="clientesBusqueda" onOK='factura.focus();' 
                                           onSelect="try{ idproveedores.value = (self.selectedItem.value).getCodigo(); 
                                                        cedula.value = (self.selectedItem.value).getCedula(); 
                                                        direccion.value = (self.selectedItem.value).getDireccion(); 
                                                        telefono.value = (self.selectedItem.value).getTelefono();
                                                        nombres.value = (self.selectedItem.value).getNombres();
                                                        referencia.value = (self.selectedItem.value).getReferencia();
                                                        razonsocial.value = (self.selectedItem.value).getRazonsocial(); }catch(Exception ex){}" 
                                           autodrop="true" buttonVisible="false"  
                                           use="siscontrol.autoCompletarClientes"/>
                                <intbox  readonly="true" visible="false"  cols="1" id="idproveedores" />
                                
                            </span>
                            <span>No.Proforma</span> 
                            <span> <intbox  readonly="true"  id="factura"/> 
                            <span> Fecha:</span>
                            <datebox id="fecha" format="dd/MM/yyyy hh:mm:ss" onCreate="self.value = adm.Date()"/>
                            </span>
                        </row>
                        <row>
                            <span style="float:right">    Cédula: </span> 
                            <textbox id="cedula" readonly="true"  />
                            <span style="float:right">    Nombres: </span> 
                            <textbox id="nombres"  readonly="true" cols="35"/>
                            
                            
                        </row>
                        <row>
                            <span style="float:right">    Razón Social: </span> 
                            <textbox id="razonsocial" readonly="true"  cols="35" />
                            <span style="float:right">     Dirección:</span>  
                            <textbox id="direccion" readonly="true"   cols="35"/>
                            
                        </row>
                        <row>
                            <span style="float:right">   Telefono: </span> 
                            <textbox id="telefono" readonly="true"  />
                            <span style="float:right">   Referencia: </span> 
                            <textbox id="referencia" readonly="true" cols="35" />
                                
                        </row>
                    
                       
                        <row spans="4">
                            <grid  width="98%" id="anadir">
                                <columns sizable="true">
                                   
                                    <column label="CANTIDAD" width="80px" />
                             
                                    <column label="EQUIPO" />
                                    <column label="V"  width="30px" />
                                    <column label="V.U."  width="30px" />
                                    <column label="V.T."  width="30px" />
                                    <column label="OPCION" width="30px"  />
                                </columns>
                                <rows>
                                    <row>
                                        <zscript>      <![CDATA[
                                        llenarGrid(int numero,String tipo){
                                        
                                         if(documento.selectedItem.value.equals("COM") && vu.value == 0){
                                                                Messagebox.show("LLENE TODOS LOS CAMPOS PARA CONTINUAR AÑADIENDO FILAS, VALOR ESTÁ EN CERO", "Administrador Educativo", Messagebox.OK, Messagebox.EXCLAMATION);
                                                                seriespanel.visible = false;  return;
                                         }
                                        if(cantidad.value == 0 || cantidad.value == null || cantidad.value == ""
                                              || idproducto.value == null || idproducto.value == "" 
                                              || vu.value == ""  || vu.value == null){
                                                       
                                                                Messagebox.show("LLENE TODOS LOS CAMPOS PARA CONTINUAR AÑADIENDO FILAS", "Administrador Educativo", Messagebox.OK, Messagebox.EXCLAMATION);
                                                                seriespanel.visible = false;  return;
                                                       
                                                      

                                              }
                                              seriespanel.visible = true;
                                        
                                                                filas2.getChildren().clear();
                                                                for(int i = 0; i< numero; i++){
                                                                          Row row = new Row();
                                                                           Textbox t = new Textbox();
                                                                               t.focus();
                                                                               t.setId("cod"+i);
                                                                               t.setCols(14);
                                                                               t.addEventListener("onOK", new EventListener() {
                                                                                public void onEvent(org.zkoss.zk.ui.event.Event event) throws Exception {
                                                                     
                                                                                String idn = ((Textbox) event.getTarget()).getId().replace("cod","");
                                                                                        Integer val = new Integer(idn);
                                                                                        
                                                                                            valo = Path.getComponent("/controlventana/cod"+(val+1));
                                                                                        if(valo != null)    
                                                                                            valo.focus();
                                                                                       if((val+1) == i)
                                                                                            continuar.focus();

                                                                                }
                                                                            });
                                                                                
                                                                                
                                                                                row.appendChild(new Label((i+1)+".- "));
                                                                                row.appendChild(t);
                                                                                filas2.appendChild(row);
                                                                                if(i==0)
                                                                                    t.focus();
                                                                }
                                                    }
                                                   
                                       ]]>
                                        </zscript>
                                 
                                        <decimalbox onOK='productod.focus();calcularTotal();' onBlur ="calcularTotal();"  style="float:right;text-align:center" readonly="true"  cols="2" id="cantidad" value="1"/>
                                        <span>
                                            <intbox cols="1" visible="false"  id="idproducto" readonly="true" />
                                            <!--textbox value="" onFocus="vu.focus()" readonly="true" id="productod" cols="50" /-->
                                            <combobox  cols="35" id="productod" onOK='vu.focus();' 
                                                       onSelect=" if(self.selectedItem!=null){ llenarEquipo(self.selectedItem.value);} " 
                                                       autodrop="true" buttonVisible="false"  
                                                       use="siscontrol.autoCompletarProductos"/>
                                            <zscript>
                                                llenarEquipo(Productos es){
                                                        idproducto.value = es.getCodigo(); 
                                                        vu.value  = es.getPvp1();  
                                                         int a=0;
                                                        for (Iterator it = valores.getItems().iterator(); it.hasNext();) {
                                                                valores.getItems().remove(a);
                                                            }
                                                              Listitem li = new Listitem();
                                                              li.setValue(es.getPvp1());
                                                              li.appendChild(new Listcell(es.getPvp1()+""));
                                                              valores.appendChild(li);

                                                        Listitem li2 = new Listitem();
                                                              li2.setValue(es.getPvp2());
                                                              li2.appendChild(new Listcell(es.getPvp2()+""));
                                                              valores.appendChild(li2);


                                                        Listitem li3 = new Listitem();
                                                              li3.setValue(es.getPvp3());
                                                              li3.appendChild(new Listcell(es.getPvp3()+""));
                                                              valores.appendChild(li3);
                                                
                                                            valores.setSelectedIndex(0);
                                                            calcularTotal();
                                                }
                                   calcularTotal(){
                                                try{
                                                    vt.value = cantidad.value.multiply(vu.value);
                                                }catch(Exception abc){}
                                  }
                                            </zscript>
 
                                       
                                        </span>
                                        
                                        <listbox mold="select" onSelect=' try{ if(self.selectedItem!=null){ vu.value  = self.selectedItem.value;} }catch(Exception ax){alert(ax+"");System.println(""+ax);} calcularTotal();'  id="valores" width="60px">
                                            <listitem  >
                                              
                                            </listitem>
                                        </listbox>
                                        <decimalbox onOK="add.focus();calcularTotal()" onBlur="calcularTotal()"  style="float:right;text-align:center"  readonly="false"  id="vu"  />
                                        <decimalbox    style="float:right;text-align:center"  readonly="true"  id="vt"  />
                                        <span>
                                            <button  id="add"  label="Añadir Filas"    image="/images/add2.png" onClick='actualizar.visible = false; continuar.visible = true; llenarGrid(); sumarTotal("");'/>
                                        </span>
                                       
                                    </row>
                                    
                                    <row>
                                      
                                    </row>
                                     
                                </rows>
                            </grid>
                                
                        </row>
                        <row>
                            <panel id="seriespanel" visible="false" style="position:absolute; top:5%;left:20%;" framable="true" 
                                   width="200px" height="400px" title="Ingrese las series"	 border="normal">
                                <panelchildren>
                                    <grid height="309px" id="opciones2">
                                        <rows id="filas2">
                                        </rows>
                                    </grid> 
                                  
                                </panelchildren>    
                                <toolbar mold="panel" align="center">
                                    <button label="CONTINUAR"  image="/images/add2.png" id="continuar" onClick="llenarGrid();"/>
                                    <button label="ACTUALIZAR"  image="/images/actualizar.png" id="actualizar" onClick="llenarGridActualizar();"/>
                                </toolbar>
                            </panel>
                  
                        </row>
                        <row spans="4">
                          
                            <grid height="150px"  width="98%" id="opciones">
                                <columns sizable="true">
                                    <column label="CANTIDAD" width="80px" />
                                    <column label="EQUIPO" />
                                    <column label="V.U."  width="30px" />
                                    <column label="V.T."  width="30px" />
                                    <column label="OPCION" width="30px"  />
                                    <column label=" " width="30px"  />
                                </columns>
                                <rows id="filas">
                                     
                                </rows>
                            </grid>
                                 
                        </row>
                        <row visible="true" id="observacionrow">
                            <span style="float:right"> Observación: </span>
                            <span>
                                <textbox  readonly="true" rows="4"  cols="60" id="observacion"/>
                            </span>
                            <span></span>
                            <grid>
                                <rows>
                                    <row>
                                        Subtotal:
                                        <decimalbox id="totalFinal" readonly="true"  value="0" />            
                                        
                                    </row>
                                    <row>
                                        Descuento: 
                                        <decimalbox id="descuento"  onChanging='sumarTotal(event.value)'  onBlur='sumarTotal("")' onOK='sumarTotal("")' value="0" />            
                                    </row>
                                    <row>
                                        Subtotal 1: 
                                        <decimalbox id="totalFinal2" readonly="true"  value="0" />            
                                        
                                    </row>
                                    <row>
                                        <span>Iva: <decimalbox cols="2" readonly="true" value="12.0" id="viva" /> </span>
                                        <decimalbox id="iva" readonly="true"  value="0"  />            
                                    </row>
                                    <row>
                                    Total:
                                        <decimalbox id="total"  readonly="true"  value="0" />            
                                    </row>
                                </rows>
                            </grid>
                            
                        </row>
                            

                      
                    </rows>
                </grid>

                <vbox>
                    <hbox>
                        <button image="/images/guardar.gif" id="guardar" label="Guardar"  disabled="true"  onClick="guardar();"/>
                        <button  image="/images/nuevo.gif" id="agregar" label="Agregar" onClick="nuevo(); clientesBusqueda.focus();" />
                        <button  image="/images/editar.gif" id="modificar"  label="Modificar" disabled="true"  onClick="modificar()"/>
                        <button  image="/images/copiar.png" id="copiar"  label="Modificar" disabled="true"  onClick="copiar()"/>
                        <button  image="/images/imprimir.gif" id="imprimir"  label="Imprimir" disabled="false"  onClick="imprimir();"/>
                    </hbox>
                </vbox>


            </tabpanel>

            <tabpanel>

                <groupbox  width="100%" mold="3d" >

                    <caption label="Busquedas" />
                    <vbox>
                        <hbox>
                            <zscript>
                              <![CDATA[
                                  void buscar(String p){
                                    String fechaDe = jcinform.bean.generarFacturas.convertiraString(desde.value);
                                    String fechaHa = jcinform.bean.generarFacturas.convertiraString(hasta.value);
                                    String q = "Select o.* from Factura as o, Proveedores prov " 
                                        +" where prov.codigo = o.proveedores and prov.razonsocial like '%" + proveedor.value + "%' and o.factura like '"+ p +"%' and o.fecha between '"+fechaDe+"' and  '"+fechaHa+"'  "  + 
                                        " and o.sucursal = '"+sucursalEmp.getSucursal().getCodigo()+"' order by o.factura";
                                    System.out.println(q);
                                        List FacturaEncontrados = adm.queryNativo(q,Factura.class);
                                        datos = new Listbox();
                                        int a=0;
                                            for (Iterator it = datos.getItems().iterator(); it.hasNext();) {
                                                    datos.getItems().remove(a);
                                                }
                                               for (Iterator it = FacturaEncontrados.iterator(); it.hasNext();) {
                                                      Factura acceIt = (Factura) it.next();
                                                      Listitem li = new Listitem();
                                                      li.setValue(acceIt);
                                                      li.appendChild(new Listcell(acceIt.getFactura()+""));
                                                      try{
                                                        li.appendChild(new Listcell(acceIt.getProveedores().getRazonsocial()+""));
                                                      }catch(Exception err){
                                                        li.appendChild(new Listcell("* AJUSTE"));
                                                      }
                                                      li.appendChild(new Listcell(acceIt.getSeries()+""));
                                                      li.appendChild(new Listcell(acceIt.getCantidad()+""));
                                                      li.appendChild(new Listcell(acceIt.getTotal()+""));
                                                      li.appendChild(new Listcell(acceIt.getFecha().toLocaleString()+""));

                                                      datos.appendChild(li);
                                             }

                                    } 
                                    
                                void buscarSerie(String p){
                                    String fechaDe = jcinform.bean.generarFacturas.convertiraString(desde.value);
                                    String fechaHa = jcinform.bean.generarFacturas.convertiraString(hasta.value);
                                     
                                     
                                  List FacturaEncontrados = adm.query("Select distinct o.detalle.factura from Series as o " + 
                                        " where o.serie like '"+p+"%'");
                                        datos = new Listbox();
                                        int a=0;
                                            for (Iterator it = datos.getItems().iterator(); it.hasNext();) {
                                                    datos.getItems().remove(a);
                                                }
                                               for (Iterator it = FacturaEncontrados.iterator(); it.hasNext();) {
                                                      Factura acceIt = (Factura) it.next();
                                                      Listitem li = new Listitem();
                                                      li.setValue(acceIt);
                                                      li.appendChild(new Listcell(acceIt.getFactura()+""));
                                                      try{
                                                        li.appendChild(new Listcell(acceIt.getProveedores().getRazonsocial()+""));
                                                      }catch(Exception err){
                                                        li.appendChild(new Listcell("* AJUSTE"));
                                                      }
                                                      li.appendChild(new Listcell(acceIt.getSeries()+""));
                                                      li.appendChild(new Listcell(acceIt.getCantidad()+""));
                                                      li.appendChild(new Listcell(acceIt.getTotal()+""));
                                                      li.appendChild(new Listcell(acceIt.getFecha().toLocaleString()+""));

                                                      datos.appendChild(li);
                                             }

                                    } 
                                    ]]>
                            </zscript>
                            
                            No.Factura:
                            <textbox id="buscarText"  maxlength="60" cols="10" />
                            Proveedor:
                            <textbox id="proveedor"  maxlength="60" cols="10" />
                            Fechas:
                            Desde: 
                            <datebox id="desde" onCreate="Date fec = adm.Date(); fec.setDate(1); self.value = fec;"/> Hasta: 
                            <datebox id="hasta"  onCreate="self.value = adm.Date()"/>
                            <button id="buscar"  label="Buscar" onClick="buscar(buscarText.getValue());"/>
                        </hbox>
                        <hbox>
                            Búsqueda por serie:    
                            <textbox id="buscarSerie"  maxlength="60" cols="10" /> 
                            <button id="buscarser"  label="Buscar" onClick="buscarSerie(buscarSerie.getValue());"/>
                        </hbox>
                        <hbox>
                            <listbox mold="paging" rows="10" pageSize="10"  onSelect="move();estado(true,false);eliminar.disabled=false;guardar.disabled=true" id="datos" width="100%">
                                <listhead>
                                    <listheader label="Factura"/>
                                    <listheader label="Nombre"/>
                                    <listheader label="Observación"/>
                                    <listheader label="Cantidad"/>
                                    <listheader label="Precio"/>
                                    <listheader label="Fecha"/>
                                    <listheader label="Asignado"/>

                                </listhead>
                                <listitem forEach="${allEvents2}" value="${each}">
                                    <!--listcell label="${each.codigo}" />
                                    <listcell label="${each.ip}" />
                                    <listcell label="${each.ssid}" /-->
                                </listitem>
                            </listbox>


                        </hbox>
                    </vbox>
                </groupbox>



            </tabpanel>
   <tabpanel>
                    <jasperreport height="330px" id="reportelocal" />
                </tabpanel>
        </tabpanels>


    </tabbox>
   
</window>
 