
<window title="Seleccione un Curso para continuar"  >
    <zscript><![CDATA[
  import jcinform.persistencia.Global;
  import bean.EventDAO;
  import java.util.ArrayList;
  import jcinform.persistencia.*;
  import jcinform.procesos.Administrador;
  import bean.Permisos;

    Administrador adm = new Administrador();
    Session ses = Sessions.getCurrent();
    Periodo periodo = (Periodo) ses.getAttribute("periodo");
    Permisos permiso = new Permisos();
    Empleados user =  (Empleados)ses.getAttribute("user");
    
    List allEvents = adm.query("Select o from Empleados as o where o.identificacion = 0");
    static MateriaProfesor matricula = new MateriaProfesor();

   //List cursos = adm.query("Select o from Cursos as o  where o.periodo.codigoper = '"+periodo.getCodigoper()+"' order by o.secuencia,o.paralelo.descripcion, o.descripcion");

   List cursos = adm.query("Select o.curso from EmpleadoCurso as o " +
      " where o.profesor.codigoemp = '"+ user.getCodigoemp() +"' order by o.curso.secuencia, o.curso.paralelo.descripcion ");


   if(cursos.size()<=0){
             cursos = adm.query("Select o from Cursos as o "
            + " where o.periodo.codigoper = '"+ periodo.getCodigoper() +"'  order by o.secuencia,o.paralelo.descripcion, o.descripcion  ");
            System.out.println("ENTRO VACIO");
   }

   List profesores = adm.query("Select o from Empleados as o order by o.apellidos ");
        Empleados selecp = new Empleados(-1);
        selecp.setApellidos("[Seleccione]");
        selecp.setNombres("");
        profesores.add(0,selecp);
    
    List materias = adm.query("Select o from Global as o where o.grupo = 'MAT' order by o.descripcion ");
        Global selecm = new Global(-1);
        selecm.setDescripcion("[Seleccione]");
        materias.add(0,selecm);

    Object media = null;
 Session ses = Sessions.getCurrent();

//FUNCIONES

void llenar(MateriaProfesor estudent){
    codigo.value = estudent.getCodigomap();
    seimprime.checked = estudent.getSeimprime();
    promediada.checked = estudent.getMinisterio();
    opcional.checked = estudent.getOpcional();
    cuantitativa.checked = estudent.getCuantitativa();
    orden.value = estudent.getOrden();
    formula.value = estudent.getFormula();
    
        if(estudent.getCurso() != null){
                     for (int i = 0; i <= curs.getItems().size(); i++) {
                            Cursos tr0 = ((Cursos)((Listitem)curs.getItems().get(i)).getValue());
                            int primero = tr0.getCodigocur();
                            int segundo = estudent.getCurso().getCodigocur();
                            if(primero == segundo){
                                curs.setSelectedItem((Listitem)curs.getItems().get(i));
                                break;
                            }
                   }
        }
    if(estudent.getMateria() != null){

              for (int i = 0; i <= mates.getItems().size(); i++) {
                            Global tr0 = ((Global)((Listitem)mates.getItems().get(i)).getValue());
                            int primero = tr0.getCodigo();
                            int segundo = estudent.getMateria().getCodigo();
                            if(primero == segundo){
                                mates.setSelectedItem((Listitem)mates.getItems().get(i));
                                break;
                            }
                   }

        }
        if(estudent.getEmpleado() != null){
                for (int i = 0; i <= profes.getItems().size(); i++) {
                            Empleados tr0 = ((Empleados)((Listitem)profes.getItems().get(i)).getValue());
                            int primero = tr0.getCodigoemp();
                            int segundo = estudent.getEmpleado().getCodigoemp();
                            if(primero == segundo){
                                profes.setSelectedItem((Listitem)profes.getItems().get(i));
                                break;
                            }
                   }
        }

        
}


 
void estado(Boolean estado,Boolean modificar){
        if(modificar){
            estudent = (MateriaProfesor)datos.selectedItem.value;
        }
   codigo.disabled = estado;
    seimprime.disabled = estado;
    promediada.disabled = estado;
    opcional.disabled = estado;
    cuantitativa.disabled = estado;
    orden.disabled = estado;
    mates.disabled = estado;
    profes.disabled = estado;
    formula.disabled = estado;

}


 void guardar(){


 if(orden.value == null || profes.getSelectedIndex()==0 || mates.getSelectedIndex()== 0){
    Messagebox.show("Ingrese o [Seleccione] los campos con (*) para continuar...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    return;
 }
        matricula.setCodigomap(codigo.value);
        matricula.setFormula(formula.value);
        matricula.setOrden(orden.value);
        matricula.setCurso(curs.selectedItem.value);
        matricula.setMateria(mates.selectedItem.value);
        matricula.setEmpleado(profes.selectedItem.value);
        matricula.setSeimprime(seimprime.checked);
        matricula.setMinisterio(promediada.checked);
        matricula.setOpcional(opcional.checked); //ingresan disciplina
        matricula.setCuantitativa(cuantitativa.checked);

        if((!matricula.getCodigomap().equals(0)) ){
                adm.actualizar(matricula);
 
                  try{
                      String quera = "update notas set orden = '"+orden.value+"', seimprime = "+seimprime.checked+",  " +
                      " promedia = "+ promediada.checked +", cuantitativa = "+ cuantitativa.checked +"  "+
                      " where matricula in (SELECT codigomat FROM matriculas WHERE curso =  " + matricula.getCurso().getCodigocur() +" ) " +
                      " and materia = "+matricula.getMateria().getCodigo()+" ";
                  adm.ejecutaSqlNativo(quera);
                  System.out.println("ACTUALIZANDO DISTRIBUTIVO NOTAS "+quera);
                  }catch(Exception ae){
                         System.out.println("ERROR EN ACTUALIZAR NOTAS "+ae);
                  }
                  
         }else{
            List existe = adm.query("Select o from MateriaProfesor as o where o.curso.codigocur = '"+((Cursos)curs.selectedItem.value).getCodigocur()+"'  and o.materia.codigo = '"+((Global)mates.selectedItem.value).getCodigo()+"' ");
                if(existe.size()>0){
                    Messagebox.show("MATERIA YA ASIGNADA...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                    return;
                }
             matricula.setCodigomap(adm.getNuevaClave("MateriaProfesor","codigomap"));
             adm.guardar(matricula);
               
         }
                Messagebox.show("Registro Almacenado con Éxito...!", "Administrador Educativo", Messagebox.OK, Messagebox.INFORMATION);
                permiso.auditar("Distributivo","Guardar",""+matricula.getCurso()+" "+matricula.getMateria());
                guardar.disabled=true;
                agregar.disabled=false;
                estado(true,false);
                llenar(new MateriaProfesor(0));
                buscar2(curs.selectedItem.value);


    }

   Boolean verificar(String accion){
        return permiso.verificarPermiso("Aportes",accion);

    }
 void nuevo(){
    if(verificar("Agregar")){
       guardar.disabled=false; llenar(new MateriaProfesor(0));estado(false,false);
       mates.setSelectedIndex(0);
        profes.setSelectedIndex(0);

    }else{
            Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    }
}
 void move(){
        llenar((MateriaProfesor)datos.selectedItem.value);
        modificar.disabled = false;
        combo.value="";
  }
void modificar(){
  if(verificar("Modificar")){
       guardar.disabled=false;
        estado(false,false);
    }else{
            Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    }
}
void eliminar(){
  if(verificar("Eliminar")){
        try{
             estudent = (MateriaProfesor)datos.selectedItem.value;
             adm.eliminarObjeto(MateriaProfesor.class, estudent.getCodigomap());
            datos.removeItemAt(datos.getSelectedIndex());
            permiso.auditar("Distributivo","Eliminar",""+estudent.getCurso()+" "+estudent.getMateria());
            llenar(new MateriaProfesor(0));
            combo.value="";
                Messagebox.show("Registro Eliminado con Éxito...!", "Administrador Educativo", Messagebox.OK, Messagebox.INFORMATION);
        }catch(Exception e){
            Messagebox.show("No se pudo eliminar el Registro...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
        }
}else{
            Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    }
}


void buscar2(Cursos cur){
mates.setSelectedIndex(0);
profes.setSelectedIndex(0);

        List empleadosEncontrados = adm.query("Select o from MateriaProfesor as o where o.curso.codigocur = '"+cur.codigocur+"' order by o.orden");
        datos = new Listbox();
        int a=0;
            for (Iterator it = datos.getItems().iterator(); it.hasNext();) {
                    datos.getItems().remove(a);
                }
               for (Iterator it = empleadosEncontrados.iterator(); it.hasNext();) {
                      MateriaProfesor acceIt = (MateriaProfesor) it.next();
                      Listitem li = new Listitem();
                      li.setValue(acceIt);
                      li.appendChild(new Listcell(acceIt.getOrden()+""));
                      li.appendChild(new Listcell(acceIt.getEmpleado().getApellidos()+" "+acceIt.getEmpleado().getNombres()));
                      li.appendChild(new Listcell(acceIt.getMateria()+""));
                      li.appendChild(new Listcell((acceIt.getCuantitativa()?"SI":"NO")+""));
                      li.appendChild(new Listcell((acceIt.getMinisterio()?"SI":"NO")+""));
                      li.appendChild(new Listcell((acceIt.getOpcional()?"SI":"NO")+""));
                      li.appendChild(new Listcell((acceIt.getSeimprime()?"SI":"NO")+""));
                      
                      datos.appendChild(li);
             }

    }
   
   void buscar2Desde(Cursos cur){
            List empleadosEncontrados = adm.query("Select o from MateriaProfesor as o where o.curso.codigocur = '"+cur.codigocur+"' order by o.orden");
        desCursos = new Listbox();
        int a=0;
            for (Iterator it = desCursos.getItems().iterator(); it.hasNext();) {
                    desCursos.getItems().remove(a);
                }
               for (Iterator it = empleadosEncontrados.iterator(); it.hasNext();) {
                      MateriaProfesor acceIt = (MateriaProfesor) it.next();
                      Listitem li = new Listitem();
                      li.setValue(acceIt);
      
                      li.appendChild(new Listcell(acceIt.getEmpleado().getApellidos()+" "+acceIt.getEmpleado().getNombres()));
                      li.appendChild(new Listcell(acceIt.getMateria()+""));
  
                      desCursos.appendChild(li);
             }

    }
       void buscar2Hasta(Cursos cur){
        
        
        if(cur.equals(desdeCurso.selectedItem.value)){
                alert("Seleccione otro curso, El Origen es igual al Destino");
      
            return;
        }

        List empleadosEncontrados = adm.query("Select o from MateriaProfesor as o where o.curso.codigocur = '"+cur.codigocur+"' order by o.orden");
        hasCursos = new Listbox();
        int a=0;
            for (Iterator it = hasCursos.getItems().iterator(); it.hasNext();) {
                    hasCursos.getItems().remove(a);
                }
               for (Iterator it = empleadosEncontrados.iterator(); it.hasNext();) {
                      MateriaProfesor acceIt = (MateriaProfesor) it.next();
                      Listitem li = new Listitem();
                      li.setValue(acceIt);
                      li.appendChild(new Listcell(acceIt.getEmpleado().getApellidos()+" "+acceIt.getEmpleado().getNombres()));
                      li.appendChild(new Listcell(acceIt.getMateria()+""));
                    
                      hasCursos.appendChild(li);
             }

    }
   
void materias123(){
Cursos cur = curs.selectedItem.value;
        List empleadosEncontrados = adm.query("Select o from MateriaProfesor as o where o.curso.codigocur = '"+cur.codigocur+"' order by o.orden");
        materiaslista = new Listbox();
        int a=0;
            for (Iterator it = materiaslista.getItems().iterator(); it.hasNext();) {
                    materiaslista.getItems().remove(a);
            }
               for (Iterator it = empleadosEncontrados.iterator(); it.hasNext();) {
                      MateriaProfesor acceIt = (MateriaProfesor) it.next();
                      Listitem li = new Listitem();
                      li.setValue(acceIt.getMateria());
                      li.appendChild(new Listcell("[MA"+acceIt.getMateria().getCodigo()+"] "+acceIt.getMateria().getDescripcion()));
                      materiaslista.appendChild(li);
             }
             materiaslista.visible = true; 
             cerrar.visible=true;
             verificar.visible = true;

    }
    void anadir(Global glob){
    //alert(glob);
    formula.value = formula.value +"MA"+ glob.getCodigo()+" + ";
    
    }
    
    public void anadirCursos(){
        if(hastaCurso.selectedItem.value == -1 || desdeCurso.selectedItem.value == -1){
            alert("Seleccione el Origen y Destino");
            return;
        }
        Set  selec =  desCursos.getSelectedItems();
        for (Iterator it = selec.iterator(); it.hasNext();) {
                        Listitem object = (Listitem)it.next();
                             List children = object.children;
                              MateriaProfesor cor =   object.getValue();
                              cor.setCurso(hastaCurso.selectedItem.value);
                                 List existe = adm.query("Select o from MateriaProfesor as o where o.curso.codigocur = '"+cor.getCurso().getCodigocur()+"'  "  + 
                                 " and o.materia.codigo = '"+cor.getMateria().getCodigo()+"' ");
                                    if(existe.size()>0){
                                        Messagebox.show("UNA O VARIAS MATERIAS YA ESTÁN ASIGNADAS...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                                        return;
                                    }
                                 cor.setCodigomap(adm.getNuevaClave("MateriaProfesor","codigomap"));
                                 adm.guardar(cor);
        }
       
        buscar2Hasta(hastaCurso.selectedItem.value);
       permiso.auditar("Copiar Distributivo","Guardar","D: "+desdeCurso.selectedItem.value+" H: "+hastaCurso.selectedItem.value);
}

void vaciarList(){
        int a=0;
            for (Iterator it = datos.getItems().iterator(); it.hasNext();) {
                   datos.getItems().remove(a);
            }
            for (Iterator it = desCursos.getItems().iterator(); it.hasNext();) {
                   desCursos.getItems().remove(a);
            }
            for (Iterator it = hasCursos.getItems().iterator(); it.hasNext();) {
                   hasCursos.getItems().remove(a);
            }
            
}
    
]]>
    </zscript>
 
    <grid width="100%">
        <rows>
            <row>
                <span style="float:right"> Curso(*):
                </span>
                <span>
                    <listbox id="curs" mold="select"  width="420px"
                                        onSelect=" buscar2(((Cursos)self.selectedItem.value));">
                        <listitem    forEach="${cursos}" value="${each}">
                            <listcell label="${each.descripcion} ${each.especialidad}  ${each.paralelo}" />
                        </listitem>
                        <listitem selected="true"   value="-1">
                            <listcell label="[Seleccione]" />
                        </listitem>
                    </listbox>
                    <intbox maxlength="14" cols="1"  readonly="true"   disabled="true" id="codigo"  />
                     <button image="/images/add.png" id="copiarDistributivo" label="COPIAR EL DISTRIBUTIVO DE OTRO CURSO "     onClick="panel.visible = true;curs.selectedIndex = -1;desdeCurso.selectedIndex =-1; hastaCurso.selectedIndex = -1;vaciarList();"/>
                </span>

            </row>
            <row>
                <span style="float:right"> Materias(*):
                </span>
                    
                <listbox id="mates"  disabled="true" mold="select" width="320px" >
                    <listitem selected="true" forEach="${materias}" value="${each}">
                        <listcell label="${each.descripcion}" />
                    </listitem>
                </listbox>
                    

            </row>
            <row>
                <span style="float:right"> Profesores(*):
                </span>

                <listbox mold="select"   disabled="true"  id="profes" width="320px">
                    <listitem selected="true"  forEach="${profesores}" value="${each}">
                        <listcell label="${each.apellidos} ${each.nombres}" />
                    </listitem>
                </listbox>
                            
            </row>
            <row>
                <span style="float:right">
                </span>
                <span>
                    <checkbox label="Cuantitativa"  id="cuantitativa"  disabled="true"    />
                    <checkbox   label="Promediada"  id="promediada"  disabled="true"  />
                    <checkbox  label="Ingresan Disciplina" id="opcional"  disabled="true"   />
                    <checkbox  label="Se Imprime" id="seimprime"  disabled="true"   />
                </span>
            </row>
                
            <row>
                <span style="float:right"> Orden(*):
                </span>
                <intbox id="orden"  disabled="true"  />
            </row>
            <row>
                <span style="float:right"> Fórmula:
                </span>
                <span>
                    <textbox id="formula" cols="50"  disabled="true"  />
                    <button label="Ver" onClick=" materias123(); "/>
                    <listbox onSelect="anadir(self.selectedItem.value)" visible="false" id="materiaslista" width="45%">
                        <listhead>
                            <listheader label="Materia"  sort="auto"/>
                        </listhead>
                    </listbox>
                    <button  label="Cerrar" visible="false" id="cerrar" onClick="materiaslista.visible = false; cerrar.visible=false; verificar.visible = false;"/>
                        <!--button  label="Verificar" visible="false" id="verificar"/-->
                </span>
            </row>
        </rows>
    </grid>

    <groupbox  width="100%"  mold="3d" >
      
        <vbox width="100%">
            <hbox>  </hbox>
            <hbox width="100%">
                <listbox  mold="paging" rows="10" pageSize="10"  onSelect="move();estado(true,false);eliminar.disabled=false;guardar.disabled=true" id="datos" width="100%">
                    <listhead>
                        <listheader label="Orden"   sort="auto"/>
                        <listheader label="Empleado"  sort="auto"/>
                        <listheader label="Materia"   sort="auto"/>
                        <listheader label="Cuant."   sort="auto"/>
                        <listheader label="Prom."   sort="auto"/>
                        <listheader label="Disc."   sort="auto"/>
                        <listheader label="Impr."   sort="auto"/>
                        
                    </listhead>
                    <listitem forEach="${allEvents}" value="${each}">
                     
                    </listitem>
                </listbox>
            </hbox>
        </vbox>
    </groupbox>
    <vbox>
        <hbox>
            <button image="/images/guardar.gif" id="guardar" label="Guardar"  disabled="true"  onClick="guardar();"/>
            <button  image="/images/nuevo.gif" id="agregar" label="Agregar" onClick="nuevo();" />
            <button  image="/images/editar.gif" id="modificar"  label="Modificar" disabled="true"  onClick="modificar()"/>
            <button  image="/images/eliminar.gif" id="eliminar"  label="Eliminar" disabled="true"  onClick="eliminar();"/>
        </hbox>
    </vbox>
       <panel id="panel" visible = "false" style="position:absolute; top:2%; left:1%" framable="true" height="400px"	title="COPIAR DISTRIBUTIVO" border="normal"   >
 
        <panelchildren>
            <grid width="100%">
                <rows>
                    <row>
                        <span > DESDE EL CURSO(*):
                        </span>
                        <span > HASTA EL CURSO(*):
                        </span>
                    </row>
                    <row>
                        <span>
                            <listbox id="desdeCurso" mold="select"  width="420px"
                            onSelect=" buscar2Desde(((Cursos)self.selectedItem.value));">
                                <listitem    forEach="${cursos}" value="${each}">
                                    <listcell label="${each.descripcion} ${each.especialidad}  ${each.paralelo}" />
                                </listitem>
                                <listitem selected="true"   value="-1">
                                    <listcell label="[Seleccione]" />
                                </listitem>
                            </listbox>
                        </span>
                        <span>
                            <listbox id="hastaCurso" mold="select"  width="420px"
                            onSelect=" buscar2Hasta(((Cursos)self.selectedItem.value));">
                                <listitem    forEach="${cursos}" value="${each}">
                                    <listcell label="${each.descripcion} ${each.especialidad}  ${each.paralelo}" />
                                </listitem>
                                <listitem selected="true"    value="-1">
                                    <listcell label="[Seleccione]" />
                                </listitem>
                            </listbox>
                        </span>
                    </row>
                    <row>
                        <listbox  id="desCursos" multiple="true" checkmark="true" rows="60"  mold="paging" height="240px"  width="100%">
                            <listhead>
                                <listheader label="Seleccionar Todo"   sort="auto"/>
                                <listheader label="Materia"  sort="auto"/>
                            </listhead>
                            <listitem forEach="${allEvents}" value="${each}">
                                <listcell label="${each.apellido} ${each.nombre}" />
                            </listitem>
                        </listbox>
                        <listbox  id="hasCursos"  multiple="true" checkmark="true"  rows="60" mold="paging" height="240px"  width="100%">
                            <listhead>
                                <listheader label="Seleccionar Todo"   sort="auto"/>
                                <listheader label="Materia"  sort="auto"/>
                            </listhead>
                            <listitem forEach="${allEvents}" value="${each}">

                                <listcell label="${each.apellido} ${each.nombre}" />

                            </listitem>
                        </listbox>
                     

                    </row>
                    <row>
                        <span style="float:right">
                            <button image="/images/anadir.png" dir="reverse"  id="anadirCursos" label="Añadir al Curso"  disabled="false"  onClick="anadirCursos();"/>
                        </span>
                        <button image="/images/exit.gif" height="35px" label="Salir" width="150px"  onClick="panel.visible=false;"/>
                        <!--button image="/images/quitar.png" id="quitarCursos" label="Quitar del Curso"  disabled="false"  onClick="guardar2();"/-->
                    </row>
                </rows>
            </grid>
        </panelchildren>
    </panel>
</window>

 