
<window >
    <style>
.MyGridRowHeight tr.z-row td.z-row-inner
{ 
    background: white;
      border-top: none;
      border-left: 1px solid white;
      border-right: 1px solid #CCC;
      border-bottom: 1px solid #DDD;

}
/*.MyGridRowHeight tr.z-grid-odd td.z-row-inner, tr.z-grid-odd{
  background: #F8F8F8;
} */
.MyGridRowHeight td.z-row-inner
{
    padding: 0px;
    //overflow: hidden;
}
    </style>
    <zscript><![CDATA[
  import jcinform.persistencia.Global;
  import bean.EventDAO;
  import java.util.ArrayList;
  import jcinform.persistencia.*;
  import jcinform.procesos.Administrador;
  import bean.Permisos;

    Administrador adm = new Administrador();
    Session ses = Sessions.getCurrent();
    Periodo periodo = (Periodo) ses.getAttribute("periodo");
    Permisos permiso = new Permisos();
    Empleados user =  (Empleados)ses.getAttribute("user");
    
    List allEvents = adm.query("Select o from Empleados as o where o.identificacion = 0");
    static MateriaProfesor matricula = new MateriaProfesor();
   //List cursos = adm.query("Select o from Cursos as o  where o.periodo.codigoper = '"+periodo.getCodigoper()+"' order by o.secuencia,o.paralelo.descripcion, o.descripcion");
   
   List periodoActuales = adm.query("Select o from Periodo as o where o.codigoper <> '"+periodo.getCodigoper()+"' ");
   
   List cursos = adm.query("Select o.curso from EmpleadoCurso as o " +
      " where o.profesor.codigoemp = '"+ user.getCodigoemp() +"' and o.curso.periodo.codigoper =  '"+ periodo.getCodigoper() +"' order by o.curso.secuencia, o.curso.paralelo.descripcion ");
   if(cursos.size()<=0){
             cursos = adm.query("Select o from Cursos as o "
            + " where o.periodo.codigoper = '"+ periodo.getCodigoper() +"'  order by o.secuencia,o.paralelo.descripcion, o.descripcion  ");
            System.out.println("ENTRO VACIO");
   }
   List profesores = adm.query("Select o from Empleados as o order by o.apellidos ");
        Empleados selecp = new Empleados(-1);
        selecp.setApellidos("[Seleccione]");
        selecp.setNombres("");
        profesores.add(0,selecp);
    
    List materias = adm.query("Select o from Global as o where o.grupo = 'MAT' order by o.descripcion ");
        Global selecm = new Global(-1);
        selecm.setDescripcion("[Seleccione]");
        materias.add(0,selecm);

    Object media = null;
 Session ses = Sessions.getCurrent();

//FUNCIONES

void llenar(MateriaProfesor estudent){
    codigo.value = estudent.getCodigomap();
    seimprime.checked = estudent.getSeimprime();
    promediada.checked = estudent.getMinisterio();
    opcional.checked = estudent.getOpcional();
    cuantitativa.checked = estudent.getCuantitativa();
    orden.value = estudent.getOrden();
    formula.value = estudent.getFormula();
    
        if(estudent.getCurso() != null){
                     for (int i = 0; i <= curs.getItems().size(); i++) {
                            Cursos tr0 = ((Cursos)((Listitem)curs.getItems().get(i)).getValue());
                            int primero = tr0.getCodigocur();
                            int segundo = estudent.getCurso().getCodigocur();
                            if(primero == segundo){
                                curs.setSelectedItem((Listitem)curs.getItems().get(i));
                                break;
                            }
                   }
        }
    if(estudent.getMateria() != null){

              for (int i = 0; i <= mates.getItems().size(); i++) {
                            Global tr0 = ((Global)((Listitem)mates.getItems().get(i)).getValue());
                            int primero = tr0.getCodigo();
                            int segundo = estudent.getMateria().getCodigo();
                            if(primero == segundo){
                                mates.setSelectedItem((Listitem)mates.getItems().get(i));
                                break;
                            }
                   }
                   
                    for (int i = 0; i <= matesAnterior.getItems().size(); i++) {
                            Global tr0 = ((Global)((Listitem)matesAnterior.getItems().get(i)).getValue());
                            int primero = tr0.getCodigo();
                            int segundo = estudent.getMateria().getCodigo();
                            if(primero == segundo){
                                matesAnterior.setSelectedItem((Listitem)matesAnterior.getItems().get(i));
                                break;
                            }
                   }

        }
        if(estudent.getEmpleado() != null){
                for (int i = 0; i <= profes.getItems().size(); i++) {
                            Empleados tr0 = ((Empleados)((Listitem)profes.getItems().get(i)).getValue());
                            int primero = tr0.getCodigoemp();
                            int segundo = estudent.getEmpleado().getCodigoemp();
                            if(primero == segundo){
                                profes.setSelectedItem((Listitem)profes.getItems().get(i));
                                break;
                            }
                   }
        }

        
}


 
void estado(Boolean estado,Boolean modificar){
        if(modificar){
            estudent = (MateriaProfesor)datos.selectedItem.value;
        }
   codigo.disabled = estado;
    seimprime.disabled = estado;
    promediada.disabled = estado;
    opcional.disabled = estado;
    cuantitativa.disabled = estado;
    orden.readonly = estado;
    mates.disabled = estado;
    profes.disabled = estado;
    formula.readonly = estado;

}


 void guardar(){


 if(orden.value == null || profes.getSelectedIndex()==0 || mates.getSelectedIndex()== 0){
    Messagebox.show("Ingrese o [Seleccione] los campos con (*) para continuar...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    return;
 }
        matricula.setCodigomap(codigo.value);
        matricula.setFormula(formula.value);
        matricula.setOrden(orden.value);
        matricula.setCurso(curs.selectedItem.value);
        matricula.setMateria(mates.selectedItem.value);
        matricula.setEmpleado(profes.selectedItem.value);
        matricula.setSeimprime(seimprime.checked);
        matricula.setMinisterio(promediada.checked);
        matricula.setOpcional(opcional.checked); //ingresan disciplina
        matricula.setCuantitativa(cuantitativa.checked);

        if((!matricula.getCodigomap().equals(0)) ){
                adm.actualizar(matricula);
 
                  try{
                  if((mates.selectedItem.value).getCodigo().equals((matesAnterior.selectedItem.value).getCodigo())){
                      String quera = "update notas set orden = '"+orden.value+"', seimprime = "+seimprime.checked+",  " +
                      " promedia = "+ promediada.checked +", cuantitativa = "+ cuantitativa.checked +"  "+
                      " where matricula in (SELECT codigomat FROM matriculas WHERE curso =  " + matricula.getCurso().getCodigocur() +" ) " +
                      " and materia = "+matricula.getMateria().getCodigo()+" ";
                     adm.ejecutaSqlNativo(quera);
                  }else{
            
                    String quera = "update notas set materia = '"+ matricula.getMateria().getCodigo() +"', orden = '"+orden.value+"', seimprime = "+seimprime.checked+",  " +
                          " promedia = "+ promediada.checked +", cuantitativa = "+ cuantitativa.checked +"  "+
                          " where matricula in (SELECT codigomat FROM matriculas WHERE curso =  " + matricula.getCurso().getCodigocur() +" ) " +
                          " and materia = "+(matesAnterior.selectedItem.value).getCodigo()+" ";
                        adm.ejecutaSqlNativo(quera);
                  
                  }
                        //System.out.println("ACTUALIZANDO DISTRIBUTIVO NOTAS "+quera);
                  }catch(Exception ae){
                         System.out.println("ERROR EN ACTUALIZAR NOTAS "+ae);
                  }
                  
         }else{
            List existe = adm.query("Select o from MateriaProfesor as o where o.curso.codigocur = '"+((Cursos)curs.selectedItem.value).getCodigocur()+"'  and o.materia.codigo = '"+((Global)mates.selectedItem.value).getCodigo()+"' ");
                if(existe.size()>0){
                    Messagebox.show("MATERIA YA ASIGNADA...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                    return;
                }
             matricula.setCodigomap(adm.getNuevaClave("MateriaProfesor","codigomap"));
             adm.guardar(matricula);
               
         }
                Messagebox.show("Registro Almacenado con Éxito...!", "Administrador Educativo", Messagebox.OK, Messagebox.INFORMATION);
                permiso.auditar("Distributivo","Guardar",""+matricula.getCurso()+" "+matricula.getMateria());
                guardar.disabled=true;
                agregar.disabled=false;
                estado(true,false);
                llenar(new MateriaProfesor(0));
                buscar2(curs.selectedItem.value);


    }

   Boolean verificar(String accion){
        return permiso.verificarPermiso("Aportes",accion);

    }
 void nuevo(){
    if(verificar("Agregar")){
       guardar.disabled=false; llenar(new MateriaProfesor(0));estado(false,false);
       mates.setSelectedIndex(0);
        profes.setSelectedIndex(0);

    }else{
            Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    }
}
 void move(){
        llenar((MateriaProfesor)datos.selectedItem.value);
        modificar.disabled = false;
        combo.value="";
  }
void modificar(){
  if(verificar("Modificar")){
       guardar.disabled=false;
        estado(false,false);
    }else{
            Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    }
}
void eliminar(){
  if(verificar("Eliminar")){
        try{
             estudent = (MateriaProfesor)datos.selectedItem.value;
             adm.eliminarObjeto(MateriaProfesor.class, estudent.getCodigomap());
            datos.removeItemAt(datos.getSelectedIndex());
            permiso.auditar("Distributivo","Eliminar",""+estudent.getCurso()+" "+estudent.getMateria());
            llenar(new MateriaProfesor(0));
            combo.value="";
              try{
                 String quera = "update notas set orden = 1000, seimprime = false,  " +
                      " promedia = false, cuantitativa = false  "+
                      " where matricula in (SELECT codigomat FROM matriculas WHERE curso =  " + estudent.getCurso().getCodigocur() +" ) " +
                      " and materia = "+estudent.getMateria().getCodigo()+" ";
                  adm.ejecutaSqlNativo(quera);
                  System.out.println("ACTUALIZANDO DISTRIBUTIVO NOTAS "+quera);
              }catch(Exception ae){
                     System.out.println("ERROR EN ACTUALIZAR NOTAS "+ae);
              }
            
                Messagebox.show("Registro Eliminado con Éxito...!", "Administrador Educativo", Messagebox.OK, Messagebox.INFORMATION);
        }catch(Exception e){
            Messagebox.show("No se pudo eliminar el Registro...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
        }
}else{
            Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    }
}


void buscar2(Cursos cur){
mates.setSelectedIndex(0);
profes.setSelectedIndex(0);

        List empleadosEncontrados = adm.query("Select o from MateriaProfesor as o where o.curso.codigocur = '"+cur.codigocur+"' order by o.orden");
        datos = new Listbox();
        int a=0;
            for (Iterator it = datos.getItems().iterator(); it.hasNext();) {
                    datos.getItems().remove(a);
                }
               for (Iterator it = empleadosEncontrados.iterator(); it.hasNext();) {
                      MateriaProfesor acceIt = (MateriaProfesor) it.next();
                      Listitem li = new Listitem();
                      li.setValue(acceIt);
                      li.appendChild(new Listcell(acceIt.getOrden()+""));
                      li.appendChild(new Listcell(acceIt.getEmpleado().getApellidos()+" "+acceIt.getEmpleado().getNombres()));
                      li.appendChild(new Listcell(acceIt.getMateria()+" [MA"+acceIt.getMateria().getCodigo()+"] " ));
                      li.appendChild(new Listcell((acceIt.getCuantitativa()?"SI":"NO")+""));
                      li.appendChild(new Listcell((acceIt.getMinisterio()?"SI":"NO")+""));
                      li.appendChild(new Listcell((acceIt.getOpcional()?"SI":"NO")+""));
                      li.appendChild(new Listcell((acceIt.getSeimprime()?"SI":"NO")+""));
                      
                      datos.appendChild(li);
             }

    }
   
   void buscar2Desde(Cursos cur){
            List empleadosEncontrados = adm.query("Select o from MateriaProfesor as o where o.curso.codigocur = '"+cur.codigocur+"' order by o.orden");
        desCursos = new Listbox();
        int a=0;
            for (Iterator it = desCursos.getItems().iterator(); it.hasNext();) {
                    desCursos.getItems().remove(a);
                }
               for (Iterator it = empleadosEncontrados.iterator(); it.hasNext();) {
                      MateriaProfesor acceIt = (MateriaProfesor) it.next();
                      Listitem li = new Listitem();
                      li.setValue(acceIt);
      
                      li.appendChild(new Listcell(acceIt.getEmpleado().getApellidos()+" "+acceIt.getEmpleado().getNombres()));
                      li.appendChild(new Listcell(acceIt.getMateria()+""));
  
                      desCursos.appendChild(li);
             }

    }
       void buscar2Hasta(Cursos cur){
        
        
        if(cur.equals(desdeCurso.selectedItem.value)){
                alert("Seleccione otro curso, El Origen es igual al Destino");
      
            return;
        }

        List empleadosEncontrados = adm.query("Select o from MateriaProfesor as o where o.curso.codigocur = '"+cur.codigocur+"' order by o.orden");
        hasCursos = new Listbox();
        int a=0;
            for (Iterator it = hasCursos.getItems().iterator(); it.hasNext();) {
                    hasCursos.getItems().remove(a);
                }
               for (Iterator it = empleadosEncontrados.iterator(); it.hasNext();) {
                      MateriaProfesor acceIt = (MateriaProfesor) it.next();
                      Listitem li = new Listitem();
                      li.setValue(acceIt);
                      li.appendChild(new Listcell(acceIt.getEmpleado().getApellidos()+" "+acceIt.getEmpleado().getNombres()));
                      li.appendChild(new Listcell(acceIt.getMateria()+""));
                    
                      hasCursos.appendChild(li);
             }

    }
   
void materias123(){
Cursos cur = curs.selectedItem.value;
        List empleadosEncontrados = adm.query("Select o from MateriaProfesor as o where o.curso.codigocur = '"+cur.codigocur+"' order by o.orden");
        materiaslista = new Listbox();
        int a=0;
            for (Iterator it = materiaslista.getItems().iterator(); it.hasNext();) {
                    materiaslista.getItems().remove(a);
            }
               for (Iterator it = empleadosEncontrados.iterator(); it.hasNext();) {
                      MateriaProfesor acceIt = (MateriaProfesor) it.next();
                      Listitem li = new Listitem();
                      li.setValue(acceIt.getMateria());
                      li.appendChild(new Listcell("[MA"+acceIt.getMateria().getCodigo()+"] "+acceIt.getMateria().getDescripcion()));
                      materiaslista.appendChild(li);
             }
             materiaslista.visible = true; 
             cerrar.visible=true;
             verificar.visible = true;

    }
    void anadir(Global glob){
    //alert(glob);
    formula.value = formula.value +"MA"+ glob.getCodigo()+" + ";
    
    }
    
    public void anadirCursos(){
        if(hastaCurso.selectedItem.value == -1 || desdeCurso.selectedItem.value == -1){
            alert("Seleccione el Origen y Destino");
            return;
        }
        Set  selec =  desCursos.getSelectedItems();
        for (Iterator it = selec.iterator(); it.hasNext();) {
                        Listitem object = (Listitem)it.next();
                             List children = object.children;
                              MateriaProfesor cor =   object.getValue();
                              cor.setCurso(hastaCurso.selectedItem.value);
                                     List existe = adm.query("Select o from MateriaProfesor as o where o.curso.codigocur = '"+cor.getCurso().getCodigocur()+"'  "  +
                                 " and o.materia.codigo = '"+cor.getMateria().getCodigo()+"' ");
                                    if(existe.size()>0){
                                        Messagebox.show("UNA O VARIAS MATERIAS YA ESTÁN ASIGNADAS...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                                        return;
                                    }
                                 cor.setCodigomap(adm.getNuevaClave("MateriaProfesor","codigomap"));
                                 adm.guardar(cor);
        }
       
        buscar2Hasta(hastaCurso.selectedItem.value);
       permiso.auditar("Copiar Distributivo","Guardar","D: "+desdeCurso.selectedItem.value+" H: "+hastaCurso.selectedItem.value);
}

void vaciarList(){
        int a=0;
            for (Iterator it = datos.getItems().iterator(); it.hasNext();) {
                   datos.getItems().remove(a);
            }
            for (Iterator it = desCursos.getItems().iterator(); it.hasNext();) {
                   desCursos.getItems().remove(a);
            }
            for (Iterator it = hasCursos.getItems().iterator(); it.hasNext();) {
                   hasCursos.getItems().remove(a);
            }
            
}
//PARA POR PROFESORES ***********************************************************************************************************************************************************************************************
Listbox llenarComboMaterias(Global mat){
        Listbox lista = new Listbox();
        
            for (Iterator it = materias.iterator(); it.hasNext();) {
                       Global acceIt = (Global) it.next();
                        Listitem li = new Listitem();
                          li.setValue(acceIt);
                          Listcell celda = new Listcell(acceIt.getDescripcion()+" [MA"+acceIt.getCodigo()+"]" );
                      
                          li.appendChild(celda);
                            if(mat.getCodigo().equals(acceIt.getCodigo()))
                                li.setSelected(true);
                          lista.appendChild(li);

            }
            lista.setMold("select");
             lista.setStyle("font-size:11px");
        return lista;
}

Listbox llenarComboCursos(Cursos cur){
        Listbox lista = new Listbox();
            Cursos curse = new Cursos(-1);
            Listitem li = new Listitem();
            li.setValue(curse);
            li.appendChild(new Listcell("[Seleccione]"));
            if(cur.getCodigocur().equals(curse.getCodigocur())){
                li.setSelected(true);
             }
            lista.appendChild(li);

            for (Iterator it = cursos.iterator(); it.hasNext();) {
                       Cursos acceIt = (Cursos) it.next();
                         li = new Listitem();
                         li.setValue(acceIt);
                          li.appendChild(new Listcell(acceIt.getDescripcion()+" "+acceIt.getEspecialidad()+" "+acceIt.getParalelo()));
                          if(cur.getCodigocur().equals(acceIt.getCodigocur()))
                                li.setSelected(true);
                          lista.appendChild(li);

            }
            
            lista.setMold("select");
            lista.setStyle("font-size:10px");
        return lista;
}

llenarGrid(Empleados emp){

        List empleadosEncontrados = adm.query("Select o from MateriaProfesor as o " + 
        " where o.empleado.codigoemp = '"+emp.getCodigoemp()+"' and o.curso.periodo.codigoper = '"+periodo.getCodigoper()+"' " +
        " order by o.orden");
        datos2 = new Grid();
                    filas.getChildren().clear();
            if(empleadosEncontrados.size()>0){
                 
                       for (Iterator it = empleadosEncontrados.iterator(); it.hasNext();) {
                              MateriaProfesor acceIt = (MateriaProfesor) it.next();
                                    Row row = new Row();
                                    row.appendChild(new Label(""+acceIt.getCodigomap()));
                                   row.appendChild(llenarComboMaterias(acceIt.getMateria()));
                                    Listbox listaC = llenarComboCursos(acceIt.getCurso());
                                    listaC.setMold("select");
                                    row.appendChild(listaC);
                                    Checkbox ch = new Checkbox();
                                        ch.setChecked(acceIt.getCuantitativa());
                                        row.appendChild(ch);
                                    ch = new Checkbox();
                                        ch.setChecked(acceIt.getMinisterio());
                                        row.appendChild(ch);

                                     ch = new Checkbox();
                                        ch.setChecked(acceIt.getOpcional());
                                        row.appendChild(ch);

                                     ch = new Checkbox();
                                        ch.setChecked(acceIt.getSeimprime());
                                        row.appendChild(ch);

                                        Intbox tx = new Intbox(acceIt.getOrden());
                                        row.appendChild(tx);
                                        Textbox formu = new Textbox(acceIt.getFormula());
                                        row.appendChild(formu);


                                          Toolbarbutton aButton = new Toolbarbutton("ELIMINAR");
                                            aButton.setId("MAT"+acceIt.getCodigomap());
                                            //aButton.setImage("/images/eliminar.gif");
                                            aButton.setStyle("font-size:9px");
                                            aButton.addEventListener("onClick", new EventListener() {
                                                public void onEvent(Event event) throws Exception {
                                                            int valor = Messagebox.show("Seguro que deséa eliminar?", "Question", Messagebox.YES | Messagebox.NO, Messagebox.QUESTION);
                                                            if(valor == Messagebox.YES){
                                                                if(verificar("Eliminar")){
                                                                        eliminando(aButton.getId().replace("MAT",""));
                                                                }else{
                                                                            Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                                                                }
                                                            }
                                                }
                                            });
                                            row.appendChild(aButton);



                                    filas.appendChild(row);
                       }
          }else{

          }
            
           
}

 void eliminando(Object clave){
    try{
            try{
                  Integer id = new Integer(clave.toString());
                  adm.eliminarObjeto(MateriaProfesor.class,id);
                  llenarGrid(profes2.selectedItem.value);
            }catch(Exception e){
                //quitarFila(clave);
            }
    }catch(Exception e){

        System.out.println(e);
        Messagebox.show("No se pudo eliminar el Registro...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    }


 }

  public void quitarFila(String codigoBuscar){

                Rows filas = materias.getRows();
                List listadoMaterias = filas.getChildren();
                    for (int i = 0; i <= listadoMaterias.size()-1; i++) {
                       Row object = (Row) listadoMaterias.get(i);
                       MateriaProfesor nuevo = ((MateriaProfesor)object.getValue());
                       String codigoA = "MAT"+nuevo.getMateria().getCodigo();
                       if(codigoA.equals(codigoBuscar)){
                            materias.getRows().removeChild(object);
                            break;
                       }
                    }

}

llenarGrid2(Integer n){

        datos2 = new Grid();
                    for (int i=0 ; i<n; i++) {
                                    Row row = new Row();
                                    row.appendChild(new Label("0"));
                                    Listbox lista = llenarComboMaterias(new Global(-1));
                                    lista.setMold("select");
                                    row.appendChild(lista);
                                    Listbox listaC = llenarComboCursos(new Cursos(-1));
                                    listaC.setMold("select");
                                    row.appendChild(listaC);
                                    Checkbox ch = new Checkbox();
                                        ch.setChecked(true);
                                        row.appendChild(ch);
                                    ch = new Checkbox();
                                        ch.setChecked(true);
                                        row.appendChild(ch);
                                     ch = new Checkbox();
                                        ch.setChecked(true);
                                        row.appendChild(ch);
                                     ch = new Checkbox();
                                        ch.setChecked(true);
                                        row.appendChild(ch);

                                     Intbox tx = new Intbox(0);
                                        row.appendChild(tx);
                                     Textbox formu = new Textbox("");
                                        row.appendChild(formu);

                                         Toolbarbutton aButton = new Toolbarbutton("_");
                                         row.appendChild(aButton);

                                    filas.appendChild(row);
                       }



}

void guardarp(){
   Rows filas001 = datos2.getRows();
                List listadoMaterias = filas001.getChildren();

                   for (int i = 0; i <= listadoMaterias.size()-1; i++) {
                       Row object = (Row) listadoMaterias.get(i);
                             List labels = object.getChildren();
                                //Integer Orden = new Integer(((Textbox)labels.get(0)).value);
                                    MateriaProfesor mateProfe = new MateriaProfesor();
                                  mateProfe.setCodigomap(new Integer(((Label)labels.get(0)).value));

                                  Cursos curSelec = ((Listbox)labels.get(2)).selectedItem.value;
                                  Global matSelec = ((Listbox)labels.get(1)).selectedItem.value;
                                  mateProfe.setEmpleado(profes2.selectedItem.value);
                                  mateProfe.setMateria(matSelec);
                                  mateProfe.setCurso(curSelec);
                                  mateProfe.setCuantitativa(((Checkbox)labels.get(3)).isChecked());
                                  mateProfe.setMinisterio(((Checkbox)labels.get(4)).isChecked());
                                  mateProfe.setOpcional(((Checkbox)labels.get(5)).isChecked()); //ingresan disciplina
                                  mateProfe.setSeimprime(((Checkbox)labels.get(6)).isChecked());
                                  mateProfe.setOrden((((Intbox)labels.get(7)).value));
                                  mateProfe.setFormula((((Textbox)labels.get(8)).value));
                                  if((!mateProfe.getCodigomap().equals(0)) ){
                                        if(!matSelec.getCodigo().equals(-1) && !curSelec.getCodigocur().equals(-1))
                                            adm.actualizar(mateProfe);
                                  }else{

                                    if(!matSelec.getCodigo().equals(-1) && !curSelec.getCodigocur().equals(-1)){
                                            mateProfe.setCodigomap(adm.getNuevaClave("MateriaProfesor","codigomap"));
                                            adm.guardar(mateProfe);
                                        }
                                  }

                   }
                   llenarGrid(profes2.selectedItem.value);
                   
     /*

        if((!mateProfe.getCodigomap().equals(0)) ){
                adm.actualizar(mateProfe);

                  try{
                  if((mates.selectedItem.value).getCodigo().equals((matesAnterior.selectedItem.value).getCodigo())){
                      String quera = "update notas set orden = '"+orden.value+"', seimprime = "+seimprime.checked+",  " +
                      " promedia = "+ promediada.checked +", cuantitativa = "+ cuantitativa.checked +"  "+
                      " where matricula in (SELECT codigomat FROM matriculas WHERE curso =  " + mateProfe.getCurso().getCodigocur() +" ) " +
                      " and materia = "+mateProfe.getMateria().getCodigo()+" ";
                     adm.ejecutaSqlNativo(quera);
                  }else{

                    String quera = "update notas set materia = '"+ mateProfe.getMateria().getCodigo() +"', orden = '"+orden.value+"', seimprime = "+seimprime.checked+",  " +
                          " promedia = "+ promediada.checked +", cuantitativa = "+ cuantitativa.checked +"  "+
                          " where matricula in (SELECT codigomat FROM matriculas WHERE curso =  " + mateProfe.getCurso().getCodigocur() +" ) " +
                          " and materia = "+(matesAnterior.selectedItem.value).getCodigo()+" ";
                        adm.ejecutaSqlNativo(quera);

                  }
                        //System.out.println("ACTUALIZANDO DISTRIBUTIVO NOTAS "+quera);
                  }catch(Exception ae){
                         System.out.println("ERROR EN ACTUALIZAR NOTAS "+ae);
                  }

         }else{
            List existe = adm.query("Select o from MateriaProfesor as o where o.curso.codigocur = '"+((Cursos)curs.selectedItem.value).getCodigocur()+"'  and o.materia.codigo = '"+((Global)mates.selectedItem.value).getCodigo()+"' ");
                if(existe.size()>0){
                    Messagebox.show("MATERIA YA ASIGNADA...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                    return;
                }
             mateProfe.setCodigomap(adm.getNuevaClave("MateriaProfesor","codigomap"));
             adm.guardar(mateProfe);

         }
                Messagebox.show("Registro Almacenado con Éxito...!", "Administrador Educativo", Messagebox.OK, Messagebox.INFORMATION);
                permiso.auditar("Distributivo","Guardar",""+mateProfe.getCurso()+" "+mateProfe.getMateria());
                guardar.disabled=true;
                agregar.disabled=false;
                estado(true,false);
                llenar(new MateriaProfesor(0));
                buscar2(curs.selectedItem.value);
                */


    }

//************************************************ PRO CURSOS
//PARA POR CURSOS***********************************************************************************************************************************************************************************************
Listbox llenarComboEmpleados(Empleados emp){
        Listbox lista = new Listbox();
 

            for (Iterator it = profesores.iterator(); it.hasNext();) {
                       Empleados acceIt = (Empleados) it.next();
                         li = new Listitem();
                         li.setValue(acceIt);
                          li.appendChild(new Listcell(acceIt.getApellidos()+" "+acceIt.getNombres()));
                          if(emp.getCodigoemp().equals(acceIt.getCodigoemp()))
                                li.setSelected(true);
                          lista.appendChild(li);

            }

            lista.setMold("select");
            lista.setStyle("font-size:10px");
        return lista;
}

llenarGrid3(Cursos cur){

        List empleadosEncontrados = adm.query("Select o from MateriaProfesor as o " +
        " where o.curso.codigocur = '"+cur.getCodigocur() +"' and o.curso.periodo.codigoper = '"+periodo.getCodigoper()+"' " +
        " order by o.orden");
        datos2 = new Grid();
                    filas3.getChildren().clear();
            if(empleadosEncontrados.size()>0){

                       for (Iterator it = empleadosEncontrados.iterator(); it.hasNext();) {
                              MateriaProfesor acceIt = (MateriaProfesor) it.next();
                                    Row row = new Row();
                                    row.appendChild(new Label(""+acceIt.getCodigomap()));
                                    Intbox tx = new Intbox(acceIt.getOrden());
                                    row.appendChild(tx);
                                   row.appendChild(llenarComboMaterias(acceIt.getMateria()));
                                    Listbox listaC = llenarComboEmpleados(acceIt.getEmpleado());
                                    listaC.setMold("select");
                                    row.appendChild(listaC);
                                    Checkbox ch = new Checkbox();
                                        ch.setChecked(acceIt.getCuantitativa());
                                        row.appendChild(ch);
                                    ch = new Checkbox();
                                        ch.setChecked(acceIt.getMinisterio());
                                        row.appendChild(ch);

                                     ch = new Checkbox();
                                        ch.setChecked(acceIt.getOpcional());
                                        row.appendChild(ch);

                                     ch = new Checkbox();
                                        ch.setChecked(acceIt.getSeimprime());
                                        row.appendChild(ch);

                                        
                                        Textbox formu = new Textbox(acceIt.getFormula());
                                        row.appendChild(formu);


                                          Toolbarbutton aButton = new Toolbarbutton("ELIMINAR");
                                            aButton.setId("CUR"+acceIt.getCodigomap());
                                            //aButton.setImage("/images/eliminar.gif");
                                            aButton.setStyle("font-size:9px");
                                            aButton.addEventListener("onClick", new EventListener() {
                                                public void onEvent(Event event) throws Exception {
                                                            int valor = Messagebox.show("Seguro que deséa eliminar?", "Question", Messagebox.YES | Messagebox.NO, Messagebox.QUESTION);
                                                            if(valor == Messagebox.YES){
                                                                if(verificar("Eliminar")){
                                                                        eliminando3(aButton.getId().replace("CUR",""));
                                                                }else{
                                                                            Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                                                                }
                                                            }
                                                }
                                            });
                                            row.appendChild(aButton);



                                    filas3.appendChild(row);
                       }
          }else{

          }


}

llenarGridCursos(Periodo periodoSelec){

        List cursosPeriodo = adm.query("Select o from Cursos as o " + 
        " where o.periodo.codigoper = '"+periodoSelec.getCodigoper()+"' order by o.secuencia,  o.paralelo.descripcion ,o.especialidad.descripcion");
            cursosCopiar = new Grid();
            filasCursos.getChildren().clear();
            if(cursosPeriodo.size()>0){

                       for (Iterator it = cursosPeriodo.iterator(); it.hasNext();) {
                              Cursos acceIt = (Cursos) it.next();
                                    Row row = new Row();
                                    
                                    Checkbox ch = new Checkbox();
                                    Listbox listaC = llenarComboCursosPeriodo(acceIt);
                                    ch.setChecked(true);
                                    if(listaC.getSelectedItem() == null){
                                        ch.setChecked(false);
                                    }
                                    row.appendChild(ch);
                                    row.setValue(acceIt);
                                    Label cursoLabel = new Label(""+acceIt);
                                    cursoLabel.setStyle("font-size:10px");
                                    row.appendChild(cursoLabel);
                                    
                                    listaC.setMold("select");
                                    
                                    row.appendChild(listaC);          
                                    if(listaC.getSelectedItem() == null){
                                    Label sinc = new Label("Sin Coincidencia");
                                            sinc.setStyle("color:red; font-weight:bold");
                                            row.appendChild(sinc);
                                            row.setStyle("background:yellow");
                                     }else{
                                        row.appendChild(new Label(""));
                                     }
                                    filasCursos.appendChild(row);
                       }
          }else{

          }


}

Listbox llenarComboCursosPeriodo(Cursos cursollega){
        Listbox lista = new Listbox();
            Cursos curse = new Cursos(-1);
            Listitem li = new Listitem();
            li.setValue(curse);
            li.appendChild(new Listcell("[Seleccione]"));
            //li.setSelected(true);
            lista.appendChild(li);
            for (Iterator it = cursos.iterator(); it.hasNext();) {
                       Cursos acceIt = (Cursos) it.next();
                         li = new Listitem();
                         li.setValue(acceIt);
                         li.appendChild(new Listcell(acceIt.getDescripcion()+" "+acceIt.getEspecialidad()+" "+acceIt.getParalelo()));
                        if(acceIt.getDescripcion().replace("Á","A").replace("É","E").replace("Í","I").replace("Ó","O").replace("Ú","U").contains(cursollega.getDescripcion().substring(0,5).replace("Á","A").replace("É","E").replace("Í","I").replace("Ó","O").replace("Ú","U")) 
                           && acceIt.getEspecialidad().getCodigo().equals(cursollega.getEspecialidad().getCodigo())
                           && acceIt.getParalelo().getCodigo().equals(cursollega.getParalelo().getCodigo())){
                                    li.setSelected(true);
                        }         
                         lista.appendChild(li);
                         

            }
            
            lista.setMold("select");
            lista.setStyle("font-size:10px");
        return lista;
}

 void eliminando3(Object clave){
    try{
            try{
                  Integer id = new Integer(clave.toString());
                  adm.eliminarObjeto(MateriaProfesor.class,id);
                  llenarGrid3(curs3.selectedItem.value);
            }catch(Exception e){
                
            }
    }catch(Exception e){
        System.out.println(e);
        Messagebox.show("No se pudo eliminar el Registro...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    }


 }



llenarGrid23(Integer n){

        datos2 = new Grid();
                    for (int i=0 ; i<n; i++) {
                                    Row row = new Row();
                                    row.appendChild(new Label("0"));
                                         Intbox tx = new Intbox(0);
                                        row.appendChild(tx);
                                    Listbox lista = llenarComboMaterias(new Global(-1));
                                    lista.setMold("select");
                                    row.appendChild(lista);
                                    Listbox listaC = llenarComboEmpleados(new Empleados(-1));
                                    listaC.setMold("select");
                                    row.appendChild(listaC);
                                    Checkbox ch = new Checkbox();
                                        ch.setChecked(true);
                                        row.appendChild(ch);
                                    ch = new Checkbox();
                                        ch.setChecked(true);
                                        row.appendChild(ch);
                                     ch = new Checkbox();
                                        ch.setChecked(true);
                                        row.appendChild(ch);
                                     ch = new Checkbox();
                                        ch.setChecked(true);
                                        row.appendChild(ch);

                                
                                     Textbox formu = new Textbox("");
                                        row.appendChild(formu);
                                    Toolbarbutton aButton = new Toolbarbutton("_");
                                         row.appendChild(aButton);
                                    filas3.appendChild(row);
                       }



}

void guardarCopiaDistributivo(){


    int valor = Messagebox.show("Seguro que deséa continuar con el proceso?, \n Se borrarán los parametros que haya hecho hasta el momento en éste periodo", "Question", Messagebox.YES | Messagebox.NO, Messagebox.QUESTION);
    if(valor != Messagebox.YES){
        return;
    }else{
            int valor2 = Messagebox.show("Se procederá a borrar el distributivo actual de todos los cursos seleccionados, ¿Desea Continuar?", "Question", Messagebox.YES | Messagebox.NO, Messagebox.QUESTION);
                if(valor2 != Messagebox.YES){
                    return;
                }
    }

        Rows filas001 = cursosCopiar.getRows();
                List listadoMaterias = filas001.getChildren();

                   for (int i = 0; i <= listadoMaterias.size()-1; i++) {
                      Row object = (Row) listadoMaterias.get(i);
                      List labels = object.getChildren();
                      Boolean estado = ((Checkbox)labels.get(0)).isChecked();
                      
                            if(estado){
                                    Cursos cur = object.getValue();
                                    String sql = "Select o from MateriaProfesor as o " + 
                                                    " where o.curso.codigocur = '"+cur.getCodigocur()+"' ";
                                                    System.out.println(""+sql);
                                           List distributivoAnterior = adm.query(sql); 
                                                    
                                                Cursos cursoActIterado = ((Listbox)labels.get(2)).selectedItem.value;
                                                adm.ejecutaSql("Delete from MateriaProfesor where curso.codigocur = '"+cursoActIterado.getCodigocur()+"'  ");
                                                        for (Iterator it = distributivoAnterior.iterator(); it.hasNext();) {
                                                                MateriaProfesor matPro = (MateriaProfesor) it.next();
                                                                
                                                                    matPro.setCodigomap(adm.getNuevaClave("MateriaProfesor","codigomap"));       
                                                                    matPro.setCurso(cursoActIterado);
                                                                    adm.guardar(matPro);
                                                        }
                             }
                }
}




void guardarc(){
   Rows filas001 = datos3.getRows();
                List listadoMaterias = filas001.getChildren();

                   for (int i = 0; i <= listadoMaterias.size()-1; i++) {
                       Row object = (Row) listadoMaterias.get(i);
                             List labels = object.getChildren();
                          
                                    MateriaProfesor mateProfe = new MateriaProfesor();
                                  mateProfe.setCodigomap(new Integer(((Label)labels.get(0)).value));

                                  
                                  Global matSelec = ((Listbox)labels.get(2)).selectedItem.value;
                                  Empleados empSelec = ((Listbox)labels.get(3)).selectedItem.value;
                                  
                                  mateProfe.setEmpleado(empSelec);
                                  mateProfe.setMateria(matSelec);
                                  mateProfe.setCurso(curs3.selectedItem.value);
                                  mateProfe.setOrden((((Intbox)labels.get(1)).value));
                                  mateProfe.setCuantitativa(((Checkbox)labels.get(4)).isChecked());
                                  mateProfe.setMinisterio(((Checkbox)labels.get(5)).isChecked());
                                  mateProfe.setOpcional(((Checkbox)labels.get(6)).isChecked()); //ingresan disciplina
                                  mateProfe.setSeimprime(((Checkbox)labels.get(7)).isChecked());
                                  mateProfe.setFormula((((Textbox)labels.get(8)).value));
                                  if((!mateProfe.getCodigomap().equals(0)) ){
                                        if(!matSelec.getCodigo().equals(-1) && !empSelec.getCodigoemp().equals(-1)){
                                            adm.actualizar(mateProfe);
                                             String quera = "update notas set materia = '"+ mateProfe.getMateria().getCodigo() +"', " +
                                                " orden = '"+mateProfe.getOrden()+"', seimprime = "+ mateProfe.getSeimprime() +",  " +
                                                " promedia = "+ mateProfe.getMinisterio()  +", cuantitativa = "+ mateProfe.getCuantitativa() +"  "+
                                                " where matricula in (SELECT codigomat FROM matriculas WHERE curso =  " + mateProfe.getCurso().getCodigocur() +" ) " +
                                                " and materia = "+mateProfe.getMateria().getCodigo()+" ";
                                                adm.ejecutaSqlNativo(quera);
                                        }
                                  }else{

                                    if(!matSelec.getCodigo().equals(-1) && !empSelec.getCodigoemp().equals(-1)){
                                            mateProfe.setCodigomap(adm.getNuevaClave("MateriaProfesor","codigomap"));
                                            adm.guardar(mateProfe);
                                        }
                                  }

                   }
                   llenarGrid3(curs3.selectedItem.value);

     /*

        if((!mateProfe.getCodigomap().equals(0)) ){
                adm.actualizar(mateProfe);

                  try{
                  if((mates.selectedItem.value).getCodigo().equals((matesAnterior.selectedItem.value).getCodigo())){
                      String quera = "update notas set orden = '"+orden.value+"', seimprime = "+seimprime.checked+",  " +
                      " promedia = "+ promediada.checked +", cuantitativa = "+ cuantitativa.checked +"  "+
                      " where matricula in (SELECT codigomat FROM matriculas WHERE curso =  " + mateProfe.getCurso().getCodigocur() +" ) " +
                      " and materia = "+mateProfe.getMateria().getCodigo()+" ";
                     adm.ejecutaSqlNativo(quera);
                  }else{

                    String quera = "update notas set materia = '"+ mateProfe.getMateria().getCodigo() +"', orden = '"+orden.value+"', seimprime = "+seimprime.checked+",  " +
                          " promedia = "+ promediada.checked +", cuantitativa = "+ cuantitativa.checked +"  "+
                          " where matricula in (SELECT codigomat FROM matriculas WHERE curso =  " + mateProfe.getCurso().getCodigocur() +" ) " +
                          " and materia = "+(matesAnterior.selectedItem.value).getCodigo()+" ";
                        adm.ejecutaSqlNativo(quera);

                  }
                        //System.out.println("ACTUALIZANDO DISTRIBUTIVO NOTAS "+quera);
                  }catch(Exception ae){
                         System.out.println("ERROR EN ACTUALIZAR NOTAS "+ae);
                  }

         }else{
            List existe = adm.query("Select o from MateriaProfesor as o where o.curso.codigocur = '"+((Cursos)curs.selectedItem.value).getCodigocur()+"'  and o.materia.codigo = '"+((Global)mates.selectedItem.value).getCodigo()+"' ");
                if(existe.size()>0){
                    Messagebox.show("MATERIA YA ASIGNADA...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                    return;
                }
             mateProfe.setCodigomap(adm.getNuevaClave("MateriaProfesor","codigomap"));
             adm.guardar(mateProfe);

         }
                Messagebox.show("Registro Almacenado con Éxito...!", "Administrador Educativo", Messagebox.OK, Messagebox.INFORMATION);
                permiso.auditar("Distributivo","Guardar",""+mateProfe.getCurso()+" "+mateProfe.getMateria());
                guardar.disabled=true;
                agregar.disabled=false;
                estado(true,false);
                llenar(new MateriaProfesor(0));
                buscar2(curs.selectedItem.value);
                */


    }


    
]]>
    </zscript>
    <tabbox>
        <tabs>
            <tab label="DISTRIBUTIVO POR CURSO" />
            <tab  image="/images/pensum.png" label="POR PROFESOR" />
            <tab  image="/images/cursos.png"  label="POR CURSO LINEAL" />
            <tab  image="/images/pensum.png"  label="COPIAR DISTRIBUTIVO ANTERIOR" />
        
        </tabs>
        <tabpanels>
            <tabpanel>
                <grid width="100%">
                    <rows>
                        <row>
                            <span style="float:right"> Curso(*):
                            </span>
                            <span>
                                <listbox id="curs" mold="select"  width="420px"
                                        onSelect=" buscar2(((Cursos)self.selectedItem.value));">
                                    <listitem    forEach="${cursos}" value="${each}">
                                        <listcell label="${each.descripcion} ${each.especialidad}  ${each.paralelo}" />
                                    </listitem>
                                    <listitem selected="true"   value="-1">
                                        <listcell label="[Seleccione]" />
                                    </listitem>
                                </listbox>
                                <intbox maxlength="14" cols="1"  readonly="true"   disabled="true" id="codigo"  />
                                <button image="/images/add.png" id="copiarDistributivo" label="COPIAR EL DISTRIBUTIVO DE OTRO CURSO "     onClick="panel.visible = true;curs.selectedIndex = -1;desdeCurso.selectedIndex =-1; hastaCurso.selectedIndex = -1;vaciarList();"/>
                            </span>

                        </row>
                        <row>
                            <span style="float:right"> Materias(*):
                            </span>
                            <span>
                                <listbox id="mates"  disabled="true" mold="select" width="320px" >
                                    <listitem selected="true" forEach="${materias}" value="${each}">
                                        <listcell label="${each.descripcion}" />
                                    </listitem>
                                </listbox>
                                <listbox visible ="false" id="matesAnterior"  disabled="true" mold="select" width="320px" >
                                    <listitem selected="true" forEach="${materias}" value="${each}">
                                        <listcell label="${each.descripcion}" />
                                    </listitem>
                                </listbox>
                            </span>


                        </row>
                        <row>
                            <span style="float:right"> Profesores(*):
                            </span>

                            <listbox mold="select"   disabled="true"  id="profes" width="320px">
                                <listitem selected="true"  forEach="${profesores}" value="${each}">
                                    <listcell label="${each.apellidos} ${each.nombres}" />
                                </listitem>
                            </listbox>

                        </row>
                        <row>
                            <span style="float:right">
                            </span>
                            <span>
                                <checkbox label="Cuantitativa"  id="cuantitativa"  disabled="true"    />
                                <checkbox   label="Promediada"  id="promediada"  disabled="true"  />
                                <checkbox  label="Ingresan Disciplina" id="opcional"  disabled="true"   />
                                <checkbox  label="Se Imprime" id="seimprime"  disabled="true"   />
                            </span>
                        </row>


                        <row>
                            <span style="float:right"> Orden(*):
                            </span>
                            <span>
                                <intbox id="orden" cols="2"  readonly="true"  />
                    FÓRMULA:
                                <textbox id="formula" cols="63"  readonly="true"  />
                                <button label="Ver" image="/images/expa.png" onClick=" cerrar.visible = true; ver.visible = false;  materias123(); " id="ver"/>
                                <button  label="Cerrar" visible="false"  image="/images/contra.png"  id="cerrar" onClick="materiaslista.visible = false; cerrar.visible=false; verificar.visible = false; ver.visible = true;"/>
                                <listbox onSelect="anadir(self.selectedItem.value)" visible="false" id="materiaslista" width="45%">
                                    <listhead>
                                        <listheader label="Materia"  sort="auto"/>
                                    </listhead>
                                </listbox>

                        <!--button  label="Verificar" visible="false" id="verificar"/-->
                            </span>
                        </row>
                    </rows>
                </grid>

                <groupbox  width="100%"  mold="3d" >

                    <vbox width="100%">
                        <hbox> <!--button label="Change Paging Mold">
		<attribute name="onClick">
		datos.pagingChild.mold = "os".equals(datos.pagingChild.mold) ? "default" : "os";
		</attribute>
	</button-->
                        </hbox>
                        <hbox width="100%">
                            <listbox mold="paging" rows="17" pageSize="17"  onSelect="move();estado(true,false);eliminar.disabled=false;guardar.disabled=true" id="datos" width="100%">
                                <listhead>
                                    <listheader label="Orden"   sort="auto"/>
                                    <listheader label="Empleado"  sort="auto"/>
                                    <listheader label="Materia"   sort="auto"/>
                                    <listheader label="Cuant."   sort="auto"/>
                                    <listheader label="Prom."   sort="auto"/>
                                    <listheader label="Disc."   sort="auto"/>
                                    <listheader label="Impr."   sort="auto"/>

                                </listhead>
                                <listitem forEach="${allEvents}" value="${each}">

                                </listitem>
                            </listbox>
                        </hbox>
                    </vbox>
                </groupbox>
                <vbox>
                    <hbox>
                        <button image="/images/guardar.gif" id="guardar" label="Guardar"  disabled="true"  onClick="guardar();"/>
                        <button  image="/images/nuevo.gif" id="agregar" label="Agregar" onClick="nuevo();" />
                        <button  image="/images/editar.gif" id="modificar"  label="Modificar" disabled="true"  onClick="modificar()"/>
                        <button  image="/images/eliminar.gif" id="eliminar"  label="Eliminar" disabled="true"  onClick="eliminar();"/>
                    </hbox>
                </vbox>
                <panel id="panel" visible = "false" style="position:absolute; top:2%; left:1%" framable="true" height="400px"	title="COPIAR DISTRIBUTIVO" border="normal"   >

                    <panelchildren>
                        <grid width="100%">
                            <rows>
                                <row>
                                    <span > DESDE EL CURSO(*):
                                    </span>
                                    <span > HASTA EL CURSO(*):
                                    </span>
                                </row>
                                <row>
                                    <span>
                                        <listbox id="desdeCurso" mold="select"  width="420px"
                            onSelect=" buscar2Desde(((Cursos)self.selectedItem.value));">
                                            <listitem    forEach="${cursos}" value="${each}">
                                                <listcell label="${each.descripcion} ${each.especialidad}  ${each.paralelo}" />
                                            </listitem>
                                            <listitem selected="true"   value="-1">
                                                <listcell label="[Seleccione]" />
                                            </listitem>
                                        </listbox>
                                    </span>
                                    <span>
                                        <listbox id="hastaCurso" mold="select"  width="420px"
                            onSelect=" buscar2Hasta(((Cursos)self.selectedItem.value));">
                                            <listitem    forEach="${cursos}" value="${each}">
                                                <listcell label="${each.descripcion} ${each.especialidad}  ${each.paralelo}" />
                                            </listitem>
                                            <listitem selected="true"    value="-1">
                                                <listcell label="[Seleccione]" />
                                            </listitem>
                                        </listbox>
                                    </span>
                                </row>
                                <row>
                                    <listbox  id="desCursos" multiple="true" checkmark="true" rows="60"  mold="paging" height="240px"  width="100%">
                                        <listhead>
                                            <listheader label="Seleccionar Todo"   sort="auto"/>
                                            <listheader label="Materia"  sort="auto"/>
                                        </listhead>
                                        <listitem forEach="${allEvents}" value="${each}">
                                            <listcell label="${each.apellido} ${each.nombre}" />
                                        </listitem>
                                    </listbox>
                                    <listbox  id="hasCursos"  multiple="true" checkmark="true"  rows="60" mold="paging" height="240px"  width="100%">
                                        <listhead>
                                            <listheader label="Seleccionar Todo"   sort="auto"/>
                                            <listheader label="Materia"  sort="auto"/>
                                        </listhead>
                                        <listitem forEach="${allEvents}" value="${each}">

                                            <listcell label="${each.apellido} ${each.nombre}" />

                                        </listitem>
                                    </listbox>


                                </row>
                                <row>
                                    <span style="float:right">
                                        <button image="/images/anadir.png" dir="reverse"  id="anadirCursos" label="Añadir al Curso"  disabled="false"  onClick="anadirCursos();"/>
                                    </span>
                                    <button image="/images/exit.gif" height="35px" label="Salir" width="150px"  onClick="panel.visible=false;"/>
                        <!--button image="/images/quitar.png" id="quitarCursos" label="Quitar del Curso"  disabled="false"  onClick="guardar2();"/-->
                                </row>
                            </rows>
                        </grid>
                    </panelchildren>
                </panel>
            </tabpanel>
            <tabpanel>
                <grid>

                    <rows>
                        <row>
                            <span style="float:right"> Profesores(*):
                            </span>
                            <span>
                                <listbox mold="select"  onSelect="llenarGrid(self.selectedItem.value)"   id="profes2" width="320px">
                                    <listitem selected="true" forEach="${profesores}" value="${each}">
                                        <listcell label="${each.apellidos} ${each.nombres}" />
                                    </listitem>
                                    <listitem selected="true"   value="-1">
                                        <listcell label="[Seleccione]" />
                                    </listitem>
                                </listbox>
                                <button image="/images/guardar.gif" id="guardarp" label="Guardar"    onClick="guardarp();"/>
                            </span>
                        </row>
                        <row spans="2">
                            <grid height="350px"  sclass="MyGridRowHeight"  fixedLayout="true"  id="datos2" >
                                <columns>
                                    <column  width="0px" label="Cod"/>
                                    <column  width="120px" label="Materia"/>
                                    <column  width="150px" label="Curso"/>
                                    <column  width="15px" label="Cuant"/>
                                    <column  width="15px" label="Prom"/>
                                    <column  width="18px" label="Disc."/>
                                    <column  width="15px" label="Impr"/>
                                    <column  width="15px" label="Orden"/>
                                    <column  width="30px" label="Formula"/>
                                    <column  width="30px" label="Opción"/>
                                </columns>
                                <rows id="filas">
                                </rows>
                            </grid>
                        </row>
                        <row spans="2" style="background:yellow">
                            <span>
                                No. de Materias a Agregar
                                <spinner value="3" constraint="no negative,no zero" id="nofilas" />
                                <button label="Agregar más Filas" onClick="llenarGrid2(nofilas.value)"/>
                            </span>
                        </row>
                    </rows>
                </grid>
            </tabpanel>
            <tabpanel>
                <grid>

                    <rows>
                        <row>
                            <span style="float:right"> Curso(*):
                            </span>
                            <span>
                                <listbox  onSelect="llenarGrid3(self.selectedItem.value)"  id="curs3" mold="select"  width="420px">
                                    <listitem    forEach="${cursos}" value="${each}">
                                        <listcell label="${each.descripcion} ${each.especialidad}  ${each.paralelo}" />
                                    </listitem>
                                    <listitem selected="true"   value="-1">
                                        <listcell label="[Seleccione]" />
                                    </listitem>
                                </listbox>
                                <button image="/images/guardar.gif" id="guardarc" label="Guardar"    onClick="guardarc();"/>
                            </span>
                        </row>
                        <row spans="2">
                            <grid height="350px"  sclass="MyGridRowHeight"  fixedLayout="true"  id="datos3" >
                                <columns>
                                    <column  width="1px" label="Cod"/>
                                    <column  width="15px" label="Orden"/>
                                    <column  width="120px" label="Materia"/>
                                    <column  width="120px" label="Empleado"/>
                                    <column  width="15px" label="Cuant"/>
                                    <column  width="15px" label="Prom"/>
                                    <column  width="18px" label="Disc."/>
                                    <column  width="15px" label="Impr"/>
                                    <column  width="30px" label="Formula"/>
                                    <column  width="30px" label="Opción"/>
                                </columns>
                                <rows id="filas3">
                                </rows>
                            </grid>
                        </row>
                        <row spans="2" style="background:yellow">
                            <span>
                                No. de Materias a Agregar
                                <spinner value="3" constraint="no negative,no zero" id="nofilas3" />
                                <button label="Agregar más Filas" onClick="llenarGrid23(nofilas3.value)"/>
                            </span>
                        </row>
                    </rows>
                </grid>
            </tabpanel>
            <tabpanel>
                <grid>

                    <rows>
                        <row>
                            <span style="float:right"> PERIODO ANTERIOR(*):</span>
                            <span>
                        <listbox height="100px" onSelect='llenarGridCursos(self.selectedItem.value);' id="periodoAnterior" width="100%">
                                <listhead>
                                    <listheader label="Cod."/>
                                    <listheader label="Nombres"/>
                                    <listheader label="Estado"/>
                                </listhead>
                                <listitem forEach="${periodoActuales}" value="${each}">
                                    <listcell label="${each.codigoper}" />
                                    <listcell label="${each.descripcion}" />
                                    <listcell label="${each.institucion}" />
                                    <listcell label="${each.institucion.tipo}" />
                                </listitem>
                            </listbox>
                            <button image="/images/guardar.gif" id="guardarDis" label="Guardar"  onClick="guardarCopiaDistributivo()"/>
                            </span>
                            
 
                        </row>
                        <row spans="2">
                            <grid height="350px"  sclass="MyGridRowHeight"  fixedLayout="true"  id="cursosCopiar" >
                                <columns>
                                    <column  width="30px" label="Todos"/>
                                    <column   label="CURSOS DEL PERIODO ANTERIOR"/>
                                    <column   label="CURSOS DEL PRESENTE PERIODO"/>
                                    <column   label="OBS"/>
                                    
                                </columns>
                                <rows id="filasCursos">
                                </rows>
                            </grid>
                        </row>
                         
                    </rows>
                </grid>
            </tabpanel>
        </tabpanels>
    </tabbox>
  
</window>

 