
<window  width="800px" >

    <zscript>
           <![CDATA[
  
        import jcinform.persistencia.Global;
        import bean.EventDAO;
        import java.util.ArrayList;
        import jcinform.persistencia.*;
        import jcinform.persistencia.Periodo;
        import jcinform.procesos.Administrador;
        import bean.Permisos;
        import java.math.BigDecimal;
        import org.zkoss.zul.Group;
        
        Session ses = Sessions.getCurrent();
        Administrador adm = new Administrador();
        Periodo periodo = (Periodo) ses.getAttribute("periodo");
        List allEvents = adm.query("Select o from DobeEstudiantes as o where o.apellidos = 'abc' order by o.codigo ");
        static DobeEstudiantes empa = new DobeEstudiantes();
        Permisos permiso = new Permisos();
 
        Object media = null;

        //FUNCIONES
        void llenar(DobeEstudiantes empa){
            nombre.value = empa.getNombres();
            apellidos.value = empa.getApellidos();

        }
 
        
        void estado(Boolean estado,Boolean modificar){
            if(modificar){
            empa = (DobeEstudiantes)datos.selectedItem.value;
            }else{empa.setCodigo(0);}
            nombre.readonly = estado;
            apellidos.readonly = estado;
            nombre.readonly = estado;             
            lugarnacimiento.readonly = estado;             
            nacionalidad.readonly = estado;             
            raza.readonly = estado;             
            direccion.readonly = estado;             
            direccion1.readonly = estado;             
            direccion2.readonly = estado;             
            telefono.readonly = estado;             
            celular.readonly = estado;             
            curso.readonly = estado;             
            aniolectivo.readonly = estado;             
            proviene.readonly = estado;             
            observacion.readonly = estado;             
            explique.readonly = estado;             
            hermanos.readonly = estado;             
            hombres.readonly = estado;             
            mujeres.readonly = estado;               
            nohabitaciones.readonly = estado;              
            nosshh.readonly = estado;              
            larazon.readonly = estado;              
            larazondeserto.readonly = estado;              
            

      }


        void guardar(){
                if(nombre.value==""){
                    Messagebox.show("Ingrese los campos con (*) para continuar...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                    return;
                }

                Periodo per = (Periodo) ses.getAttribute("periodo");
                empa.setNombres(nombre.value);
                empa.setApellidos(apellidos.value);
       
                    empa.setLugarnacimiento(lugarnacimiento.value);
                    empa.setNacionalidad(nacionalidad.value);

                    empa.setRaza(raza.value);             
                    empa.setDireccion(direccion.value);             
                    empa.setDireccion1(direccion1.value);             
                    empa.setDireccion2(direccion2.value);             
                    empa.setTelefono(telefono.value);             
                    empa.setCelular(celular.value);             
                    empa.setCurso(curso.value);             
                    empa.setAniolectivo(aniolectivo.value);             
                    empa.setProviene(proviene.value);             
                    empa.setObservacion(observacion.value);             
                    empa.setExplique(explique.value);             
                    empa.setHermanos(hermanos.value);             
                    empa.setHombres(hombres.value);             
                    empa.setMujeres(mujeres.value);               
                    empa.setHabitaciones(nohabitaciones.value);              
                    empa.setSshh(nosshh.value);              
                    empa.setObservacionrepitio(larazon.value);              
                    empa.setObservaciondeserto(larazondeserto.value);   
                
                
                if((!empa.getCodigo().equals(0)) ){
                    adm.actualizar(empa);
                    List children = datos.selectedItem.children;
                    ((Listcell)children.get(0)).label = empa.getCodigo()+"";
                    ((Listcell)children.get(1)).label = empa.getNombres()+" ";
                }else{
                    empa.setCodigo(adm.getNuevaClave("DobeEstudiantes","codigo"));
                    adm.guardar(empa);
                }
                //guardo los datos del representante
            List col = datosRepresentante.getRows().getChildren();
                adm.ejecutaSql("Delete from DobeRepresentantes where dobeEstudiante.codigo = '"+empa.getCodigo() +"' ");
                for (int i = 0; i < col.size(); i++) {
                    Row object = (Row) col.get(i);
                      List labels = object.getChildren();
                        DobeRepresentantes rep = new DobeRepresentantes(adm.getNuevaClave("DobeRepresentantes","codigo"));
                           rep.setDobeCurso(((DobeCursos)((Listbox) labels.get(0)).getSelectedItem().getValue()));
                           rep.setNombres(((Textbox) labels.get(1)).getValue());
                           rep.setDobeRelacion(((DobeEstados)((Listbox) labels.get(2)).getSelectedItem().getValue()));
                           rep.setTelefono(((Textbox) labels.get(3)).getValue());
                           rep.setDobeEstudiante(empa);
                           rep.setCodigo(adm.getNuevaClave("DobeRepresentantes","codigo"));
                           adm.guardar(rep);

                }
                 //guardo los datos del estructura 
                 col  = datosEstructura.getRows().getChildren();
                adm.ejecutaSql("Delete from DobeEstructura where dobeEstudiante.codigo = '"+empa.getCodigo() +"' ");
                for (int i = 0; i < col.size(); i++) {
                    Row object = (Row) col.get(i);
                      List labels = object.getChildren();
                        DobeEstructura rep = new DobeEstructura(adm.getNuevaClave("DobeEstructura","codigo"));
                           rep.setNombres(((Textbox) labels.get(0)).getValue());
                           rep.setDobeRelacion(((DobeEstados)((Listbox) labels.get(1)).getSelectedItem().getValue()));
                           rep.setEdad(((Intbox) labels.get(2)).getValue());
                           rep.setDobeCivil(((DobeEstados)((Listbox) labels.get(3)).getSelectedItem().getValue()));
                           rep.setInstruccion(((Textbox) labels.get(4)).getValue());
                           rep.setOcupacion(((Textbox) labels.get(5)).getValue());
                           rep.setLugartrabajo(((Textbox) labels.get(6)).getValue());
                           rep.setDobeEstudiante(empa);
                           rep.setCodigo(adm.getNuevaClave("DobeEstructura","codigo"));
                           adm.guardar(rep);

                }
                
                  //guardo los datos del estructura 1
                 col  = datosEstructura1.getRows().getChildren();
                adm.ejecutaSql("Delete from DobeEstructura1 where dobeEstudiante.codigo = '"+empa.getCodigo() +"' ");
                for (int i = 0; i < col.size(); i++) {
                    Row object = (Row) col.get(i);
                      List labels = object.getChildren();
                        DobeEstructura1 rep = new DobeEstructura1(adm.getNuevaClave("DobeEstructura1","codigo"));
                           rep.setDobeCurso(((DobeCursos)((Listbox) labels.get(0)).getSelectedItem().getValue()));
                           rep.setDobeCivil(((DobeEstados)((Listbox) labels.get(1)).getSelectedItem().getValue()));
                           rep.setDobeRelacion(((DobeEstados)((Listbox) labels.get(2)).getSelectedItem().getValue()));
                           rep.setDobeTipohogar(((DobeEstados)((Listbox) labels.get(3)).getSelectedItem().getValue()));
                           rep.setTrabaja(((Checkbox) labels.get(4)).isChecked());
                           rep.setRemunerado(((Checkbox) labels.get(5)).isChecked());
                           rep.setDobeEstudiante(empa);
                           rep.setCodigo(adm.getNuevaClave("DobeEstructura1","codigo"));
                           adm.guardar(rep);

                }
                adm.ejecutaSql("Delete from DobeTrato where dobeEstudiante.codigo = '"+empa.getCodigo() +"' ");
                DobeTrato trato = new DobeTrato(adm.getNuevaClave("DobeTrato","codigo"));
                trato.setPadre(padretrato.selectedItem.value);
                trato.setMadre(madretrato.selectedItem.value);
                trato.setRepresentante(representantetrato.selectedItem.value);
                trato.setDobeEstudiante(empa);
                adm.guardar(trato);
                   
                   
                //guardo los datos de la economia
                col  = datosEconomica.getRows().getChildren();
                adm.ejecutaSql("Delete from DobeEconomica where dobeEstudiante.codigo = '"+empa.getCodigo() +"' ");
                for (int i = 0; i < col.size(); i++) {
                    Row object = (Row) col.get(i);
                      List labels = object.getChildren();
                        DobeEconomica rep = new DobeEconomica(adm.getNuevaClave("DobeEconomica","codigo"));
                           rep.setDobeCurso(((DobeCursos)((Listbox) labels.get(0)).getSelectedItem().getValue()));
                           rep.setDobeVivienda(((DobeEstados)((Listbox) labels.get(1)).getSelectedItem().getValue()));
                           rep.setDobeTipovivienda(((DobeEstados)((Listbox) labels.get(2)).getSelectedItem().getValue()));
                           rep.setDobeEstructura(((DobeEstados)((Listbox) labels.get(3)).getSelectedItem().getValue()));
                           Span s = (((Span) labels.get(4)));
                           String codigos="";
                                 for(int i = 0; i<s.getChildren().size(); i++){
                                     Checkbox dat = s.getChildren().get(i); 
                                     if(dat.isChecked()){
                                        codigos = dat.getId().replace("CKECO","")+",";
                                     }
                                 }
                                 if(codigos.length()>0){
                                    codigos = codigos.substring(0,codigos.length()-1);
                                 }
                           rep.setDobeServicios(codigos);
                           rep.setDobeEstudiante(empa);
                           rep.setCodigo(adm.getNuevaClave("DobeEconomica","codigo"));
                           adm.guardar(rep);
                }
                //guardo los datos ingresos
                
                col  = datosIngresos.getRows().getChildren();
                adm.ejecutaSql("Delete from DobeIngresos where dobeEstudiante.codigo = '"+empa.getCodigo() +"' and o.observaciones = 'IN' ");
                for (int i = 0; i < col.size(); i++) {
                    Row object = (Row) col.get(i);
                      List labels = object.getChildren();
                        DobeIngresos rep = new DobeIngresos(adm.getNuevaClave("DobeIngresos","codigo"));
                           rep.setIngresos(((DobeEstados)((Listbox) labels.get(0)).getSelectedItem().getValue()));
                           rep.setValori((((Decimalbox) labels.get(1)).getValue()));
                           rep.setObservaciones("IN");
                           rep.setDobeEstudiante(empa);
                           rep.setCodigo(adm.getNuevaClave("DobeIngresos","codigo"));
                           adm.guardar(rep);
                }
                //guardo los datos egresos
                
                col  = datosEgresos.getRows().getChildren();
                adm.ejecutaSql("Delete from DobeIngresos where dobeEstudiante.codigo = '"+empa.getCodigo() +"' and o.observaciones = 'EG' ");
                for (int i = 0; i < col.size(); i++) {
                    Row object = (Row) col.get(i);
                      List labels = object.getChildren();
                        DobeIngresos rep = new DobeIngresos(adm.getNuevaClave("DobeIngresos","codigo"));
                           rep.setIngresos(((DobeEstados)((Listbox) labels.get(0)).getSelectedItem().getValue()));
                           rep.setValori((((Decimalbox) labels.get(1)).getValue()));
                           rep.setObservaciones("EG");
                           rep.setDobeEstudiante(empa);
                           rep.setCodigo(adm.getNuevaClave("DobeIngresos","codigo"));
                           adm.guardar(rep);
                }
                
                //guardo los datos psicopd
                 col  = datosPsicopedagogicos.getRows().getChildren();
                adm.ejecutaSql("Delete from DobePsicopedagogico where dobeEstudiante.codigo = '"+empa.getCodigo() +"' ");
                for (int i = 0; i < col.size(); i++) {
                    Row object = (Row) col.get(i);
                      List labels = object.getChildren();
                        DobePsicopedagogico rep = new DobePsicopedagogico(adm.getNuevaClave("DobePsicopedagogico","codigo"));
                           rep.setDobeCurso(((DobeCursos)((Listbox) labels.get(0)).getSelectedItem().getValue()));
                           rep.setAprovechaimiento(((Decimalbox) labels.get(1)).getValue());
                           rep.setComportamiento(((Decimalbox) labels.get(2)).getValue());
                           rep.setMenores(((Intbox) labels.get(3)).getValue());
                           rep.setMayores(((Intbox) labels.get(4)).getValue());
                           rep.setDobeEstudiante(empa);
                           rep.setCodigo(adm.getNuevaClave("DobePsicopedagogico","codigo"));
                           adm.guardar(rep);

                }
                 //guardo los datos club
                 col  = datosClubes.getRows().getChildren();
                adm.ejecutaSql("Delete from DobeClub where dobeEstudiante.codigo = '"+empa.getCodigo() +"' ");
                for (int i = 0; i < col.size(); i++) {
                    Row object = (Row) col.get(i);
                      List labels = object.getChildren();
                        DobeClub rep = new DobeClub(adm.getNuevaClave("DobeClub","codigo"));
                           rep.setDobeCurso(((DobeCursos)((Listbox) labels.get(0)).getSelectedItem().getValue()));
                           rep.setClub(((Textbox) labels.get(1)).getValue());
                           rep.setOpcional(((Textbox) labels.get(2)).getValue());
                           rep.setCalificacion(((Textbox) labels.get(3)).getValue());
                           rep.setDobeGrado(((DobeEstados)((Listbox) labels.get(4)).getSelectedItem().getValue()));
                           rep.setDobeEstudiante(empa);
                           rep.setCodigo(adm.getNuevaClave("DobeClub","codigo"));
                           adm.guardar(rep);

                }
                
                     //guardo los datos aprendizaje
                 col  = datosAprendizajes.getRows().getChildren();
                adm.ejecutaSql("Delete from DobeAprendizaje where dobeEstudiante.codigo = '"+empa.getCodigo() +"' ");
                for (int i = 0; i < col.size(); i++) {
                    Row object = (Row) col.get(i);
                      List labels = object.getChildren();
                        DobeAprendizaje rep = new DobeAprendizaje(adm.getNuevaClave("DobeAprendizaje","codigo"));
                           rep.setDobeCurso(((DobeCursos)((Listbox) labels.get(0)).getSelectedItem().getValue()));
                           rep.setActivo(((Checkbox) labels.get(1)).isChecked());
                           rep.setReflexivo(((Checkbox) labels.get(2)).isChecked());
                           rep.setTeorico(((Checkbox) labels.get(3)).isChecked());
                           rep.setPragmatico(((Checkbox) labels.get(4)).isChecked());
                           rep.setDobeEstudiante(empa);
                           rep.setCodigo(adm.getNuevaClave("DobeAprendizaje","codigo"));
                           adm.guardar(rep);

                }
                
                
                
            //guardo los datos caracteristicas
                 col  = datosCaracteristica.getRows().getChildren();
                adm.ejecutaSql("Delete from DobeCaracteristicas where dobeEstudiante.codigo = '"+empa.getCodigo() +"' ");
                for (int i = 0; i < col.size(); i++) {
                    Row object = (Row) col.get(i);
                      List labels = object.getChildren();
                        DobeCaracteristicas rep = new DobeCaracteristicas(adm.getNuevaClave("DobeCaracteristicas","codigo"));
                           rep.setDobeEstado(((DobeEstados)((Listbox) labels.get(0)).getSelectedItem().getValue()));
                           rep.setEstado(((Checkbox) labels.get(1)).isChecked());
                           rep.setObservacion(((Textbox) labels.get(2)).getValue());
                           
                           rep.setDobeEstudiante(empa);
                           rep.setCodigo(adm.getNuevaClave("DobeCaracteristicas","codigo"));
                           adm.guardar(rep);

                }
                
                   
                
               //guardo los datos social
                 col  = datosSocial.getRows().getChildren();
                adm.ejecutaSql("Delete from DobeSocial where dobeEstudiante.codigo = '"+empa.getCodigo() +"' ");
                for (int i = 0; i < col.size(); i++) {
                    Row object = (Row) col.get(i);
                      List labels = object.getChildren();
                        DobeSocial rep = new DobeSocial(adm.getNuevaClave("DobeSocial","codigo"));
                           rep.setDobeEstado(((DobeEstados)((Listbox) labels.get(0)).getSelectedItem().getValue()));
                           rep.setEstado(((Checkbox) labels.get(1)).isChecked());
                          
                           rep.setDobeEstudiante(empa);
                           rep.setCodigo(adm.getNuevaClave("DobeSocial","codigo"));
                           adm.guardar(rep);

                }
                
                //guardo los datos transtornos
                 col  = datosTranstornos.getRows().getChildren();
                adm.ejecutaSql("Delete from DobeTranstornos where dobeEstudiante.codigo = '"+empa.getCodigo() +"' and tipo ='T' ");
                for (int i = 0; i < col.size(); i++) {
                        Row object = (Row) col.get(i);
                         List labels = object.getChildren();
                         if(labels.size()>1){
                              
                                //listaCursos = adm.query("Select o from DobeCursos as o order by o.secuencia ");
                                int i =1;
                                for (Iterator it = listaCursos.iterator(); it.hasNext();) {
                                        DobeCursos acceIt = (DobeCursos) it.next();
                                        DobeTranstornos rep = new DobeTranstornos(adm.getNuevaClave("DobeTranstornos","codigo"));
                                        rep.setDobeDetalle(((DobeDetalle) object.getValue()));        
                                        rep.setTipo("T");
                                        rep.setEstado(((Checkbox) labels.get(i)).isChecked());
                                        rep.setDobeCurso(acceIt);
                                        rep.setDobeEstudiante(empa);
                                        rep.setCodigo(adm.getNuevaClave("DobeTranstornos","codigo"));
                                        adm.guardar(rep);
                                        i++;

                                }
                            }
                }
                
                 //guardo los datos necesidades
                 col  = datosNecesidades.getRows().getChildren();
                adm.ejecutaSql("Delete from DobeTranstornos where dobeEstudiante.codigo = '"+empa.getCodigo() +"' and tipo ='N' ");
                for (int i = 0; i < col.size(); i++) {
                        Row object = (Row) col.get(i);
                         List labels = object.getChildren();
                         if(labels.size()>1){
                              
                                //listaCursos = adm.query("Select o from DobeCursos as o order by o.secuencia ");
                                int i =1;
                                for (Iterator it = listaCursos.iterator(); it.hasNext();) {
                                        DobeCursos acceIt = (DobeCursos) it.next();
                                        DobeTranstornos rep = new DobeTranstornos(adm.getNuevaClave("DobeTranstornos","codigo"));
                                        rep.setDobeDetalle(((DobeDetalle) object.getValue()));        
                                        rep.setTipo("N");
                                        rep.setEstado(((Checkbox) labels.get(i)).isChecked());
                                        rep.setDobeCurso(acceIt);
                                        rep.setDobeEstudiante(empa);
                                        rep.setCodigo(adm.getNuevaClave("DobeTranstornos","codigo"));
                                        adm.guardar(rep);
                                        i++;

                                }
                            }
                }
                
                permiso.auditar("DobeEstudiantes","Guardar",""+nombre.value);
                Messagebox.show("Registro Almacenado con Éxito...!", "Administrador Educativo", Messagebox.OK, Messagebox.INFORMATION);
                guardar.disabled=true;
                agregar.disabled=false;
                estado(true,false);
                llenar(new DobeEstudiantes(0));


        }

        Boolean verificar(String accion){
         return permiso.verificarPermiso("Estudiantes_dobe",accion);

        }
        void nuevo(){
            if(verificar("Agregar")){
                guardar.disabled=false;
                llenar(new DobeEstudiantes(0));
                cargarRepresentantes(0);
                cargarEstructura(0);
                cargarEstructura1(0);
                cargarEconomica(0);
                cargarIngresos(0);
                cargarEgresos(0);
                cargarPsicopedagogicas(0);
                cargarClub(0);
                cargarAprendizaje(0);
                cargarCaracteristicas(0);
                cargarSocial(0);
                cargarTranstornos(0);
                cargarNecesidades(0);
                estado(false,false);
                //alert(empa.getCodigo());
            }else{
                Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
            }
        }
        void move(){
            llenar((DobeEstudiantes)datos.selectedItem.value);
            modificar.disabled = false;
        }
        void modificar(){
            if(verificar("Modificar")){
                guardar.disabled=false; estado(false,true);
            }else{
              Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
            }
        }
        void eliminar(){
            if(verificar("Eliminar")){
                try{
                    empa = (DobeEstudiantes)datos.selectedItem.value;
                    adm.eliminarObjeto(DobeEstudiantes.class, empa.getCodigo());
                    datos.removeDobeEstudiantesAt(datos.getSelectedIndex());
                    permiso.auditar("DobeEstudiantes","Eliminar",""+nombre.value);
                    llenar(new DobeEstudiantes(0));
                    Messagebox.show("Registro Eliminado con Éxito...!", "Administrador Educativo", Messagebox.OK, Messagebox.INFORMATION);
                }catch(Exception e){
                 Messagebox.show("No se pudo eliminar el Registro...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                }
            }else{
                Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
            }
        }
 
        void buscar(String p){
            List empleadosEncontrados = adm.query("Select o from DobeEstudiantes as o  order by o.apellidos, o.nombres ");
            datos = new Listbox();
            int a=0;
            for (Iterator it = datos.getItems().iterator(); it.hasNext();) {
                 datos.getItems().remove(a);
            }


            for (Iterator it = empleadosEncontrados.iterator(); it.hasNext();) {
                DobeEstudiantes acceIt = (DobeEstudiantes) it.next();
                Listitem li = new Listitem();
                li.setValue(acceIt);
                li.appendChild(new Listcell(acceIt.getCodigo()+" "));
                li.appendChild(new Listcell(acceIt.getNombres()+" "));
                li.appendChild(new Listcell(acceIt.getApellidos()+" "));
                datos.appendChild(li);
            }

        }
        void cargarEspe(Global g){
         empa.setEspecialidad(g);
        }
        void cargarSec(Global g){
            empa.setSeccion(g);
        }
        void cargarPar(Global g){
         empa.setParalelo(g);
        }
  void cargarRepresentantes(Integer est){
       
    List preguntas = adm.query("Select o from DobeRepresentantes as o where o.dobeEstudiante.codigo = '"+est+"' " + 
     " order by o.codigo " );
       filaRepresentante.getChildren().clear();
       if(preguntas.size()>0){

              for (Iterator it = preguntas.iterator(); it.hasNext();) {
                      Preguntar pregunta = (Preguntar) it.next();
                        Row rw = new Row();
                        rw.appendChild(llenarComboCursos(pregunta.getDobeCurso()));  
                        Textbox txNombres = new Textbox(pregunta.getNombres());
                        rw.appendChild(txNombres);  
                        rw.appendChild(llenarComboEstados(pregunta.getDobeRelacion(),"P"));  
                        Textbox txTelefono = new Textbox(pregunta.getTelefono());
                        rw.appendChild(txTelefono);  
                        filaRepresentante.appendChild(rw);

              }
                     
       }else{
            List dCursos = adm.query("Select o from DobeCursos as o order by o.secuencia ");
                    for (Iterator it = dCursos.iterator(); it.hasNext();) {
                            DobeCursos pregunta = (DobeCursos) it.next();
                                Row rw = new Row();
                                rw.appendChild(llenarComboCursos(pregunta));  
                                Textbox txNombres = new Textbox();
                                rw.appendChild(txNombres);  
                                rw.appendChild(llenarComboEstados(new DobeEstados(-1),"P"));          
                                Textbox txTelefono = new Textbox();
                                rw.appendChild(txTelefono);  
                                filaRepresentante.appendChild(rw);

                    }
       
       
       }

}

  void cargarEstructura(Integer est){
       
    List preguntas = adm.query("Select o from DobeEstructura as o where o.dobeEstudiante.codigo = '"+est+"' " + 
     " order by o.codigo " );
       filaEstructura.getChildren().clear();
       if(preguntas.size()>0){

              for (Iterator it = preguntas.iterator(); it.hasNext();) {
                      Preguntar pregunta = (Preguntar) it.next();
                        Row rw = new Row();
                        
                        Textbox txNombres = new Textbox(pregunta.getNombres());
                        rw.appendChild(txNombres);  
                        
                        rw.appendChild(llenarComboEstados(preguntas.getDobeRelacion(),"P"));
                        
                        Intbox txEdad = new Intbox(pregunta.getEdad());
                        rw.appendChild(txEdad);  
                        
                        rw.appendChild(llenarComboEstados(preguntas.getDobeCivil(),"C"));
                        
                        Textbox txInstruccion = new Textbox(pregunta.getInstruccion());
                        rw.appendChild(txInstruccion);  
                        
                        Textbox txOcupacion = new Textbox(pregunta.getOcupacion());
                        rw.appendChild(txOcupacion);  
                        
                        Textbox txLugartrabajo = new Textbox(pregunta.getLugartrabajo());
                        rw.appendChild(txLugartrabajo);  
                        
                        filaEstructura.appendChild(rw);

              }
                     
       }else{
            for (int i = 0; i<=7;i++) {
                        Row rw = new Row();
                        
                        Textbox txNombres = new Textbox("");
                        rw.appendChild(txNombres);  
                        
                        rw.appendChild(llenarComboEstados(new DobeEstados(-1),"P"));
                        
                        Intbox txEdad = new Intbox(0);
                        rw.appendChild(txEdad);  
                        
                        rw.appendChild(llenarComboEstados(new DobeEstados(-1),"C"));
                        
                        Textbox txInstruccion = new Textbox("");
                        rw.appendChild(txInstruccion);  
                        
                        Textbox txOcupacion = new Textbox("");
                        rw.appendChild(txOcupacion);  
                        
                        Textbox txLugartrabajo = new Textbox("");
                        rw.appendChild(txLugartrabajo);  
                        
                        filaEstructura.appendChild(rw);

              }
       
       
       }

}

 void cargarEstructura1(Integer est){
       
    List preguntas = adm.query("Select o from DobeEstructura1 as o where o.dobeEstudiante.codigo = '"+est+"' " + 
     " order by o.codigo " );
       filaEstructura1.getChildren().clear();
       if(preguntas.size()>0){

              for (Iterator it = preguntas.iterator(); it.hasNext();) {
                      Preguntar pregunta = (Preguntar) it.next();
                        Row rw = new Row();
                        rw.appendChild(llenarComboCursos(pregunta.getDobeCurso()));  
                        rw.appendChild(llenarComboEstados(pregunta.getDobeCivil(),"C"));  
                        rw.appendChild(llenarComboEstados(pregunta.getDobeRelacion(),"P"));  
                        rw.appendChild(llenarComboEstados(pregunta.getDobeTipohogar(),"E"));  
                        Checkbox chTrabaja = new Checkbox();
                        chTrabaja.setChecked(pregunta.getTrabaja());
                        rw.appendChild(chTrabaja);  
                        
                        Checkbox chRemune = new Checkbox();
                        chRemune.setChecked(pregunta.getRemunerado());
                        rw.appendChild(chRemune);  
                        
                       
                        filaEstructura1.appendChild(rw);

              }
                     
       }else{
            List dCursos = adm.query("Select o from DobeCursos as o order by o.secuencia ");
                    for (Iterator it = dCursos.iterator(); it.hasNext();) {
                            DobeCursos pregunta = (DobeCursos) it.next();
                                Row rw = new Row();
                                rw.appendChild(llenarComboCursos(pregunta));  
                                rw.appendChild(llenarComboEstados(new DobeEstados(-1),"C"));  
                                rw.appendChild(llenarComboEstados(new DobeEstados(-1),"P"));  
                                rw.appendChild(llenarComboEstados(new DobeEstados(-1),"E"));  
                                Checkbox chTrabaja = new Checkbox();
                                chTrabaja.setChecked(false);
                                rw.appendChild(chTrabaja);  

                                Checkbox chRemune = new Checkbox();
                                chRemune.setChecked(false);
                                rw.appendChild(chRemune);  


                                filaEstructura1.appendChild(rw);

                    }
       
       
       }

}

 void cargarEconomica(Integer est){
       
    List preguntas = adm.query("Select o from DobeEconomica as o where o.dobeEstudiante.codigo = '"+est+"' " + 
     " order by o.codigo " );
       filaEconomica.getChildren().clear();
       if(preguntas.size()>0){

              for (Iterator it = preguntas.iterator(); it.hasNext();) {
                      Preguntar pregunta = (Preguntar) it.next();
                        Row rw = new Row();
                        rw.appendChild(llenarComboCursos(pregunta.getDobeCurso()));  
                        rw.appendChild(llenarComboEstados(pregunta.getDobeCivil(),"V"));  
                        rw.appendChild(llenarComboEstados(pregunta.getDobeRelacion(),"TV"));  
                        rw.appendChild(llenarComboEstados(pregunta.getDobeTipohogar(),"TE"));  
                        Span s = new Span();
                                 for(int i = 0; i<listaEstados.size(); i++){
                                    if((listaEstados.get(i)).getTipo().equals("S")){
                                        Checkbox chTrabaja = new Checkbox((listaEstados.get(i)).getNombre());
                                        chTrabaja.setId("CKECO"+(listaEstados.get(i)).getCodigo());
                                        chTrabaja.setChecked(false);
                                        s.appendChild(chTrabaja);
                                    }
                                 }
                        
                        rw.appendChild(s);  
                        
                        
                        
                       
                        filaEconomica.appendChild(rw);

              }
                     
       }else{
            List dCursos = adm.query("Select o from DobeCursos as o order by o.secuencia ");
                    for (Iterator it = dCursos.iterator(); it.hasNext();) {
                            DobeCursos pregunta = (DobeCursos) it.next();
                                Row rw = new Row();
                                rw.appendChild(llenarComboCursos(pregunta));  
                                rw.appendChild(llenarComboEstados(new DobeEstados(-1),"V"));  
                                rw.appendChild(llenarComboEstados(new DobeEstados(-1),"TV"));  
                                rw.appendChild(llenarComboEstados(new DobeEstados(-1),"TE"));  
                                Span s = new Span();
                                 for(int i = 0; i<listaEstados.size(); i++){
                                    if((listaEstados.get(i)).getTipo().equals("S")){
                                        Checkbox chTrabaja = new Checkbox((listaEstados.get(i)).getNombre());
                                       // chTrabaja.setId("CK"+(listaEstados.get(i)).getCodigo());
                                        chTrabaja.setChecked(false);
                                        s.appendChild(chTrabaja);
                                    }
                                 
                                     
                                 }
                                 
                        
                                rw.appendChild(s);  


                                filaEconomica.appendChild(rw);

                    }
       
       
       }

}

  void cargarIngresos(Integer est){
       
    List preguntas = adm.query("Select o from DobeIngresos as o where o.dobeEstudiante.codigo = '"+est+"' and o.observaciones = 'IN' " + 
     " order by o.codigo " );
       filaIngresos.getChildren().clear();
       if(preguntas.size()>0){

              for (Iterator it = preguntas.iterator(); it.hasNext();) {
                      Preguntar pregunta = (Preguntar) it.next();
                        Row rw = new Row();
                        rw.appendChild(llenarComboEstados(pregunta.getDobeRelacion(),"IN"));  
                        Decimalbox txNombres = new Decimalbox(pregunta.getValori());
                        rw.appendChild(txNombres);  
                     
                        filaIngresos.appendChild(rw);

              }
                     
       }else{
            List dCursos = adm.query("Select o from DobeEstados as o where o.tipo = 'IN'   ");
                    for (Iterator it = dCursos.iterator(); it.hasNext();) {
                            DobeEstados pregunta = (DobeEstados) it.next();
                                Row rw = new Row();
                                rw.appendChild(llenarComboEstados(pregunta,"IN"));  
                                Decimalbox txNombres = new Decimalbox(BigDecimal.ZERO);
                                rw.appendChild(txNombres);  
                               
                                filaIngresos.appendChild(rw);

                    }
       
       
       }

}
void cargarEgresos(Integer est){
       
    List preguntas = adm.query("Select o from DobeIngresos as o where o.dobeEstudiante.codigo = '"+est+"'  and o.observaciones = 'EG'  " + 
     " order by o.codigo " );
       filaEgresos.getChildren().clear();
       if(preguntas.size()>0){

              for (Iterator it = preguntas.iterator(); it.hasNext();) {
                      Preguntar pregunta = (Preguntar) it.next();
                        Row rw = new Row();
                        rw.appendChild(llenarComboEstados(pregunta.getDobeRelacion(),"EG"));  
                        Decimalbox txNombres = new Decimalbox(pregunta.getValori());
                        rw.appendChild(txNombres);  
                     
                        filaEgresos.appendChild(rw);

              }
                     
       }else{
            List dCursos = adm.query("Select o from DobeEstados as o where o.tipo = 'EG'   ");
                    for (Iterator it = dCursos.iterator(); it.hasNext();) {
                            DobeEstados pregunta = (DobeEstados) it.next();
                                Row rw = new Row();
                                rw.appendChild(llenarComboEstados(pregunta,"EG"));  
                                Decimalbox txNombres = new Decimalbox(BigDecimal.ZERO);
                                rw.appendChild(txNombres);  
                               
                                filaEgresos.appendChild(rw);

                    }
       
       
       }

}

  void cargarPsicopedagogicas(Integer est){
       
    List preguntas = adm.query("Select o from DobePsicopedagogico as o where o.dobeEstudiante.codigo = '"+est+"' " + 
     " order by o.codigo " );

       filaPsicopedagogico.getChildren().clear();
       if(preguntas.size()>0){

              for (Iterator it = preguntas.iterator(); it.hasNext();) {
                      Preguntar pregunta = (Preguntar) it.next();
                        Row rw = new Row();
                        rw.appendChild(llenarComboCursos(pregunta.getDobeCurso()));  
                        Decimalbox txAp = new Decimalbox(pregunta.getAprovechamiento());
                        rw.appendChild(txAp);  
                        Decimalbox txCm = new Decimalbox(pregunta.getComportamiento());
                        rw.appendChild(txCm);  
                        Intbox txMen = new Intbox(pregunta.getMenores());
                        rw.appendChild(txMen);  
                        Intbox txMay = new Intbox(pregunta.getMayores());
                        rw.appendChild(txMay);  
                        
                        filaPsicopedagogico.appendChild(rw);

              }
                     
       }else{
            List dCursos = adm.query("Select o from DobeCursos as o order by o.secuencia ");
                    for (Iterator it = dCursos.iterator(); it.hasNext();) {
                            DobeCursos pregunta = (DobeCursos) it.next();
                                Row rw = new Row();
                                rw.appendChild(llenarComboCursos(pregunta));  
                                Decimalbox txAp = new Decimalbox(BigDecimal.ZERO);
                                rw.appendChild(txAp);  
                                Decimalbox txCm = new Decimalbox(BigDecimal.ZERO);
                                rw.appendChild(txCm);  
                                Intbox txMen = new Intbox(0);
                                rw.appendChild(txMen);  
                                Intbox txMay = new Intbox(0);
                                rw.appendChild(txMay);  
                        
                                filaPsicopedagogico.appendChild(rw);

                    }
       
       
       }

}


  void cargarClub(Integer est){
       
    List preguntas = adm.query("Select o from DobeClub as o where o.dobeEstudiante.codigo = '"+est+"' " + 
     " order by o.codigo " );
       filaClub.getChildren().clear();
       if(preguntas.size()>0){

              for (Iterator it = preguntas.iterator(); it.hasNext();) {
                      DobeClub pregunta = (DobeClub) it.next();
                        Row rw = new Row();
                        rw.appendChild(llenarComboCursos(pregunta.getDobeCurso()));  
                        Textbox txtClub = new Textbox(pregunta.getNombres());
                        rw.appendChild(txtClub); 
                        Textbox txOpcional = new Textbox(pregunta.getNombres());
                        rw.appendChild(txOpcional); 
                        Textbox txCali = new Textbox(pregunta.getNombres());
                        rw.appendChild(txCali); 
                         
                        rw.appendChild(llenarComboEstados(pregunta.getDobeGrado(),"GR"));  
                        filaClub.appendChild(rw);

              }
                     
       }else{
            List dCursos = adm.query("Select o from DobeCursos as o order by o.secuencia ");
                    for (Iterator it = dCursos.iterator(); it.hasNext();) {
                            DobeCursos pregunta = (DobeCursos) it.next();
                                Row rw = new Row();
                                rw.appendChild(llenarComboCursos(pregunta));  
                                    Textbox txtClub = new Textbox("");
                                    rw.appendChild(txtClub); 
                                    Textbox txOpcional = new Textbox("");
                                    rw.appendChild(txOpcional); 
                                    Textbox txCali = new Textbox("");
                                    rw.appendChild(txCali); 

                                    //rw.appendChild(llenarComboEstados(pregunta.getDobeGrado(),"GR"));  
                                    rw.appendChild(llenarComboEstados(new DobeEstados(-1),"GR"));
                                filaClub.appendChild(rw);

                    }
       
       
       }

}
  void cargarAprendizaje(Integer est){
       
    List preguntas = adm.query("Select o from DobeClub as o where o.dobeEstudiante.codigo = '"+est+"' " + 
     " order by o.codigo " );
       filaAprendizaje.getChildren().clear();
       if(preguntas.size()>0){

              for (Iterator it = preguntas.iterator(); it.hasNext();) {
                      DobeClub pregunta = (DobeClub) it.next();
                        Row rw = new Row();
                        rw.appendChild(llenarComboCursos(pregunta.getDobeCurso()));  
                        Checkbox chActivo = new Checkbox();
                        chActivo.setChecked(pregunta.getActivo());
                        rw.appendChild(chActivo);  
                        Checkbox chReflexivo = new Checkbox();
                        chReflexivo.setChecked(pregunta.getReflexivo());
                        rw.appendChild(chReflexivo);  
                        Checkbox chTeorico = new Checkbox();
                        chTeorico.setChecked(pregunta.getTeorico());
                        rw.appendChild(chTeorico);  
                        Checkbox chPrag = new Checkbox();
                        chPrag.setChecked(pregunta.getPragmatico());
                        rw.appendChild(chPrag);  
                          
                        filaAprendizaje.appendChild(rw);

              }
                     
       }else{
            List dCursos = adm.query("Select o from DobeCursos as o order by o.secuencia ");
                    for (Iterator it = dCursos.iterator(); it.hasNext();) {
                            DobeCursos pregunta = (DobeCursos) it.next();
                                Row rw = new Row();
                                rw.appendChild(llenarComboCursos(pregunta));  
                                  Checkbox chActivo = new Checkbox();
                                    chActivo.setChecked(false);
                                    rw.appendChild(chActivo);  
                                    Checkbox chReflexivo = new Checkbox();
                                    chReflexivo.setChecked(false);
                                    rw.appendChild(chReflexivo);  
                                    Checkbox chTeorico = new Checkbox();
                                    chTeorico.setChecked(false);
                                    rw.appendChild(chTeorico);  
                                    Checkbox chPrag = new Checkbox();
                                    chPrag.setChecked(false);
                                    rw.appendChild(chPrag);  

                                    filaAprendizaje.appendChild(rw);

                    }
       
       
       }

}

 void cargarCaracteristicas(Integer est){
       
    List preguntas = adm.query("Select o from DobeCaracteristicas as o where o.dobeEstudiante.codigo = '"+est+"' " + 
     " order by o.codigo " );
       filaCaracteristicas.getChildren().clear();
       if(preguntas.size()>0){

              for (Iterator it = preguntas.iterator(); it.hasNext();) {
                      DobeCaracteristicas pregunta = (DobeCaracteristicas) it.next();
                        Row rw = new Row();
                        rw.appendChild(llenarComboEstados(pregunta.getDobeEstado(),"CR"));  
                         Checkbox chPrag = new Checkbox();
                            chPrag.setChecked(pregunta.getEstado());
                            rw.appendChild(chPrag);  
                        Textbox txNombres = new Textbox(pregunta.getObservacion());
                        rw.appendChild(txNombres); 
                     
                        filaCaracteristicas.appendChild(rw);

              }
                     
       }else{
            List dCursos = adm.query("Select o from DobeEstados as o where o.tipo = 'CR'   ");
                    for (Iterator it = dCursos.iterator(); it.hasNext();) {
                            DobeEstados pregunta = (DobeEstados) it.next();
                                Row rw = new Row();
                                rw.appendChild(llenarComboEstados(pregunta,"CR"));  
                                Checkbox chPrag = new Checkbox();
                            chPrag.setChecked(false);
                            rw.appendChild(chPrag); 
                                Textbox txNombres = new Textbox("");
                                rw.appendChild(txNombres);  
                               
                                filaCaracteristicas.appendChild(rw);

                    }
       
       
       }

}
 void cargarSocial(Integer est){
       
    List preguntas = adm.query("Select o from DobeSocial as o where o.dobeEstudiante.codigo = '"+est+"' " + 
     " order by o.codigo " );
       filaSocial.getChildren().clear();
       if(preguntas.size()>0){

              for (Iterator it = preguntas.iterator(); it.hasNext();) {
                      DobeSocial pregunta = (DobeSocial) it.next();
                        Row rw = new Row();
                        rw.appendChild(llenarComboEstados(pregunta.getDobeEstado(),"SO"));  
                         Checkbox chPrag = new Checkbox();
                            chPrag.setChecked(pregunta.getEstado());
                            rw.appendChild(chPrag);  
                         
                     
                        filaSocial.appendChild(rw);

              }
                     
       }else{
            List dCursos = adm.query("Select o from DobeEstados as o where o.tipo = 'SO'   ");
                    for (Iterator it = dCursos.iterator(); it.hasNext();) {
                            DobeEstados pregunta = (DobeEstados) it.next();
                                Row rw = new Row();
                                rw.appendChild(llenarComboEstados(pregunta,"SO"));  
                                Checkbox chPrag = new Checkbox();
                            chPrag.setChecked(false);
                            rw.appendChild(chPrag); 
                               
                               
                                filaSocial.appendChild(rw);

                    }
       
       
       }

}


 void cargarTranstornos(Integer est){
       
    List preguntas = adm.query("Select o from DobeTranstornos as o where o.dobeEstudiante.codigo = '"+est+"' " + 
     " order by o.codigo " );
       filaTranstornos.getChildren().clear();
       if(preguntas.size()>0){

              for (Iterator it = preguntas.iterator(); it.hasNext();) {
                      DobeSocial pregunta = (DobeSocial) it.next();
                        Row rw = new Row();
                        rw.appendChild(llenarComboEstados(pregunta.getDobeEstado(),"SO"));  
                         Checkbox chPrag = new Checkbox();
                            chPrag.setChecked(pregunta.getEstado());
                            rw.appendChild(chPrag);  
                         
                     
                        filaTranstornos.appendChild(rw);

              }
                     
       }else{
            List dCursos = adm.query("Select o from DobeTipos as o where o.tipo = 'T'   ");
                    for (Iterator it = dCursos.iterator(); it.hasNext();) {
                            DobeTipos pregunta = (DobeTipos) it.next();
                             Group grupo = new Group();
                                 Group grupo = new Group((pregunta).getNombre());
                              grupo.setId(pregunta.getCodigo()+"");
                              grupo.setStyle("background-color:#FFDDAA");
                              //if(buscar(matEst,acceIt))
                              grupo.setParent(filaTranstornos);
                           List dCursos = adm.query("Select o from DobeDetalle as o where o.tipo.codigo = '"+pregunta.getCodigo()+"'   ");
                                for (Iterator it3 = dCursos.iterator(); it3.hasNext();) {
                                       DobeDetalle detalle = (DobeDetalle) it3.next();
                                        Row rw = new Row();
                                        Label chPrag = new Label(""+detalle.getNombre());
                                        rw.setValue(detalle);
                                        rw.appendChild(chPrag); 
                                           List dCursos = adm.query("Select o from DobeCursos as o order by o.secuencia ");
                                                for (Iterator it2 = dCursos.iterator(); it2.hasNext();) {
                                                    DobeCursos cur = (DobeCursos) it2.next();
                                                        Checkbox chCur = new Checkbox();
                                                        chCur.setName("CUR"+cur.getCodigo());
                                                        chCur.setChecked(false);
                                                        rw.appendChild(chCur);  
                                                }
                                        filaTranstornos.appendChild(rw);
                            }
                            

                    }
       
       
       }

}
void cargarNecesidades(Integer est){
       
    List preguntas = adm.query("Select o from DobeTranstornos as o where o.dobeEstudiante.codigo = '"+est+"' " + 
     " order by o.codigo " );
       filaNecesidades.getChildren().clear();
       if(preguntas.size()>0){

              for (Iterator it = preguntas.iterator(); it.hasNext();) {
                      DobeSocial pregunta = (DobeSocial) it.next();
                        Row rw = new Row();
                        rw.appendChild(llenarComboEstados(pregunta.getDobeEstado(),"SO"));  
                         Checkbox chPrag = new Checkbox();
                            chPrag.setChecked(pregunta.getEstado());
                            rw.appendChild(chPrag);  
                         
                     
                        filaNecesidades.appendChild(rw);

              }
                     
       }else{
            List dCursos = adm.query("Select o from DobeTipos as o where o.tipo = 'N'   ");
                    for (Iterator it = dCursos.iterator(); it.hasNext();) {
                            DobeTipos pregunta = (DobeTipos) it.next();
                             Group grupo = new Group();
                                 Group grupo = new Group((pregunta).getNombre());
                              grupo.setId(pregunta.getCodigo()+"");
                              grupo.setStyle("background-color:#FFDDAA");
                              //if(buscar(matEst,acceIt))
                              grupo.setParent(filaNecesidades);
                           List dCursos = adm.query("Select o from DobeDetalle as o where o.tipo.codigo = '"+pregunta.getCodigo()+"'   ");
                                for (Iterator it3 = dCursos.iterator(); it3.hasNext();) {
                                       DobeDetalle detalle = (DobeDetalle) it3.next();
                                        Row rw = new Row();
                                        rw.setValue(detalle);
                                        Label chPrag = new Label(""+detalle.getNombre());
                                        rw.appendChild(chPrag); 
                                           List dCursos = adm.query("Select o from DobeCursos as o order by o.secuencia ");
                                                for (Iterator it2 = dCursos.iterator(); it2.hasNext();) {
                                                    DobeCursos cur = (DobeCursos) it2.next();
                                                        Checkbox chCur = new Checkbox();
                                                                chCur.setChecked(false);
                                                                chCur.setName("CUR"+cur.getCodigo());
                                                                rw.appendChild(chCur);  
                                                }
                                        filaNecesidades.appendChild(rw);
                            }
                            

                    }
       
       
       }

}

List listaCursos = adm.query("Select o from DobeCursos as o order by o.secuencia ");

    Listbox llenarComboCursos(DobeCursos mat){
            Listbox lista = new Listbox();
                for (Iterator it = listaCursos.iterator(); it.hasNext();) {
                        DobeCursos acceIt = (DobeCursos) it.next();
                            Listitem li = new Listitem();
                            li.setValue(acceIt);
                            
                            Listcell celda = new Listcell(acceIt.getNombre());
                            li.appendChild(celda);
                            
                                if(mat.getCodigo().equals(acceIt.getCodigo()))
                                    li.setSelected(true);
                            
                            lista.appendChild(li);
                }
                lista.setMold("select");
                lista.setStyle("font-size:11px");
            return lista;
    }

List listaEstados = adm.query("Select o from DobeEstados as o order by o.nombre ");    
      Listbox llenarComboEstados(DobeEstados mat, String tipo){
            Listbox lista = new Listbox();
                for (Iterator it = listaEstados.iterator(); it.hasNext();) {
                        DobeEstados acceIt = (DobeEstados) it.next();
                            Listitem li = new Listitem();
                            li.setValue(acceIt);
                            Listcell celda = new Listcell(acceIt.getNombre());
                            li.appendChild(celda);
                            if(mat.getCodigo().equals(acceIt.getCodigo())){
                                li.setSelected(true);
                            }
                            if(acceIt.getTipo().equals(tipo)){
                                lista.appendChild(li);
                            }
                }
                try{
                    if(lista.getSelectedIndex() == -1){
                        lista.setSelectedIndex(0);
                    }
                }catch(Exception ar){
                
                }
                lista.setMold("select");
                lista.setStyle("font-size:11px");
            return lista;
    }
 
 Listbox llenarComboIngresos(DobeEstados mat, String tipo){
            Listbox lista = new Listbox();
                for (Iterator it = listaEstados.iterator(); it.hasNext();) {
                        DobeEstados acceIt = (DobeEstados) it.next();
                            Listitem li = new Listitem();
                            li.setValue(acceIt);
                            Listcell celda = new Listcell(acceIt.getNombre());
                            li.appendChild(celda);
                                if(mat.getCodigo().equals(acceIt.getCodigo()))
                                    li.setSelected(true);
                            if(acceIt.getTipo().equals(tipo)){
                                lista.appendChild(li);
                            }
                }
                lista.setMold("select");
                lista.setStyle("font-size:11px");
            return lista;
    }
        
  ]]>
    </zscript>
    <groupbox mold="3d" >
      
        <vbox>
            <vbox>
                <hbox>
                    <button image="/images/guardar.gif" id="guardar" label="Guardar"  disabled="true"  onClick="guardar();"/>
                    <button  image="/images/nuevo.gif" id="agregar" label="Agregar" onClick="nuevo();" />
                    <button  image="/images/editar.gif" id="modificar"  label="Modificar" disabled="true"  onClick="modificar()"/>
                    <button  image="/images/eliminar.gif" id="eliminar"  label="Eliminar" disabled="true"  onClick="eliminar();"/>
                </hbox>
            </vbox>

        </vbox>
        <grid width="100%">
            <rows>
                <row spans="6" style="background:yellow">
                    <span>
                        BÚSQUEDA:
                        <combobox  cols="35" id="combo" onSelect="buscarEstudiante(self.selectedItem.label)" autodrop="true" buttonVisible="false"  use="bean.AutoCompleteDobe"/>
                        _INGRESE UN APELLIDO
                    </span>
                </row>
                <row>
                    <span style="float:right"> Apellidos(*):</span>
                    <textbox id="apellidos"  maxlength="50" cols="20" readonly="true"   />   
                    <span style="float:right"> Nombres(*):</span>
                    <textbox id="nombre"  maxlength="50" cols="20" readonly="true"   />   
                </row>
                <row>
                    <span style="float:right"> Lugar Nac.:</span>
                    <textbox id="lugarnacimiento"  maxlength="50" cols="20" readonly="true"   />   
               
                    <span style="float:right"> Nacionalidad:</span>
                    <textbox id="nacionalidad"  maxlength="50" cols="20" readonly="true"   />   
               
                    <span style="float:right"> Raza:</span>
                    <textbox id="raza"  maxlength="50" cols="20" readonly="true"   />   
                </row>
                <row>
                    <span style="float:right"> Dirección:</span>
                    <textbox id="direccion"  maxlength="50" cols="20" readonly="true"   />   
              
                    <span style="float:right"> Dirección 1 :</span>
                    <textbox id="direccion1"  maxlength="50" cols="20" readonly="true"   />   
               
                    <span style="float:right"> Dirección 2:</span>
                    <textbox id="direccion2"  maxlength="50" cols="20" readonly="true"   />   
                </row>
                <row>
                    <span style="float:right"> Telefono</span>
                    <textbox id="telefono"  maxlength="50" cols="20" readonly="true"   />   
               
                    <span style="float:right"> Celular</span>
                    <textbox id="celular"  maxlength="50" cols="20" readonly="true"   />   
                </row>
                <row>
                    <span style="float:right"> Curso: </span>
                    <textbox id="curso"  maxlength="50" cols="20" readonly="true"   />   
               
                    <span style="float:right"> Año Lectivo</span>
                    <intbox id="aniolectivo"  maxlength="50" cols="20" readonly="true"   />   
                </row>
                
                <row>
                    <span style="float:right"> Proviene</span>
                    <textbox id="proviene"  maxlength="50" cols="20" readonly="true"   />   
                </row>
                <row>
                    <span style="float:right"> Observación</span>
                    <textbox id="observacion"  maxlength="50" cols="20" readonly="true"   />   
                </row>
               
            </rows>
        </grid>
        <grid>
            <rows>
                <row>
                    <label  style="font-weight:bold; color: blue" value="2. DATOS DEL REPRESENTANTE"/>
                </row>
                <row>
                    <grid   id="datosRepresentante">
                        <columns>
                            <column  label="Año"/>
                            <column  label="Apellidos Nombres"/>
                            <column  label="Relación"/>
                            <column  label="Teléfono"/>
                        </columns>
                        <rows id="filaRepresentante">
                        </rows>
                    </grid>
                </row>
            </rows>
        </grid>
        <grid>
            <rows>
                <row>
                    <label  style="font-weight:bold; color: blue" value="3. ESTRUCTURA FAMILIAR"/>
                </row>
                <row>
                    <grid   id="datosEstructura">
                        <columns>
                            <column  label="Apellidos Nombres"/>
                            <column  label="Relación"/>
                            <column  label="Edad"/>
                            <column  label="Estado Civil"/>
                            <column  label="Instrucción"/>
                            <column  label="Ocupación"/>
                            <column  label="Lugar Trabajo"/>
                        </columns>
                        <rows id="filaEstructura">
                        </rows>
                    </grid>
                </row>
            </rows>
        </grid>
        <grid>
            <rows>
                <row>
                    <span >  </span>
                </row>
                <row>
                    <grid   id="datosEstructura1">
                        <columns>
                            <column  label="Año"/>
                            <column  label="Estado Civil Padres"/>
                            <column  label="En su Hogar vive con"/>
                            <column  label="Tipo de Hogar"/>
                            <column  label="Estudiante Trabaja"/>
                            <column  label="Trabajo Remunerado"/>
                        </columns>
                        <rows id="filaEstructura1">
                        </rows>
                    </grid>
                </row>
            </rows>
        </grid>
        <grid>
            <rows>
                <row>
                    Los padres viven juntos: 
                    <checkbox id="vivenjuntos"   />
                    En caso de NO: 
                    <textbox id="explique" cols="50" rows="2" />
                </row>
                <row>
                    <span style="float:right"> # de Hnos.</span>
                    <intbox id="hermanos"  maxlength="50" cols="20" readonly="true"   />   
               
                    <span style=""> Hombres: </span>
                    <span>
                        <intbox id="hombres"  maxlength="2" cols="2" readonly="true"   />   
               
                        <span style=""> Mujeres: </span>
                        <intbox id="mujeres"  maxlength="2" cols="2" readonly="true"   />   
                    </span>
                </row>
                
            </rows>
        </grid>
        <grid>
            <rows>
                <row spans="4">
                    TRATO AFECTIVO
                </row>
                <row>
                    PADRE     
                    <listbox mold="select" id="padretrato">
                        <listitem  selected="true" value="MB" label="Muy Bueno"/>
                        <listitem value="B" label="Bueno"/>
                        <listitem value="R" label="Regular"/>
                        <listitem value="D" label="Deficiente"/>
                    </listbox>               
                </row>
                <row>
                    MADRE                    
                    <listbox  mold="select" id="madretrato">
                        <listitem  selected="true" value="MB" label="Muy Bueno"/>
                        <listitem value="B" label="Bueno"/>
                        <listitem value="R" label="Regular"/>
                        <listitem value="D" label="Deficiente"/>
                    </listbox>               
                </row>
                <row>
                    REPRESENTANTE
                    <listbox  mold="select" id="representantetrato">
                        <listitem selected="true" value="MB" label="Muy Bueno"/>
                        <listitem value="B" label="Bueno"/>
                        <listitem value="R" label="Regular"/>
                        <listitem value="D" label="Deficiente"/>
                    </listbox>               
                </row>
                
            </rows>
        </grid>
        <grid>
            <rows>
                <row>
                    <label  style="font-weight:bold; color: blue" value="4. CONDICIONES ECONÓMICAS  "/>
                </row>
                <row>
                    <grid   id="datosEconomica">
                        <columns>
                            <column  label="AÑO"/>
                            <column  label="VIVIENDA"/>
                            <column  label="TIPO VIVIENDA"/>
                            <column  label="ESTRUCTURA"/>
                            <column  label="SERVICIOS"/>
                        </columns>
                        <rows id="filaEconomica">
                        </rows>
                    </grid>
                </row>
                <row>
                    <span >DISTRIBUCIÓN: No. Habitaciones
                        <intbox id="nohabitaciones"/>  SSHH 
                        <intbox id="nosshh"/>
                    </span>
                </row>
            </rows>
        </grid>
        
        <grid>
            <rows>
                <row>
                    <label  style="font-weight:bold; color: blue" value=" INGRESOS Y EGRESOS"/>
                </row>
                <row>
                    <grid   id="datosIngresos">
                        <columns>
                            <column  label="INGRESOS"/>
                            <column  label="VALOR"/>
                        </columns>
                        <rows id="filaIngresos">
                        </rows>
                    </grid>
                    <grid   id="datosEgresos">
                        <columns>
                            <column  label="EGRESOS"/>
                            <column  label="VALOR"/>
                        </columns>
                        <rows id="filaEgresos">
                        </rows>
                    </grid>
                </row>
               
            </rows>
        </grid>
        <grid>
            <rows>
                <row>
                    <label  style="font-weight:bold; color: blue" value="5. DATOS PSICOPEDAGÓGICOS"/>
                </row>
                <row>
                    <grid   id="datosPsicopedagogicos">
                        <columns>
                            <column  label="AÑO DE EDUCACIÓN"/>
                            <column  label="APROVECHAMIENTO"/>
                            <column  label="COMPORTAMIENTO"/>
                            <column  label="# Materias mayor a 7"/>
                            <column  label="# Materias mayor o igual a 7"/>
                        </columns>
                        <rows id="filaPsicopedagogico">
                        </rows>
                    </grid>
                </row>
                <row> 
                    <span>
                        ¿Repitió algún año? 
                        <radiogroup Id="repitio" >
                            <radio value="true" label="SI"/>
                            <radio value="false" label="NO"/>
                        </radiogroup>
                    </span>
                </row>
                <row>
                    <span>
                        Describa la razón: 
                        <textbox id="larazon"/>
                    </span>
                </row>
                <row>
                    <span>
                        ¿Desertó algún año? 
                        <radiogroup  Id="deserto" >
                            <radio value="true" label="SI"/>
                            <radio value="false" label="NO"/>
                        </radiogroup>
                    </span>
                </row>
                <row>
                    <span>
                        Describa la razón: 
                        <textbox id="larazondeserto"/>
                    </span>
                </row>
            </rows>
        </grid>
        <grid>
            <rows>
                <row>
                    <label  style="font-weight:bold; color: blue" value="6. CLUBES O ACTIVIDADES PERSONALES"/>
                </row>
                <row>
                    <grid   id="datosClubes">
                        <columns>
                            <column  label="Año"/>
                            <column  label="Club"/>
                            <column  label="Opcional"/>
                            <column  label="Calificación"/>
                            <column  label="Grado"/>
                        </columns>
                        <rows id="filaClub">
                        </rows>
                    </grid>
                </row>
            </rows>
        </grid>
        <grid>
            <rows>
                <row>
                    <label  style="font-weight:bold; color: blue" value="7. ESTILOS DE APRENDIZAJE DEL O LA ESTUDIANTE"/>
                </row>
                <row>
                    <grid   id="datosAprendizajes">
                        <columns>
                            <column  label="Año"/>
                            <column  label="Activo"/>
                            <column  label="Reflexivo"/>
                            <column  label="Teórico"/>
                            <column  label="Pragmático"/>
                        </columns>
                        <rows id="filaAprendizaje">
                        </rows>
                    </grid>
                </row>
            </rows>
        </grid>
        <grid>
            <rows>
                <row>
                    <label  style="font-weight:bold; color: blue" value="8. TRANSTORNOS DEL APRENDIZAJE"/>
                </row>
                <row>
                    <grid   id="datosTranstornos">
                        <columns>
                            <column  label="TRANSTORNOS"/>
                            <column  label="8vo."/>
                            <column  label="9no."/>
                            <column  label="10mo."/>
                            <column  label="1ro."/>
                            <column  label="2do."/>
                            <column  label="3ro."/>
                        </columns>
                        <rows id="filaTranstornos">
                        </rows>
                    </grid>
                </row>
            </rows>
        </grid>
        <grid>
            <rows>
                <row>
                    <label  style="font-weight:bold; color: blue" value="9. CARACTERÍSTICAS PERSONALES (madurez y equilibrio emocional)"/>
                </row>
                <row>
                    <grid   id="datosCaracteristica">
                        <columns>
                            <column  label="Características"/>
                            <column  label="Opción"/>
                            <column  label="Observación"/>
                            
                        </columns>
                        <rows id="filaCaracteristicas">
                        </rows>
                    </grid>
                </row>
            </rows>
        </grid>
        <grid>
            <rows>
                <row>
                    <label  style="font-weight:bold; color: blue" value="10. INTERACCIÓN SOCIAL"/>
                </row>
                <row>
                    <grid   id="datosSocial">
                        <columns>
                            <column  label="Características"/>
                            <column  label="Opción"/>
                            <column  label="Observación"/>
                            
                        </columns>
                        <rows id="filaSocial">
                        </rows>
                    </grid>
                </row>
            </rows>
        </grid>
        <grid>
            <rows>
                <row>
                    <label  style="font-weight:bold; color: blue" value="11.	FICHA DE NECESIDADES EDUCATIVAS ESPECIALES"/>
                </row>
                <row>
                    <grid   id="datosNecesidades">
                        <columns>
                            <column  label="DESCRIPCION"/>
                            <column  label="8vo."/>
                            <column  label="9no."/>
                            <column  label="10mo."/>
                            <column  label="1ro."/>
                            <column  label="2do."/>
                            <column  label="3ro."/>
                        </columns>
                        <rows id="filaNecesidades">
                        </rows>
                    </grid>
                </row>
            </rows>
        </grid>
  
     

    </groupbox>
    <groupbox mold="3d" >
        <caption label="Busquedas" />
        <vbox>
            <hbox> DobeEstudiantes:  
                <textbox id="buscarText"  maxlength="60" cols="40" />  
                <button id="buscar"  label="Buscar" onClick="buscar(buscarText.getValue());"/> 
            </hbox>
            <hbox>
                <listbox mold="paging" rows="10" pageSize="10" onSelect="move();estado(true,false);eliminar.disabled=false;guardar.disabled=true" id="datos" width="750px">
                    <listhead>
                        <listheader label="Cod."/>
                        <listheader label="Nombress"/>
                        <listheader visible="false" label="TP"/>
                    </listhead>
                    <listitem  forEach="${allEvents}" value="${each}">
                        <listcell label="${each.codigo}" />
                        <listcell label="${each.nombre}" />
                        <listcell label="${each.apellidos}" />
                    </listitem>
                </listbox>
            </hbox>
        </vbox>
    </groupbox>

</window>
