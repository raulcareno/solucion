
<window  mode="overlapped"  title="Control de Materias de Grado [Seleccione un Curso]" width="640px" border="normal"
    maximizable="true" closable="true" sizable="true">
    <zscript>

<![CDATA[
  import jcinform.persistencia.Global;
  import bean.EventDAO;
  import jcinform.persistencia.*;
  import jcinform.procesos.Administrador;
  import bean.Permisos;
  import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Iterator;

    Administrador adm = new Administrador();
    List allEvents = adm.query("Select o from Estudiantes as o where o.cedula = 0");
    static Materiasgrado matricula = new Materiasgrado();
    Session ses = Sessions.getCurrent();
    Periodo periodo = (Periodo) ses.getAttribute("periodo");
    Permisos permiso = new Permisos();
    List cursos = adm.query("Select o from Cursos as o "+
                    "where o.periodo.codigoper = '"+periodo.getCodigoper()+"' and o.secuencia = 6 "+
                    "order by o.secuencia,o.paralelo.descripcion, o.descripcion");
                    Cursos cr = new Cursos(-1);

cursos.add(0,cr);
    List profesores = adm.query("Select o from Empleados as o ");
    List materias = adm.query("Select o from Global as o where o.grupo = 'MAT' ");
    Object media = null;
     Session ses = Sessions.getCurrent();

//FUNCIONES

void llenar(Materiasgrado estudent){

    codigo.value = estudent.getCodigo();
  
     formula.value = estudent.getFormula();
     if(estudent.getCurso() != null){
                Listitem item = new Listitem();
                item.setValue(estudent.getCurso());
                item.appendChild(new Listcell(estudent.getCurso()+""));
                curs.appendChild(item);
                curs.setSelectedItem(item);
     }

     materia.value = estudent.getNombre();
     abreviatura.value = estudent.getAbreviatura();
     columna.value = estudent.getColumna();
        if(estudent.getProfesor() != null){
                Listitem item = new Listitem();
                item.setValue(estudent.getProfesor());
                item.appendChild(new Listcell(estudent.getProfesor().getApellidos()+" "+estudent.getProfesor().getNombres()));
                profes.appendChild(item);
                profes.setSelectedItem(item);

        }
        
         if(estudent.getProfesor2() != null){
                Listitem item = new Listitem();
                item.setValue(estudent.getProfesor2());
                item.appendChild(new Listcell(estudent.getProfesor2().getApellidos()+" "+estudent.getProfesor2().getNombres()));
                profes.appendChild(item);
                profes.setSelectedItem(item);

        }

  promediada.checked = estudent.getEspromedio();

}
 
void estado(Boolean estado,Boolean modificar){
        if(modificar){
            estudent = (Estudiantes)datos.selectedItem.value;
        }
   codigo.disabled = estado;

    promediada.disabled = estado;

    formula.disabled = estado;

}


public  String disponible(){
   Field[] a = Notasgrado.class.getDeclaredFields();
      ArrayList arregloTodos = new ArrayList();

       for (Field field : a) {
            if(field.getName().contains("nota") && !field.getName().equals("nota")){
                arregloTodos.add(field.getName());
            }
        }
 
        List  notassistemas = adm.query("Select o from Materiasgrado as o "+
        " where  o.curso.codigocur = '"+(curs.selectedItem.value).getCodigocur()+"'  ");
        ArrayList arregloAsignadas = new ArrayList();
        for( Materiasgrado notanotas : notassistemas) {
            arregloAsignadas.add(notanotas.getColumna());
        }

        for (Iterator it2 = arregloAsignadas.iterator(); it2.hasNext();) {
            String aborrar  = it2.next().toString();
            int i = arregloTodos.indexOf(aborrar);
               if(i != -1)
                  arregloTodos.remove(i);
         }
   return arregloTodos.get(0).toString();

}

 void guardar(){
 if(materia.value==""){
    Messagebox.show("Ingrese los campos con (*) para continuar...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    return;
 }
        matricula.setColumna(columna.value);
        matricula.setCodigo(codigo.value);
        matricula.setCurso(curs.selectedItem.value);
        matricula.setNombre(materia.value);
        matricula.setAbreviatura(abreviatura.value);
        matricula.setProfesor(profes.selectedItem.value);
        matricula.setProfesor2(encarg.selectedItem.value);
        matricula.setFormula(formula.value);
        matricula.setEspromedio(promediada.checked);
 

        if((!matricula.getCodigo().equals(0)) ){
                adm.actualizar(matricula);
                  List children = datos.selectedItem.children;
                  ((Listcell)children.get(0)).label = codigo.value+"";
                  ((Listcell)children.get(1)).label = materia.value ;
         }else{
             matricula.setCodigo(adm.getNuevaClave("Materiasgrado","codigo"));
             adm.guardar(matricula);
                  Listitem li = new Listitem();
                  li.setValue(matricula);
                  li.appendChild(new Listcell(matricula.getCodigo()+""));
                  li.appendChild(new Listcell(matricula.getNombre()));
                  datos.appendChild(li);
         }

                Messagebox.show("Registro Almacenado con Éxito...!", "Administrador Educativo", Messagebox.OK, Messagebox.INFORMATION);
                guardar.disabled=true;
                agregar.disabled=false;
                estado(true,false);
                llenar(new Materiasgrado(0));
    }

   Boolean verificar(String accion){
        return permiso.verificarPermiso("Matricular",accion);

    }
 void nuevo(){
    if(verificar("Agregar")){
       guardar.disabled=false; llenar(new Materiasgrado(0));estado(false,false);
        columna.value = disponible();
    }else{
            Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    }
}
 void move(){
        llenar((Materiasgrado)datos.selectedItem.value);
        modificar.disabled = false;
        combo.value="";
  }
void modificar(){
  if(verificar("Modificar")){
       guardar.disabled=false;
        estado(false,false);
    }else{
            Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    }
}
void eliminar(){
  if(verificar("Eliminar")){
        try{
             estudent = (Materiasgrado)datos.selectedItem.value;
             adm.eliminarObjeto(Materiasgrado.class, estudent.getCodigo());
            datos.removeItemAt(datos.getSelectedIndex());
            llenar(new Materiasgrado(0));
            combo.value="";
                Messagebox.show("Registro Eliminado con Éxito...!", "Administrador Educativo", Messagebox.OK, Messagebox.INFORMATION);
        }catch(Exception e){
            Messagebox.show("No se pudo eliminar el Registro...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
        }
}else{
            Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    }
}


void buscar2(Cursos cur){
        List empleadosEncontrados = adm.query("Select o from Materiasgrado as o where o.curso.codigocur = '"+cur.codigocur+"' ");
        datos = new Listbox();
        int a=0;
            for (Iterator it = datos.getItems().iterator(); it.hasNext();) {
                    datos.getItems().remove(a);
                }
               for (Iterator it = empleadosEncontrados.iterator(); it.hasNext();) {
                      Materiasgrado acceIt = (Materiasgrado) it.next();
                      Listitem li = new Listitem();
                      li.setValue(acceIt);
                      li.appendChild(new Listcell(acceIt.getCodigo()+""));
                      li.appendChild(new Listcell(acceIt.getNombre()+""));
  

                      
                       
                      datos.appendChild(li);
             }

    }
   
void materias123(){
Cursos cur = curs.selectedItem.value;
        List empleadosEncontrados = adm.query("Select o from Materiasgrado as o where o.curso.codigocur = '"+cur.codigocur+"' ");
        materiaslista = new Listbox();
        int a=0;
            for (Iterator it = materiaslista.getItems().iterator(); it.hasNext();) {
                    materiaslista.getItems().remove(a);
            }
               for (Iterator it = empleadosEncontrados.iterator(); it.hasNext();) {
                      Materiasgrado acceIt = (Materiasgrado) it.next();
                      Listitem li = new Listitem();
                      li.setValue(""+acceIt.getColumna()+"()");
                      li.appendChild(new Listcell("["+acceIt.getColumna()+"] "+acceIt.getNombre()));
                      materiaslista.appendChild(li);
             }
             materiaslista.visible = true; 
             cerrar.visible=true;
             verificar.visible = true;

    }
    void anadir(String glob){
            formula.value = formula.value +""+ glob+" + ";
    
    }   ]]>
    </zscript>
    <groupbox   mold="3d">
        <caption label="Datos de Matricula" />
        <grid width="100%">
            <rows>
                <row>
                    <span style="float:right"> Curso(*):
                    </span>

                    <listbox id="curs" mold="select"  width="420px"
                                        onSelect=" buscar2(((Cursos)self.selectedItem.value));">
                        <listitem   forEach="${cursos}" value="${each}">
                            <listcell label="${each.descripcion} ${each.especialidad}  ${each.paralelo}" />
                        </listitem>
                    </listbox>

                </row>
                <row>
                    <span style="float:right"> Codigo :
                    </span><span>
                    <intbox maxlength="14" cols="5"  readonly = "true"   disabled="true" id="codigo"  />
                    <textbox id="columna" readonly="true" /> </span>
                </row>
                <row>
                    <span style="float:right"> Materias(*):
                    </span>
                    <span> 
                        <textbox id="materia" width="220px" />
                        Abreviatura(*):
                    
                    <textbox id="abreviatura" width="120px" />
                    </span>
                </row>
                <row>
                    <span style="float:right"> Profesores(*):
                    </span>

                    <listbox mold="select" id="profes" width="320px">
                        <listitem selected="true"  forEach="${profesores}" value="${each}">
                            <listcell label="${each.apellidos} ${each.nombres}" />
                        </listitem>
                    </listbox>
                            
                </row>
                   <row>
                    <span style="float:right"> Encargado(*):
                    </span>

                    <listbox mold="select" id="encarg" width="320px">
                        <listitem selected="true"  forEach="${profesores}" value="${each}">
                            <listcell label="${each.apellidos} ${each.nombres}" />
                        </listitem>
                    </listbox>

                </row>
                <row>
                    <span style="float:right"> Es promedio
                    </span>
                    <span>
                        <checkbox id="promediada"  disabled="true"  />
                    </span>
                </row>

                

                <row>
                    <span style="float:right"> Fórmula:
                    </span>
                    <span>
                        <textbox rows="2" id="formula" cols="35"  disabled="true"  />
                        <button label="Ver" onClick=" materias123(); "/>
                        <listbox onSelect="anadir(self.selectedItem.value)" visible="false" id="materiaslista" width="45%">
                            <listhead>
                                <listheader label="Materia"  sort="auto"/>
                            </listhead>
                        </listbox>
                        <button  label="Cerrar" visible="false" id="cerrar" onClick="materiaslista.visible = false; cerrar.visible=false; verificar.visible = false;"/>
                        <button  label="Verificar" visible="false" id="verificar"/>
                    </span>
                </row>
            </rows>
        </grid>
    </groupbox>
    <groupbox  width="100%"  mold="3d" >
        <caption label="Materias Asignadas" />
        <vbox>
            <hbox>  </hbox>
            <hbox>
                <listbox  mold="paging" rows="10" pageSize="10"  onSelect="move();estado(true,false);eliminar.disabled=false;guardar.disabled=true" id="datos" width="100%">
                    <listhead>
                        <listheader label="Cod."/>

                        <listheader label="Materia"   sort="auto"/>

                    </listhead>
                    <listitem forEach="${allEvents}" value="${each}">
                        <listcell label="${each.codigomap}" />
                        <listcell label="${each.materia}" />
 
                    </listitem>
                </listbox>
            </hbox>
        </vbox>
    </groupbox>
    <vbox>
        <hbox>
            <button image="/images/guardar.gif" id="guardar" label="Guardar"  disabled="true"  onClick="guardar();"/>
            <button  image="/images/nuevo.gif" id="agregar" label="Agregar" onClick="nuevo();" />
            <button  image="/images/editar.gif" id="modificar"  label="Modificar" disabled="true"  onClick="modificar()"/>
            <button  image="/images/eliminar.gif" id="eliminar"  label="Eliminar" disabled="true"  onClick="eliminar();"/>
        </hbox>
    </vbox>
</window>


