<?xml version="1.0" encoding="UTF-8"?>
<window   onCreate="cargando();"   height="100%" 
          border="normal"
>
    <zk xmlns="http://www.zkoss.org/2005/zul">

        <zscript>
<![CDATA[
import sources.CustomDataSource;
import net.sf.jasperreports.engine.JRDataSource;
import sources.*;
import bean.disciplina;
import java.math.BigDecimal;
import bean.reportesClase;
import jcinform.persistencia.*;
import jcinform.procesos.Administrador;
 
import java.util.Date;
import org.joda.time.DateMidnight;
import org.zkoss.zul.Listbox;
import bean.Permisos;
Permisos per = new Permisos();

         
Administrador adm = new Administrador();
Session ses = Sessions.getCurrent();
Periodo periodo = (Periodo) ses.getAttribute("periodo");
disciplina discipli = new disciplina();

Empleados user = (Empleados)ses.getAttribute("user");
    List cursos = null;
    if(user.getTipo().equals("Interna")){
        cursos = adm.query("Select o from Cursos as o where o.periodo.codigoper = '"+periodo.getCodigoper()+"' order by o.secuencia, o.especialidad.descripcion, o.paralelo.descripcion ");
    }else{
        cursos = adm.query("Select distinct o.curso from MateriaProfesor as o where o.empleado.codigoemp = '"+user.getCodigoemp()+"'  and o.curso.periodo.codigoper = '"+periodo.getCodigoper()+"' ");
    }
    List especialidades = adm.query("SELECT o  FROM Global AS o WHERE o.grupo = 'ESP'");
    Global glob = new Global(-1);
    glob.setDescripcion("[Seleccione]");
    especialidades.add(0,glob);

List trimestres = adm.query("Select o from Trimestres as o where  o.periodo = '"+periodo.getCodigoper()+"' order by o.codigotrim  ");
List sistemas = new ArrayList();
 for (Iterator it = trimestres.iterator(); it.hasNext();) {
              Trimestres trime = (Trimestres) it.next();
              List sistemas0 = adm.query("Select o from Sistemacalificacion as o " +
              " where o.trimestre.codigotrim = '"+ trime.getCodigotrim() +"' and  o.periodo.codigoper = '"+periodo.getCodigoper()+"' order by o.orden");

              Sistemacalificacion stodos = new Sistemacalificacion();
              stodos.setNombre("==========>>>>> "+trime.getDescripcion()+"");
              int orden = 0;
              int codigo=0;
              if(sistemas0.size() >0 ){
                  orden = ((Sistemacalificacion) sistemas0.get(sistemas0.size()-1)).getOrden();
                  codigo = ((Sistemacalificacion) sistemas0.get(sistemas0.size()-1)).getCodigosis();

              }
              stodos.setOrden(orden);
              stodos.setCodigosis(codigo);
              stodos.setTrimestre(trime);
              sistemas.add(stodos);
              for (Iterator it2 = sistemas0.iterator(); it2.hasNext();){
                    Sistemacalificacion siste = (Sistemacalificacion) it2.next();
                    sistemas.add(siste);
               }

 }

//List sistemas = adm.query("Select o from Sistemacalificacion as o where o.periodo.codigoper = '"+periodo.getCodigoper()+"' order by o.orden");
Sistemacalificacion stodos0 = new Sistemacalificacion(-1);
stodos0.setNombre("[Seleccione]");
sistemas.add(0,stodos0);

Cursos selec = new Cursos(-1);
selec.setDescripcion("[Seleccione]");
cursos.add(0,selec);
Cursos todos = new Cursos(-2);
todos.setDescripcion("[TODOS]");
  if(user.getTipo().equals("Interna"))
    cursos.add(todos);
//notas noti = new notas();
reportesClase  noti = new reportesClase();

List materias = adm.query("Select o from Global as o where o.grupo = 'zz' ");
void buscar2(Cursos cur){

            if(estudiantesCombo.disabled==false){
                    List empleadosEncontrados = adm.query("Select o from Matriculas as o where o.curso.codigocur = '"+cur.codigocur+"'  order by o.estudiante.apellido");
                    estudiantesCombo.getChildren().clear();
                    Matriculas matri = new Matriculas(-1);
                    Estudiantes es = new Estudiantes(-1);
                    es.setApellido("[Seleccione]");
                    es.setNombre("");
                    matri.setEstudiante(es);
                    empleadosEncontrados.add(0,matri);
                        
                           for (Iterator it = empleadosEncontrados.iterator(); it.hasNext();) {
                                  Matriculas estudent = (Matriculas) it.next();
                                    Listitem item = new Listitem();
                                    item.setValue(estudent);
                                    item.appendChild(new Listcell(estudent.estudiante.apellido+" "+estudent.estudiante.nombre));
                                    estudiantesCombo.appendChild(item);
                         }
                            matri = new Matriculas(-2);
                            matri.setEstudiante(es);
                                    Listitem item = new Listitem();
                                    item.setValue(matri);
                                    item.appendChild(new Listcell("[TODOS]"));
                                    estudiantesCombo.appendChild(item);

                                    estudiantesCombo.setSelectedIndex(0);
            }

if(materiasCombo.disabled==false){
            List materiaEncontrados = adm.query("Select o from MateriaProfesor as o where o.curso.codigocur = '"+cur.codigocur+"'  order by o.curso.paralelo.descripcion");
                     materiasCombo.getChildren().clear();
                     Listitem item = new Listitem();
                                    MateriaProfesor mat = new MateriaProfesor(-1);
                                    Global gl = new Global(-1);
                                    gl.setDescripcion("[Seleccione]");
                                    mat.setMateria(gl);
                                    item.setValue(mat);
                                    item.appendChild(new Listcell("[Seleccione]"));
                                    materiasCombo.appendChild(item);
                        for (Iterator it = materiaEncontrados.iterator(); it.hasNext();) {
                                  MateriaProfesor matep = (MateriaProfesor) it.next();
                                    Listitem item = new Listitem();
                                    item.setValue(matep);
                                    item.appendChild(new Listcell(matep.materia.descripcion));
                                    materiasCombo.appendChild(item);
                         }
materiasCombo.setSelectedIndex(0);
}
        
        
    }
    void buscar22(Global cur){
    
     String tipo = reporte.getSelectedItem().getValue();
           if(tipo.equals("RECE")){
                return;
           }
          String comple = " ";
           if(tipo.equals("AG") || tipo.equals("CAG")){
                comple = " and o.suspenso = false ";
           }else if(tipo.equals("AG2") || tipo.equals("CAG2")){
                comple = " and o.suspenso = true ";
           }
        List empleadosEncontrados = adm.query("Select o from Matriculas as o " + 
                    " where o.curso.especialidad.codigo = '"+cur.getCodigo()+"' "+
                    " "+ comple +" "+
                    " and o.curso.periodo.codigoper = '"+ periodo.getCodigoper()+"' "+
                    " and o.curso.secuencia = 6  order by o.estudiante.apellido");
        
        estudiantesCombo.getChildren().clear();
        
        Matriculas matri = new Matriculas(-1);
        Estudiantes es = new Estudiantes(-1);
                    es.setApellido("[Seleccione]");
                    es.setNombre("");
        matri.setEstudiante(es);
        empleadosEncontrados.add(0,matri);
        
                         for (Iterator it = empleadosEncontrados.iterator(); it.hasNext();) {
                                  Matriculas estudent = (Matriculas) it.next();
                                    Listitem item = new Listitem();
                                    item.setValue(estudent);
                                    item.appendChild(new Listcell(estudent.estudiante.apellido+" "+estudent.estudiante.nombre));
                                    estudiantesCombo.appendChild(item);
                         }
                            matri = new Matriculas(-2);
                            matri.setEstudiante(es);
                                    Listitem item = new Listitem();
                                    item.setValue(matri);
                                    item.appendChild(new Listcell("[TODOS] [- - "+empleadosEncontrados.size()+" - - ]" ));
                                    estudiantesCombo.appendChild(item);
    }

 
      public Double redondear(Double numero, int decimales) {
        try{
                BigDecimal d = new BigDecimal(numero);
        d = d.setScale(decimales, RoundingMode.HALF_UP);
        return d.doubleValue();
        }catch(Exception e){
            return 0.0;
        }
        
        }

public JRDataSource distributivo(){
      Administrador adm = new Administrador();
      Session ses = Sessions.getCurrent();
      Periodo periodo = (Periodo) ses.getAttribute("periodo");
        ArrayList detalle = new ArrayList();
        List hoy = adm.query("SELECT mat FROM MateriaProfesor AS mat " +
                "WHERE mat.curso.periodo.codigoper = '" + periodo.getCodigoper() + "' " +
                "order by mat.curso.secuencia");
        for (Iterator it = hoy.iterator(); it.hasNext();) {
            MateriaProfesor elem = (MateriaProfesor) it.next();
            detalle.add(elem);
        }
      ReporteProfesorDataSource ds = new ReporteProfesorDataSource(detalle);


      return ds;
}

public JRDataSource distributivo2(){
      Administrador adm = new Administrador();
      Session ses = Sessions.getCurrent();
      Periodo periodo = (Periodo) ses.getAttribute("periodo");
      Cursos curso = ((Cursos)curs.selectedItem.value);
        ArrayList detalle = new ArrayList();
        List hoy = adm.query("SELECT mat FROM MateriaProfesor AS mat " +
                "WHERE mat.curso.codigocur = '" + curso.getCodigocur() + "' " +
                "order by mat.orden ");
        for (Iterator it = hoy.iterator(); it.hasNext();) {
            MateriaProfesor elem = (MateriaProfesor) it.next();
            detalle.add(elem);
        }
      ReporteProfesorDataSource ds = new ReporteProfesorDataSource(detalle);


      return ds;
}


public JRDataSource profesores(){
      Administrador adm = new Administrador();
      Session ses = Sessions.getCurrent();
      Periodo periodo = (Periodo) ses.getAttribute("periodo");
        ArrayList detalle = new ArrayList();
        List hoy = adm.query("SELECT mat FROM Empleados AS mat " +
                "  order by mat.apellidos");
        for (Iterator it = hoy.iterator(); it.hasNext();) {
            Empleados elem = (Empleados) it.next();
            detalle.add(elem);
        }
      ProfesoresDataSource ds = new ProfesoresDataSource(detalle);
      return ds;
}

public JRDataSource aprobados(Cursos curso, Sistemacalificacion sistema){
      Administrador adm = new Administrador();
      Session ses = Sessions.getCurrent();
      Periodo periodo = (Periodo) ses.getAttribute("periodo");
        ArrayList detalle = new ArrayList();
       
     String query ="";
        if(curso.getCodigocur().equals(-2)){
            query = "SELECT mat FROM Matriculas AS mat where  " +
                        "   mat.curso.periodo.codigoper = '"+periodo.getCodigoper()+"' and mat.curso.paralelo.descripcion <> '.'   " + 
                        " order by mat.curso.secuencia, mat.curso.especialidad.descripcion, mat.curso.paralelo.descripcion, mat.estudiante.apellido, mat.estudiante.nombre ";
        
        }else{
            query = "SELECT mat FROM Matriculas AS mat where  " +
                "   mat.curso.periodo.codigoper = '"+periodo.getCodigoper()+"' and mat.curso.paralelo.descripcion <> '.'  and mat.curso.codigocur = '"+curso.getCodigocur()+"'  " + 
                " order by mat.curso.secuencia, mat.curso.especialidad.descripcion, mat.curso.paralelo.descripcion, mat.estudiante.apellido, mat.estudiante.nombre ";
        
        }
        
        List hoy = adm.query(query);
        for (Iterator it = hoy.iterator(); it.hasNext();) {
            Matriculas elem = (Matriculas) it.next();
            if(elem.getPerdio()){
               elem.setObservacion("Perdido");
            }else{
                
                 elem.setObservacion("Aprobado");
            }
           detalle.add(elem);
        }
      ReporteActaDataSource ds = new ReporteActaDataSource(detalle);
      return ds;
}

public JRDataSource aprobadosRes(Cursos curso, Sistemacalificacion sistema){
      Administrador adm = new Administrador();
      Session ses = Sessions.getCurrent();
      Periodo periodo = (Periodo) ses.getAttribute("periodo");
        ArrayList detalle = new ArrayList();
        
        String codigosPerdidos ="";
        ArrayList matriculadosPerdidos = new ArrayList();
        
        if(curso.getCodigocur().equals(-2)){
        List cursosList = adm.query("Select o from Cursos as o where o.periodo.codigoper = '"+periodo.getCodigoper()+"' ");
                for (Iterator  itC = cursosList.iterator(); itC.hasNext();) {
                        Cursos curso1 = itC.next();
                        List listaMatriculasPerdidos = noti.cuadroverificar(curso1, sistema);
                        for (Iterator  it = listaMatriculasPerdidos.iterator(); it.hasNext();) {
                            Matriculas matriculas = it.next();
                            matriculadosPerdidos.add(matriculas);
                        }
                }
        }else{
            List listaMatriculasPerdidos = noti.cuadroverificar(curso, sistema);
                for (Iterator  it = listaMatriculasPerdidos.iterator(); it.hasNext();) {
                    Matriculas matriculas = it.next();
                    matriculadosPerdidos.add(matriculas);
                }
        }
        
     String query ="";
        if(curso.getCodigocur().equals(-2)){
            query = "SELECT mat FROM Matriculas AS mat where  " +
                        "   mat.curso.periodo.codigoper = '"+periodo.getCodigoper()+"' and mat.curso.paralelo.descripcion <> '.'   " + 
                        " order by mat.curso.secuencia, mat.curso.especialidad.descripcion, mat.curso.paralelo.descripcion, mat.estudiante.apellido, mat.estudiante.nombre ";
        
        }else{
            query = "SELECT mat FROM Matriculas AS mat where  " +
                "   mat.curso.periodo.codigoper = '"+periodo.getCodigoper()+"' and mat.curso.paralelo.descripcion <> '.'  and mat.curso.codigocur = '"+curso.getCodigocur()+"'  " + 
                " order by mat.curso.secuencia, mat.curso.especialidad.descripcion, mat.curso.paralelo.descripcion, mat.estudiante.apellido, mat.estudiante.nombre ";
        
        }
        
        List hoy = adm.query(query);
        for (Iterator it = hoy.iterator(); it.hasNext();) {
            Matriculas elem = (Matriculas) it.next();
            if(!matriculadosPerdidos.contains(elem)){
                elem.setObservacion("Aprobado");
            }else{
                elem.setObservacion("Perdido");
            }
           //elem.getCurso().getParalelo().setDescripcion("");
            detalle.add(elem);
        }
      ReporteActaDataSource ds = new ReporteActaDataSource(detalle);
      return ds;
}
 
void recalcular(){
   List hoy = adm.query("SELECT o FROM MateriaProfesor AS  o " +
                " where o.curso.codigocur = '"+(curs.selectedItem.value).getCodigocur()+"'  order by o.orden ");
                        System.out.println("FIREC:"+new Date());
                        bean.notas n = new bean.notas();
        for (Iterator it = hoy.iterator(); it.hasNext();) {
            MateriaProfesor materia = (MateriaProfesor) it.next();
            n.recalculoNotas(materia, curs.selectedItem.value);
        }
                System.out.println("FFREC:"+new Date());
 
 
}
 void showReport() {
    
 String tipo = reporte.getSelectedItem().getValue();
           if(tipo.equals("linea")){
                return;
           }
    ver.visible = false;
        reportese.visible = true;
     cerrar.setVisible(true);
           //rep.setOpen(true);parametros.setOpen(false);
            Institucion insts = periodo.getInstitucion();
             
            Map parametros = new HashMap();
            parametros.put("denominacion", insts.getDenominacion());
            parametros.put("nombre", insts.getNombre());
            parametros.put("periodo", periodo.getDescripcion());
            parametros.put("direccion", insts.getDireccion());
            parametros.put("telefono",insts.getTelefono());
            parametros.put("titulo", titulo.value);
            parametros.put("slogan", insts.getSlogan());
            parametros.put("secretaria", insts.getSecretaria());
            parametros.put("rectora", insts.getRector());
            parametros.put("jornada", periodo.getSeccion().getDescripcion() );
            parametros.put("regimen", periodo.getRegimen());
            parametros.put("minima",(peligro.value).doubleValue());
            parametros.put("curso", curs.selectedItem.value+"");
                           
 List equivalencias = adm.query("Select o from Equivalencias as o "
                + "where o.grupo = 'AP' and o.periodo.codigoper = '" + periodo.getCodigoper() + "' order by o.valorminimo desc ");
                int m = 1;
        for (Iterator it = equivalencias.iterator(); it.hasNext();) {
            Equivalencias equivalencias1 = (Equivalencias)it.next();
            parametros.put("eq"+m,""+equivalencias1.getNombre()+"");
            parametros.put("ran"+m,equivalencias1.getValorminimo());
            parametros.put("ranf"+m,equivalencias1.getValormaximo());
            
            m++;
        }
               
        List parametrosGlobales = adm.query("Select o from ParametrosGlobales as o "
                + "where o.periodo.codigoper = '" + periodo.getCodigoper() + "' and o.variable = 'DISCIPLINAIMPR' ");
                if(parametrosGlobales.size()>0){
                    parametros.put("faltas",((parametrosGlobales).get(0)).getBvalor());
                }else{
                    parametros.put("faltas",false);
                }
                     
 String directorioReportes = insts.getReportes();
            if(sistemasCombo.disabled == false)
                parametros.put("perseleccionado", sistemasCombo.getSelectedItem().getValue().getTrimestre().getDescripcion()+ " - "+sistemasCombo.getSelectedItem().getValue().getNombre()+"");
            if(filamodalidad.visible == true)
            parametros.put("modalidad",modalidad.value);
            
            JRDataSource datasource = null;

            if(tipo.equals("DIS")){
                    datasource = distributivo();
                    report.setSrc(directorioReportes+"distributivo.jasper");
            }else if(tipo.equals("ENC2")){
                    datasource = noti.evaluacion(curs.selectedItem.value, estudiantesCombo.selectedItem.value);
                    report.setSrc(directorioReportes+"evaluacionPrincipal.jasper");
            }else if(tipo.equals("ENC3")){
                    datasource = noti.resumen(curs.selectedItem.value);
                    report.setSrc(directorioReportes+"resumenEncuesta.jasper");
            }else if(tipo.equals("ENC4")){
                    datasource = noti.resumen(curs.selectedItem.value);
                    report.setSrc(directorioReportes+"resumenEncuestaGraficas.jasper");
            }else if(tipo.equals("ENC5")){
                    datasource = noti.resumenGrupal();
                    report.setSrc(directorioReportes+"resumenEncuesta.jasper");
            }else if(tipo.equals("ENC6")){
                    datasource = noti.resumenGrupal();
                    report.setSrc(directorioReportes+"resumenEncuestaGraficas.jasper");
            }else if(tipo.equals("DIS2")){
                    datasource = distributivo2();
                    report.setSrc(directorioReportes+"firmascuadrocalificaciones.jasper");
            }else if(tipo.equals("PROF")){
                    datasource = profesores();
                    report.setSrc(directorioReportes+"profesores.jasper");
            }else if(tipo.equals("PROFC")){
                    datasource = profesores();
                    report.setSrc(directorioReportes+"profesoresCompleto.jasper");
            }else if(tipo.equals("CERT")){
                    datasource = noti.promocion(curs.getSelectedItem().getValue(),estudiantesCombo.getSelectedItem().getValue());
                    report.setSrc(directorioReportes+"promocion.jasper");
            }else if(tipo.equals("CERT2")){
                    datasource = noti.promocion2(curs.getSelectedItem().getValue(),estudiantesCombo.getSelectedItem().getValue());
                    report.setSrc(directorioReportes+"promocion2.jasper");
            }else if(tipo.equals("CERD")){
                    datasource = noti.certificadodisciplina(curs.getSelectedItem().getValue(),estudiantesCombo.getSelectedItem().getValue());
                    report.setSrc(directorioReportes+"certificadoconducta.jasper");
            }else if(tipo.equals("PCUR")){
                    datasource = noti.promediocurso(sistemasCombo.getSelectedItem().getValue());
                    report.setSrc(directorioReportes+"promedioporcurso.jasper");
            }else if(tipo.equals("MEJ")){
                    datasource = noti.mejoresporcurso(sistemasCombo.getSelectedItem().getValue());
                    report.setSrc(directorioReportes+"mejoresporcurso.jasper");
            }else if(tipo.equals("PROC")){
                    reportesClase noti = new reportesClase();
                    datasource = noti.promediosxcursoymateria(sistemasCombo.getSelectedItem().getValue(),curs.getSelectedItem().getValue());
                    parametros.put("titulo", titulo.getValue());
                    report.setSrc(directorioReportes+"promediosxcursoymateria.jasper");
            }else if(tipo.equals("RECC")){
                    datasource = noti.recordporcurso(curs.getSelectedItem().getValue());
                    report.setSrc(directorioReportes+"record.jasper");
            }else if(tipo.equals("RECC1")){
                    datasource = noti.recordporcurso1(new Integer(secuencia.selectedItem.value));
                    report.setSrc(directorioReportes+"record.jasper");
            }else if(tipo.equals("RECE")){
                    datasource = noti.recordporespecialidad(especialidad.getSelectedItem().getValue(),new Integer(secuencia.selectedItem.value));
                    report.setSrc(directorioReportes+"record.jasper");
            }else if(tipo.equals("NMAT")){
                    
                    ArrayList arreglo = noti.notasd(curs.getSelectedItem().getValue(),((MateriaProfesor)materiasCombo.getSelectedItem().getValue()).getMateria(),sistemasCombo.getSelectedItem().getValue());
                    datasource = (ReporteNotasDataSource) arreglo.get(0);
                     parametros = (HashMap) arreglo.get(1);
                     //parametros.put("perseleccionado",((Sistemacalificacion)sistemasCombo.getSelectedItem().getValue()).getNombre());
                     parametros.put("perseleccionado", sistemasCombo.getSelectedItem().getValue().getTrimestre().getDescripcion()+ " - "+sistemasCombo.getSelectedItem().getValue().getNombre()+"");
                    MateriaProfesor mate = ((MateriaProfesor)materiasCombo.getSelectedItem().getValue());
                    parametros.put("materia", mate.getMateria().getDescripcion());
                     parametros.put("profesor", mate.getEmpleado().getNombres()+" "+ mate.getEmpleado().getApellidos());
                    report.setSrc(directorioReportes+"notaspor.jasper");
                    parametros.put("titulo", titulo.value);
            }else if(tipo.equals("NMATD")){

                    ArrayList arreglo = noti.notasdisciplina(curs.getSelectedItem().getValue(),((MateriaProfesor)materiasCombo.getSelectedItem().getValue()).getMateria(),sistemasCombo.getSelectedItem().getValue());
                    datasource = (ReporteNotasDataSource) arreglo.get(0);
                    MateriaProfesor mate = ((MateriaProfesor)materiasCombo.getSelectedItem().getValue());
                    parametros.put("materia", mate.getMateria().getDescripcion());
                    parametros.put("profesor", mate.getEmpleado().getNombres()+" "+ mate.getEmpleado().getApellidos());
                    report.setSrc(directorioReportes+"notaspor.jasper");
            }else if(tipo.equals("EXAM")){
                    datasource = noti.cuadroexamenes(curs.getSelectedItem().getValue());
                    report.setSrc(directorioReportes+"examenesgrado.jasper");
            }else if(tipo.equals("CDIS")){
                    ArrayList arreglo = discipli.reporteDisciplina(curs.getSelectedItem().getValue(),sistemasCombo.getSelectedItem().getValue());
                    parametros = (HashMap) arreglo.get(1);
                    //parametros.put("perseleccionado",((Sistemacalificacion)sistemasCombo.getSelectedItem().getValue()).getNombre());
                    parametros.put("perseleccionado", sistemasCombo.getSelectedItem().getValue().getTrimestre().getDescripcion()+ " - "+sistemasCombo.getSelectedItem().getValue().getNombre()+"");
                    datasource = (DisciplinaDataSource) arreglo.get(0);
                    report.setSrc(directorioReportes+"disciplina.jasper");
                    parametros.put("titulo",titulo.value);
            }else if(tipo.equals("CCAL2")){
                    //parametros.put("perseleccionado",((Sistemacalificacion)sistemasCombo.getSelectedItem().getValue()).getNombre());
                    parametros.put("perseleccionado", sistemasCombo.getSelectedItem().getValue().getTrimestre().getDescripcion()+ " - "+sistemasCombo.getSelectedItem().getValue().getNombre()+"");
                    datasource = noti.cuadrocalificaciones(curs.getSelectedItem().getValue(),sistemasCombo.getSelectedItem().getValue(),desde.doubleValue(),hasta.doubleValue(),incluirfaltas.checked,incluirpromedio.checked);
                    report.setSrc(directorioReportes+"cuadrocalificaciones2.jasper");
                           
            }else if(tipo.equals("CCAL3")){
                    //parametros.put("perseleccionado",((Sistemacalificacion)sistemasCombo.getSelectedItem().getValue()).getNombre());
                    parametros.put("perseleccionado", sistemasCombo.getSelectedItem().getValue().getTrimestre().getDescripcion()+ " - "+sistemasCombo.getSelectedItem().getValue().getNombre()+"");
                    datasource = noti.cuadrocalificaciones(curs.getSelectedItem().getValue(),sistemasCombo.getSelectedItem().getValue(),desde.doubleValue(),hasta.doubleValue(),incluirfaltas.checked,incluirpromedio.checked);
                    report.setSrc(directorioReportes+"cuadrocalificaciones3.jasper");
            }else if(tipo.equals("CCAL")){
                    //parametros.put("perseleccionado",((Sistemacalificacion)sistemasCombo.getSelectedItem().getValue()).getNombre());
                    parametros.put("perseleccionado", sistemasCombo.getSelectedItem().getValue().getTrimestre().getDescripcion()+ " - "+sistemasCombo.getSelectedItem().getValue().getNombre()+"");
                    datasource = noti.cuadrocalificaciones(curs.getSelectedItem().getValue(),sistemasCombo.getSelectedItem().getValue(),desde.doubleValue(),hasta.doubleValue(),incluirfaltas.checked,incluirpromedio.checked);
                    report.setSrc(directorioReportes+"cuadrocalificaciones.jasper");

            }else if(tipo.equals("ESTA")){
                    parametros.put("perseleccionado", sistemasCombo.getSelectedItem().getValue().getTrimestre().getDescripcion()+ " - "+sistemasCombo.getSelectedItem().getValue().getNombre()+"");
                    datasource = noti.cuadrocalificacionesestadistico(curs.getSelectedItem().getValue(),sistemasCombo.getSelectedItem().getValue());
                    report.setSrc(directorioReportes+"estadisticoxmaterias.jasper");

            }else if(tipo.equals("ESTAD")){
                    parametros.put("perseleccionado", sistemasCombo.getSelectedItem().getValue().getTrimestre().getDescripcion()+ " - "+sistemasCombo.getSelectedItem().getValue().getNombre()+"");
                    parametros.put("desde",desde.doubleValue());
                    parametros.put("hasta",hasta.doubleValue());
                    datasource = noti.cuadrocalificacionesestadisticodistributivo(sistemasCombo.getSelectedItem().getValue(),desde.doubleValue(),hasta.doubleValue());
                    report.setSrc(directorioReportes+"estadisticoxdistributivo.jasper");

            }else if(tipo.equals("RESUL")){
                    datasource = noti.cuadrocalificacionesestadisticodistributivo(sistemasCombo.getSelectedItem().getValue(),new ArrayList(),rangos.getRows().getChildren());
                    report.setSrc(directorioReportes+"resultados.jasper");

            }else if(tipo.equals("CSUP")){
                    //parametros.put("perseleccionado",((Sistemacalificacion)sistemasCombo.getSelectedItem().getValue()).getNombre());
                    parametros.put("perseleccionado", sistemasCombo.getSelectedItem().getValue().getTrimestre().getDescripcion()+ " - "+sistemasCombo.getSelectedItem().getValue().getNombre()+"");
                    datasource = noti.cuadrofinalsupletorio(curs.getSelectedItem().getValue(),sistemasCombo.getSelectedItem().getValue(),desde.doubleValue(),hasta.doubleValue());
                    report.setSrc(directorioReportes+"cuadrofinalsupletorio.jasper");
                           
            }else if(tipo.equals("CNF")){
                    
                    datasource = noti.cuadrofinal(curs.getSelectedItem().getValue(),sistemasCombo.getSelectedItem().getValue(),desde.doubleValue(),hasta.doubleValue());
                    report.setSrc(directorioReportes+"cuadrofinal.jasper");
            }else if(tipo.equals("CNF2")){
                    datasource = noti.cuadrofinal(curs.getSelectedItem().getValue(),sistemasCombo.getSelectedItem().getValue(),desde.doubleValue(),hasta.doubleValue());
                    report.setSrc(directorioReportes+"cuadrofinal1.jasper");
            }else if(tipo.equals("CNF3")){
                    datasource = noti.cuadrofinal3(curs.getSelectedItem().getValue(),sistemasCombo.getSelectedItem().getValue(),desde.doubleValue(),hasta.doubleValue());
                    report.setSrc(directorioReportes+"cuadrofinal2.jasper");
            }else if(tipo.equals("CNF4")){
                 //   datasource = noti.cuadrofinal(curs.getSelectedItem().getValue(),sistemasCombo.getSelectedItem().getValue(),desde.doubleValue(),hasta.doubleValue());
                 //   report.setSrc(directorioReportes+"cuadrofinal1.jasper");
            }else if(tipo.equals("EST")){
                    datasource = noti.cuadrofinal(curs.getSelectedItem().getValue(),sistemasCombo.getSelectedItem().getValue(),desde.doubleValue(),hasta.doubleValue());
                    report.setSrc(directorioReportes+"estadistico.jasper");
            }else if(tipo.equals("AG")){
                    datasource = noti.actaGrado("original",estudiantesCombo.getSelectedItem().getValue(),especialidad.getSelectedItem().getValue(),false);
                    report.setSrc(directorioReportes+"actaGrado.jasper");
            }else if(tipo.equals("CAG")){
                    datasource = noti.actaGrado("copia",estudiantesCombo.getSelectedItem().getValue(),especialidad.getSelectedItem().getValue(),false);
                    report.setSrc(directorioReportes+"copiaactaGrado.jasper");
            }else if(tipo.equals("AG2")){
                    datasource = noti.actaGrado("original",estudiantesCombo.getSelectedItem().getValue(),especialidad.getSelectedItem().getValue(),true);
                    report.setSrc(directorioReportes+"actaGrado.jasper");
            }else if(tipo.equals("CAG2")){
                    datasource = noti.actaGrado("copia",estudiantesCombo.getSelectedItem().getValue(),especialidad.getSelectedItem().getValue(),true);
                    report.setSrc(directorioReportes+"copiaactaGrado.jasper");
            }else if(tipo.equals("LAG")){
                    ArrayList arreglo = noti.actaGradoTodos(curs.getSelectedItem().getValue());
                    datasource = (ActaGeneralDataSource) arreglo.get(0);
                    parametros = (HashMap) arreglo.get(1);
                    report.setSrc(directorioReportes+"actaslistado.jasper");
            }else if(tipo.equals("LIB")){
                   //alert(Executions.getCurrent().getDesktop().getWebApp().getRealPath("/libreta_sub.jasper"));

                    datasource = noti.libretas(curs.getSelectedItem().getValue(),estudiantesCombo.getSelectedItem().getValue(),sistemasCombo.getSelectedItem().getValue());
                    report.setSrc(directorioReportes+"libreta.jasper");
                    parametros.put("pathSubRel",directorioReportes );//libreta_sub.jasper
                    parametros.put("pathSubRel2",directorioReportes);//libreta_subFaltas.jasper
                   
            }else if(tipo.equals("APRO")){
                     datasource = aprobados(curs.getSelectedItem().getValue(),sistemasCombo.getSelectedItem().getValue());
                    report.setSrc(directorioReportes+"estudiantesAprobados.jasper");
                   
            }else if(tipo.equals("LIBF")){

                    datasource = noti.libretas(curs.getSelectedItem().getValue(),estudiantesCombo.getSelectedItem().getValue(),sistemasCombo.getSelectedItem().getValue());
                    report.setSrc(directorioReportes+"libretaSupletorios.jasper");
                    parametros.put("pathSubRel",directorioReportes );//libreta_sub.jasper
                    parametros.put("pathSubRel2",directorioReportes);//libreta_subFaltas.jasper
                   
            }else if(tipo.equals("MEJE")){
                    datasource = noti.reporteMejor(curs.getSelectedItem().getValue());
                    report.setSrc(directorioReportes+"mejoresacta.jasper");
            }else if(tipo.equals("LIB2")){

                    datasource = noti.libretas(curs.getSelectedItem().getValue(),estudiantesCombo.getSelectedItem().getValue(),sistemasCombo.getSelectedItem().getValue());
                    report.setSrc(directorioReportes+"libreta2.jasper");
                    parametros.put("pathSubRel", directorioReportes);//libreta_subPequeno.jasper
                    parametros.put("pathSubRel2", directorioReportes);//libreta_subFaltas.jasper

            }else if(tipo.equals("LIB3")){
                    datasource = noti.libretas(curs.getSelectedItem().getValue(),estudiantesCombo.getSelectedItem().getValue(),sistemasCombo.getSelectedItem().getValue());
                    report.setSrc(directorioReportes+"libreta3.jasper");
                    parametros.put("pathSubRel", directorioReportes);//libreta_sub.jasper
                    parametros.put("pathSubRel2", directorioReportes);//libreta_sub.jasper

            }else if(tipo.equals("-1")){
                   alert("No ha seleccionado ningún reporte...!");
                    return;
            }
            if(!tipo.equals("-1")){
                report.setParameters(parametros);
                report.setDatasource(datasource);
                if(format.getSelectedItem().getValue().equals("xlsm")){
                    Map exportParams = new HashMap();
                    exportParams.put(net.sf.jasperreports.engine.export.JRXlsAbstractExporterParameter.PROPERTY_ONE_PAGE_PER_SHEET.toString(), false);
                    parametros.put("exportParameter", exportParams);
                    report.setType("xls");
                }else{
                    report.setType((String) format.getSelectedItem().getValue());
                }
            }
		}

void campos(String valor){
        estudiantesCombo.disabled = true;
        materiasCombo.disabled = true;
        curs.disabled = true;
        sistemasCombo.disabled = true;

      fila.visible = false;
      filamodalidad.visible = false;
      sistemasCombo.setSelectedIndex(0);
      curs.setSelectedIndex(0);
     especialidad.disabled = true;
     filacursos.visible = false;
    filaespecialidad.visible = false;
    filaestudiantes.visible = false;
    filamodalidad.visible = false;
    filamaterias.visible = false;
    filaaportes.visible = false;
     filasecuencia.visible = false;
     incluirfaltas.visible = false;
     incluirpromedio.visible = false;
        if(valor.equals("DIS")){
            curs.disabled = false;
            filacursos.visible = true;
            titulo.value= "Distributivo";
        }else if(valor.equals("DIS2") || valor.equals("CDIS")){
            curs.disabled = false;
            sistemasCombo.disabled = false;
            titulo.value= "Lista de profesores por Curso";
            filacursos.visible = true;
            filaaportes.visible = true;
            
        }else if(valor.equals("PCUR")){
             titulo.value= "Promedios por Curso";
            sistemasCombo.disabled = false;
            
            filaaportes.visible = true;
            
        }else if(valor.equals("ENC2")){
             titulo.value= "Promedios por Curso";
             sistemasCombo.disabled = true;
             curs.disabled = false;
             estudiantesCombo.disabled = false;
             filacursos.visible = true;
             filaaportes.visible = true;
             filaestudiantes.visible = true;
             
        }else if(valor.equals("ENC3") || valor.equals("ENC4")){
             titulo.value= "RESULTADO DE LA INVESTIGACIÓN SOCIO-ECONÓMICA";
             curs.disabled = false;
             filacursos.visible = true;
        }else if(valor.equals("ENC5") || valor.equals("ENC6")){
             titulo.value= "RESULTADO DE LA INVESTIGACIÓN SOCIO-ECONÓMICA";
        }else if(valor.equals("MEJ")){
             titulo.value= "Mejores por Curso";
             sistemasCombo.disabled = false;
             filaaportes.visible = true;
        }else if(valor.equals("MEJE")){
             titulo.value= "Mejores Estudiantes";
             curs.disabled = false;
             filacursos.visible = true;
        }else if(valor.equals("NMAT") || valor.equals("NMATD") || valor.equals("CCAL5") ){
            curs.disabled = false;
            sistemasCombo.disabled = false;
            materiasCombo.disabled = false;
            titulo.value= "Cuadro de Notas por Materia";
            if(valor.equals("NMATD"))
                titulo.value= "Cuadro de Notas por Materia Disciplina";
            materiasCombo.setSelectedIndex(-1);
            curs.setSelectedIndex(0);
            filacursos.visible = true;
            filaaportes.visible = true;
            filamaterias.visible = true;
            
        }else if(valor.equals("LIBF") || valor.equals("LIB") || valor.equals("LIB2") || valor.equals("LIB3")){
            curs.disabled = false;
            estudiantesCombo.disabled = false;
            sistemasCombo.disabled = false;
             titulo.value= "Libreta de Calificaciones";
            estudiantesCombo.setSelectedIndex(-1);
            filaestudiantes.visible = true;
            filacursos.visible = true;
            filaaportes.visible = true;
             
        }else if(valor.equals("APRO")){
            curs.disabled = false;
            sistemasCombo.disabled = false;
            titulo.value= "Listado de Estudiantes Aprobados/Reprobados";
            filaestudiantes.visible = true;
            filacursos.visible = true;
            filaaportes.visible = true;

        }else if(valor.equals("CERT") || valor.equals("CERT2")   ){
            curs.disabled = false;
            estudiantesCombo.disabled = false;
             titulo.value= "Certificado de Promocion";
             filacursos.visible = true;
            filamaterias.visible = true;
 filaestudiantes.visible = true;
        }else if(valor.equals("PROC")  ){
             titulo.value= "Promedios x Curso y Materia";
             curs.disabled = false;
             sistemasCombo.disabled = false;
              filaaportes.visible = true;
              filacursos.visible = true;
        }else if(valor.equals("CERD")  ){
            curs.disabled = false;
            estudiantesCombo.disabled = false;
             titulo.value= "Certificado de Conducta";
             filamodalidad.visible = true;
             filacursos.visible = true;
             filaestudiantes.visible = true;
        }else if(valor.equals("CCAL") || valor.equals("CCAL2") || valor.equals("CCAL3")){
             incluirfaltas.visible = true;
             incluirpromedio.visible = true;
             curs.disabled = false;
             sistemasCombo.disabled = false;
             titulo.value= "Cuadro de Calificaciones";
             fila.visible = true;
             filacursos.visible = true;
            filaaportes.visible = true;
            
        }else if(valor.equals("ESTA")){
             curs.disabled = false;
             sistemasCombo.disabled = false;
             titulo.value= "CUADRO ESTADISTICO DE RENDIMIENTO";
             filacursos.visible = true;
            filaaportes.visible = true;
            
        }else if(valor.equals("ESTAD")){
             curs.disabled = false;
             sistemasCombo.disabled = false;
             titulo.value= "CUADRO ESTADISTICO DE RENDIMIENTO POR DISTRIBUTIVO";
             filaaportes.visible = true;
             fila.visible = true;
            
        }else if(valor.equals("CSUP")){
            curs.disabled = false;
            sistemasCombo.disabled = false;
             titulo.value= "Cuadro de Calificaciones";
             fila.visible = true;
             hasta.value = new java.math.BigDecimal(40);
             filacursos.visible = true;
            filaaportes.visible = true;
             
        }else if(valor.equals("AG") || valor.equals("AG2") ){
            especialidad.disabled = false;
            titulo.value= "Acta de Grado";
            filaespecialidad.visible = true;
            filaestudiantes.visible = true;
            estudiantesCombo.disabled = false;
        }else if(valor.equals("CAG") || valor.equals("CAG2")){
            especialidad.disabled = false;
            filaespecialidad.visible = true;
            filaestudiantes.visible = true;
            titulo.value= "Copia de Acta de Grado";
            estudiantesCombo.disabled = false;
        }else if(valor.equals("RECC") ){
           curs.disabled = false;
           filacursos.visible = true;
           titulo.value= "Record Académico";
         }else if(valor.equals("RECC1") ){
           filasecuencia.visible = true;
           titulo.value= "Record Académico";
         }else if(valor.equals("RECE") ){
            especialidad.disabled = false;
            titulo.value= "Record Académico";
            filaespecialidad.visible = true;
            filasecuencia.visible = true;
        }else if(valor.equals("EXAM")){
            curs.disabled = false;
            titulo.value= "Examenes de Grado";
            filacursos.visible = true;
        }else if(valor.equals("LAG")){
            curs.disabled = false;
            titulo.value= "Listado de Actas de Grado";
             filacursos.visible = true;
        }else if(valor.equals("CNF") || valor.equals("CNF2") || valor.equals("CNF3") ){
            curs.disabled = false;
            sistemasCombo.disabled = false;
            titulo.value= "Cuadro de Calificaciones";
            fila.visible = true;
             filacursos.visible = true;
            filaaportes.visible = true;
        }else if(valor.equals("EST")){
            curs.disabled = false;
            sistemasCombo.disabled = false;
            titulo.value= "Cuadro de Estadístico";
            fila.visible = true;
            filacursos.visible = true;
            filaaportes.visible = true;
        }else{
            titulo.value= " ";
        }
}
]]>
        </zscript>
        <panel width="100%" id="parametros"  height="100%" border="normal">
            <panelchildren>
                <grid  id="ver" style="background:transparent;border:1px" width="750px">
                    <rows>
                        <row  style="background:transparent;border:0px">
     
                            <span style="float:right"> Reporte:</span>
                            <span>
                                <listbox id="reporte" onSelect="campos(self.selectedItem.value)" width="450px"  mold="select" >
                                    <listitem label="[Seleccione]" value="-1" selected="true" />
        
                                    <listitem id="NMAT" label="Cuadro de Notas por Materia" value="NMAT" />
                                    <listitem id="NMATD"  label="Cuadro de Notas por Materia Disciplina" value="NMATD" />
                                    <listitem  id="LIB" label="Libreta de Calificaciones" value="LIB" />
                                    <listitem  id="LIBF" label="Libreta de Calificaciones(Final Supletorios)" value="LIBF" />
                                    <listitem  id="LIB2" label="Libreta de Calificaciones(Pequeño)" value="LIB2" />
                                    <listitem  id="LIB3" label="Libreta de Calificaciones(Con Aprobación o No)" value="LIB3" />
                                    <listitem id="CCAL"  label="Cuadro de Calificaciones" value="CCAL" />
                                    <listitem id="CCAL2"  label="Cuadro de Calificaciones(2)" value="CCAL2" />
                                    <listitem id="CCAL3"  label="Cuadro de Calificaciones(3)" value="CCAL3" />
                                    <listitem  id="CNF" label="Cuadro Juntas o Final" value="CNF" />
                                    <listitem  id="CNF2" label="Cuadro Juntas o Final (2)" value="CNF2" />
                                    <listitem id="CSUP"  label="Cuadro de Supletorios" value="CSUP" />
                                    <listitem  id="CNF3" label="Cuadro Final" value="CNF3" />
                                    <listitem  id="CDIS" label="Cuadro de Disciplinas" value="CDIS"/>
                                    <listitem  id="PCUR" label="Promedios por Curso" value="PCUR"/>
                                    <listitem  id="PROC" label="Promedios x Materias y Curso " value="PROC" />
                                    <listitem  id="MEJ" label="Mejores por Curso" value="MEJ"/>
                                    
                                    <listitem  id="EST" label="Estadístico por Curso" value="EST" />
                                    <listitem  id="ESTA" label="Estadístico de Rendimiento por Curso" value="ESTA" />
                                    <listitem  id="ESTAD" label="Estadístico de Rendimiento por Distributivo" value="ESTAD" />
                                    <listitem  id="RESUL" label="Resultados de Aprendizajes" value="RESUL" />
                                    
                                    <listitem  id="linea0281" label="============ACTAS Y CERTIFICADOS=============" value="linea2801" />
                                    <listitem  id="CERT" label="Certificado de Promoción" value="CERT"/>
                                    <listitem  id="CERT2" label="Certificado de Promoción(con decimales en notas)" value="CERT2"/>
                                    <listitem  id="LAG" label="Listado de Actas de Grado" value="LAG"/>
                                    <listitem  id="AG" label="Acta de Grado" value="AG"/>
                                    <listitem  id="AG2" label="Acta de Grado(Suspendidos)" value="AG2"/>
                                    <listitem  id="CAG" label="Copia de Acta de Grado" value="CAG"/>
                                    <listitem  id="CAG2" label="Copia de Acta de Grado(Suspendidos)" value="CAG2"/>
                                    <listitem  id="APRO" label="Listado de Estudiantes Aprobados" value="APRO"/>
                                    <listitem  id="CERD" label="Certificado de Disciplina" value="CERD"/>
                                    <listitem  id="EXAM" label="Examenes de Grado" value="EXAM"/>
                                    <listitem  id="MEJE" label="Mejor egresado(*)" value="MEJE"/>
                                    <listitem  id="linea001" label="============RECORDS=============" value="linea" />
                                    <listitem  id="RECC" label="Record Académico por Paralelos" value="RECC"/>
                                    <listitem  id="RECE" label="Record Académico por Especialidad" value="RECE"/>
                                    <listitem  id="RECC1" label="Record Académico por Cursos" value="RECC1"/>
                                    <listitem  id="linea002" label="=========================" value="linea" />
                                    
                                    <listitem  id="linea" label="========= ENCUESTAS ================" value="linea" />
                                    <listitem  id="ENC2" label="Resultados por Estudiantes" value="ENC2"/>
                                    <listitem  id="ENC3" label="Resumen y Resultados de Encuesta" value="ENC3"/>
                                    <listitem  id="ENC4" label="Resumen y Resultados de Encuesta(GRAFICAS)" value="ENC4"/>
                                    <listitem  id="ENC5" label="Resumen y Resultados de Encuesta por Sección" value="ENC5"/>
                                    <listitem  id="ENC6" label="Resumen y Resultados de Encuesta por Sección(GRAFICAS)" value="ENC6"/>
                                    <listitem  id="linea2" label="=========================" value="linea2" />
         <!--listitem  label="Mejor egresado(*)" value="CDIS"/>
        <listitem label="Cuadro juntas de curso(*)" value="CDIS"/>
        <listitem label="Cuadro de Supletorios(*)" value="CDIS"/>
        <listitem label="Cuadro de Mejores Estudiantes por curso(*)" value="CDIS"/>
        <listitem label="Cuadro de Promedios Finales(*)" value="CDIS"/>
        <listitem label="Promedios Generales de 1ro a 5to (*)" value="CDIS"/-->
                                    <listitem  id="DIS" label="Distributivo" value="DIS" />
                                    <listitem  id="DIS2" label="Profesores por Curso" value="DIS2" />
                                    <listitem  id="PROF" label="Listado de Profesores" value="PROF" />
                                    <listitem  id="PROFC" label="Listado de Profesores completo" value="PROFC" />
                                   
        
                                </listbox>
                              
    
                            </span>
                        </row>
                        <row  style="background:transparent;border:0px" id="fila" visible="false">
                            <span style="float:right;color:blue"> Rango Notas:</span>
                            <span style="color:blue"> Desde:
                                <decimalbox id="desde" value="0" cols="5" /> 
                                <separator bar="true" orient="vertical" />
                                Hasta:
                                <decimalbox id="hasta" value="20" cols="5"/>
                                <separator bar="true" orient="vertical" />
                                Nota de Peligro:
                                <decimalbox id="peligro" value="13.33" cols="5"/>
                                <separator bar="true" orient="vertical" />
                                INCLUIR: 
                                <checkbox visible="false" checked="true" id="incluirpromedio" label="PROMEDIO" style="color:blue" />
                                <checkbox visible="false" id="incluirfaltas" label=" FALTAS" style="color:blue" />
                            </span>
                        </row>
                        <row spans="2">
                            
                            <grid width="75%"  id="rangos">
                            
                                    <auxhead>
                                        <auxheader label="INGRESE LOS RANGOS PARA REPORTE" colspan="3"/>
                                    </auxhead>
                                      <columns>
                                        <column width="120px" label ="Desde(mayor.e.igual)"/>
                                        <column width="120px"    label ="Hasta(menor)"/>
                                        <column   label ="Título"/>
                                    </columns>
                                        <rows>
                                    <row>
                                       <doublebox id="r1" cols="4"  value="0" /> 
                                       <doublebox id="r2" cols="4"  value="10"   /> 
                                       <textbox value="0-10" />
                                    </row>
                                    <row>
                                       <doublebox id="r3" cols="4"  value="11"  /> 
                                       <doublebox id="r4" cols="4"  value="15"   /> 
                                       <textbox value="11-15" />
                                    </row>
                                    <row>
                                       <doublebox id="r5" cols="4"  value="16"  /> 
                                       <doublebox id="r6" cols="4"  value="18"   /> 
                                       <textbox value="16-18" />
                                    </row>
                                    <row>
                                       <doublebox id="r7" cols="4"  value="19"  /> 
                                       <doublebox id="r8" cols="4" value="20"   /> 
                                       <textbox value="19-20" />
                                    </row>
                                    

                                </rows>
                            </grid>
                        </row>


                        <row id="filacursos" style="background:transparent;border:0px">
                            <span style="float:right"> Curso:</span>
                            <span>
                                <listbox id="curs" width="450px"  mold="select" onSelect="buscar2(((Cursos)self.selectedItem.value)); ">
                                    <listitem   forEach="${cursos}" value="${each}" label="${each.descripcion} ${each.especialidad}  ${each.paralelo}"/>
                                </listbox>
                                <button label="RECALCULAR(30s.)"  onClick="recalcular()"/>
                            </span>
                        </row>
                        <row  id="filaespecialidad"  style="background:transparent;border:0px">
                            <span style="float:right"> Especialidad:</span>
                            <span>
                                <listbox id="especialidad" width="450px"  mold="select" onSelect="buscar22(((Global)self.selectedItem.value)); estudiantesCombo.disabled = false; ">
                                    <listitem   forEach="${especialidades}" value="${each}" label="${each.descripcion}"/>
                                </listbox>
                            </span>
                        </row>
                        <row  id="filasecuencia"  style="background:transparent;border:0px">
                            <span style="float:right"> Cursos:</span>
                            <span>
                                <listbox id="secuencia" width="450px"  mold="select" >
                                    <listitem selected="true"  value="1" label="Octavo"/>
                                    <listitem   value="2" label="Noveno"/>
                                    <listitem   value="3" label="Décimo"/>
                                    <listitem   value="4" label="Primero Bachillerato"/>
                                    <listitem   value="5" label="Segundo Bachillerato"/>
                                    <listitem   value="6" label="Tercero Bachillerato"/>

                                </listbox>
                            </span>
                        </row>
                        <row   id="filaestudiantes"   style="background:transparent;border:0px">
                            <span style="float:right"> Estudiantes: </span>
                            <listbox id="estudiantesCombo" width="450px"  mold="select" >
                                <listitem    forEach="${estudiantes}" value="${each}" label="${each.apellidos}" />

                            </listbox>
                        </row>
                        <row   style="background:transparent;border:0px" id="filamodalidad" visible="false">
                            <span style="float:right;color:blue"> MODALIDAD:</span>
                            <span style="color:blue">
                                <textbox id="modalidad" value="BÁSICA"  cols="20" />
                            </span>
                        </row>
                        <row   id="filamaterias"   style="background:transparent;border:0px">
                            <span style="float:right"> Materias: </span>
                            <listbox id="materiasCombo" width="450px"  mold="select" >
                                <listitem forEach="${materias}" value="${each}">
                                    <listcell label="${each.descripcion}" />
                                        
                                </listitem>
                            </listbox>
                        </row>
                        <row   id="filaaportes"   style="background:transparent;border:0px" >
                            <span style="float:right"> Aporte: </span>

                            <listbox id="sistemasCombo" width="450px"  mold="select" >
                                <listitem  forEach="${sistemas}" value="${each}">
                                    <listcell label="${each.nombre}" />
                                </listitem>
                            </listbox>
                        </row>

                        <row  style="background:transparent;border:0px">
                            <span style="float:right"> Título:</span>
                            <span>
                                <textbox id="titulo" value=" " cols="30"/>
                                <span>
                                    <bandbox readonly="true"  width="70px" value="PDF" id="bd" >
                                        <bandpopup>
                                            <vbox>
                                                <listbox width="137px" id="format"  onSelect="bd.value=self.selectedItem.label; bd.close();showReport();">
                                                    <listitem  value="pdf" selected="true">
                                                        <listcell  image="/images/pdf.png" label="PDF" />
                                                    </listitem>
                                                    <listitem value="rtf">
                                                        <listcell  image="/images/word.gif" label="Word" />
                                                    </listitem>
                                                    <listitem value="xls">
                                                        <listcell  image="/images/excel.gif"  label="Excel(Múlt.Hoja)" />
                                                    </listitem>
                                                    <listitem value="xlsm">
                                                        <listcell  image="/images/excel.gif"  label="Excel(Una.Hoja)" />
                                                    </listitem>
                                                    <listitem value="jxl">
                                                        <listcell  image="/images/excel.gif" label="JXL" />
                                                    </listitem>
                                                    <listitem value="csv">
                                                        <listcell  image="/images/csv.gif" label="CSV" />
                                                    </listitem>
                                                    <listitem value="odt">
                                                        <listcell  image="/images/open.png" label="OpenOfic" />
                                                    </listitem>
                                                    <listitem value="xml">
                                                        <listcell  image="/images/xml.gif" label="XML" />
                                                    </listitem>
                                                    <listitem value="html">
                                                        <listcell  image="/images/html.gif" label="HTML" />
                                                    </listitem>
                                                </listbox>
                                            </vbox>
                                        </bandpopup>
                                    </bandbox>
                                    <button label="Ejecutar...!" image="/images/run.gif" onClick='showReport();'/>
                                
                                </span>

                            </span>
                        </row>

                      
                    </rows>
                </grid>
                <zscript>
                    public void aumentar(){
                    String tamanio = report.height.replace("px","").replace("%","");
                    Integer t = new Integer(tamanio);
                    report.height = (t+100)+"px";
                    }
                    public void reducir(){
                    String tamanio = report.height.replace("px","").replace("%","");
                    Integer t = new Integer(tamanio);
                    report.height = (t-100)+"px";
                    }

                </zscript>
                <grid id="reportese" visible="false" width="100%" height="100%">
                    <rows>
                        <row   spans="2">
                            <span>
                                <button  image="/images/eliminar.gif" id="cerrar"   label="Cerrar y Seleccionar otro reporte" onClick='ver.setVisible(true);cerrar.setVisible(false);'/>
                                <button  id="reducir" label="Disminuir(-)" onClick="reducir()"/>
                                <button  id="aumentar" label="Aumentar (+)" onClick="aumentar()"/>
                                <button label="Refrescar Ejecutar...!" image="/images/run.gif" onClick='showReport();'/>
                            </span>

                        </row>

                        <row   spans="2">
                            <jasperreport width="100%" height="500px" id="report" />
                        </row>

                    </rows>
                </grid>
            </panelchildren>
        </panel>


        <zscript>
            import bean.Permisos;
            Permisos per = new Permisos();
            void cargando(){
            filacursos.visible = false;
            filaespecialidad.visible = false;
            filaestudiantes.visible = false;
            filamodalidad.visible = false;
            filamaterias.visible = false;
            filaaportes.visible = false;
    
            for(Iterator it = reporte.getItems().iterator(); it.hasNext();) {
            Listitem object = (Listitem)it.next();
            String valor = object.getValue();
            String labe = object.getLabel();
            object.visible = per.verificarPermisoReporte(valor,labe, "Ingresar",false,"REPORTES");
            }
     
            /*
            NMAT.visible = per.verificarPermisoReporte("NMAT", "Ingresar");
            NMATD.visible = per.verificarPermisoReporte("NMATD", "Ingresar");
            LIB.visible = per.verificarPermisoReporte("LIB", "Ingresar");
            LIB2.visible = per.verificarPermisoReporte("LIB", "Ingresar");
            LIB3.visible = per.verificarPermisoReporte("LIB", "Ingresar");
            LIBF.visible = per.verificarPermisoReporte("LIB", "Ingresar");
            CCAL.visible = per.verificarPermisoReporte("CCAL", "Ingresar");
            CCAL2.visible = per.verificarPermisoReporte("CCAL2", "Ingresar");
            CCAL3.visible = per.verificarPermisoReporte("CCAL", "Ingresar");
            CNF.visible = per.verificarPermisoReporte("CNF", "Ingresar");
            CNF2.visible = per.verificarPermisoReporte("CNF", "Ingresar");
            CNF3.visible = per.verificarPermisoReporte("CNF", "Ingresar");
            CSUP.visible = per.verificarPermisoReporte("CSUP", "Ingresar");
            CDIS.visible = per.verificarPermisoReporte("CDIS", "Ingresar");
            APRO.visible = per.verificarPermisoReporte("APRO", "Ingresar");
            EST.visible = per.verificarPermisoReporte("EST", "Ingresar");
            AG.visible = per.verificarPermisoReporte("AG", "Ingresar");
            CAG.visible = per.verificarPermisoReporte("CAG", "Ingresar");
            AG2.visible = per.verificarPermisoReporte("AG", "Ingresar");
            CAG2.visible = per.verificarPermisoReporte("CAG", "Ingresar");
            LAG.visible = per.verificarPermisoReporte("AG", "Ingresar");
            CERT.visible = per.verificarPermisoReporte("CERT", "Ingresar");
            CERT2.visible = per.verificarPermisoReporte("CERT", "Ingresar");
            CERD.visible = per.verificarPermisoReporte("CERD", "Ingresar");
            EXAM.visible = per.verificarPermisoReporte("EXAM", "Ingresar");
            MEJE.visible = per.verificarPermisoReporte("MEJE", "Ingresar");
            DIS.visible = per.verificarPermisoReporte("DIS", "Ingresar");
            DIS2.visible = per.verificarPermisoReporte("DIS2", "Ingresar");
            PROF.visible = per.verificarPermisoReporte("PROF", "Ingresar");
            PROFC.visible = per.verificarPermisoReporte("PROFC", "Ingresar");

            PCUR.visible = per.verificarPermisoReporte("PCUR", "Ingresar");
            MEJ.visible = per.verificarPermisoReporte("MEJ", "Ingresar");
            ENC2.visible = per.verificarPermisoReporte("ETD", "Ingresar");
            ENC3.visible = per.verificarPermisoReporte("ETD", "Ingresar");
            ENC4.visible = per.verificarPermisoReporte("ETD", "Ingresar");
            ENC5.visible = per.verificarPermisoReporte("ETD", "Ingresar");
            ENC6.visible = per.verificarPermisoReporte("ETD", "Ingresar");
            RECC.visible = per.verificarPermisoReporte("RECC", "Ingresar");
            RECE.visible = per.verificarPermisoReporte("RECE", "Ingresar");
            RECC1.visible = per.verificarPermisoReporte("RECC1", "Ingresar");
            */

            }
        </zscript>


    </zk>
</window>
