<?xml version="1.0" encoding="UTF-8"?>
<window  mode="overlapped" onCreate="cargando();"  title="Reporte de Notas" width="81%" height="100%" border="normal"
    maximizable="true" closable="true" sizable="true">
<zk xmlns="http://www.zkoss.org/2005/zul">

	<zscript>
<![CDATA[
import sources.CustomDataSource;
import net.sf.jasperreports.engine.JRDataSource;
import sources.*;
import bean.notas;
import bean.disciplina;
import java.math.BigDecimal;
import bean.notas;
import jcinform.persistencia.*;
import jcinform.procesos.Administrador;
import org.zkforge.yuiext.grid.Row;
import java.util.Date;
import org.joda.time.DateMidnight;
import org.zkoss.zul.Listbox;
import bean.Permisos;
Permisos per = new Permisos();

         
Administrador adm = new Administrador();
Session ses = Sessions.getCurrent();
Periodo periodo = (Periodo) ses.getAttribute("periodo");
disciplina discipli = new disciplina();

Empleados user = (Empleados)ses.getAttribute("user");
    List cursos = null;

    if(user.getTipo().equals("Interna")){
        cursos = adm.query("Select o from Cursos as o where o.periodo.codigoper = '"+periodo.getCodigoper()+"' ");
    }else{
        cursos = adm.query("Select distinct o.curso from MateriaProfesor as o where o.empleado.codigoemp = '"+user.getCodigoemp()+"'  and o.curso.periodo.codigoper = '"+periodo.getCodigoper()+"' ");
    }


List trimestres = adm.query("Select o from Trimestres as o where  o.periodo = '"+periodo.getCodigoper()+"' order by o.codigotrim  ");
List sistemas = new ArrayList();
 for (Iterator it = trimestres.iterator(); it.hasNext();) {
              Trimestres trime = (Trimestres) it.next();
              List sistemas0 = adm.query("Select o from Sistemacalificacion as o " +
              " where o.trimestre.codigotrim = '"+ trime.getCodigotrim() +"' and  o.periodo.codigoper = '"+periodo.getCodigoper()+"' order by o.orden");

              Sistemacalificacion stodos = new Sistemacalificacion();
              stodos.setNombre("==========>>>>> "+trime.getDescripcion()+"");
              int orden = 0;
              int codigo=0;
              if(sistemas0.size() >0 ){
                  orden = ((Sistemacalificacion) sistemas0.get(sistemas0.size()-1)).getOrden();
                  codigo = ((Sistemacalificacion) sistemas0.get(sistemas0.size()-1)).getCodigosis();

              }
              stodos.setOrden(orden);
              stodos.setCodigosis(codigo);
              stodos.setTrimestre(trime);
              sistemas.add(stodos);
              for (Iterator it2 = sistemas0.iterator(); it2.hasNext();){
                    Sistemacalificacion siste = (Sistemacalificacion) it2.next();
                    sistemas.add(siste);
               }

 }

//List sistemas = adm.query("Select o from Sistemacalificacion as o where o.periodo.codigoper = '"+periodo.getCodigoper()+"' order by o.orden");
Sistemacalificacion stodos0 = new Sistemacalificacion(-1);
stodos0.setNombre("[Seleccione]");
sistemas.add(0,stodos0);

Cursos selec = new Cursos(-1);
selec.setDescripcion("[Seleccione]");
cursos.add(0,selec);
Cursos todos = new Cursos(-2);
todos.setDescripcion("[TODOS]");
  if(user.getTipo().equals("Interna"))
    cursos.add(todos);
notas noti = new notas();

List materias = adm.query("Select o from Global as o where o.grupo = 'zz' ");
void buscar2(Cursos cur){

            if(estudiantesCombo.disabled==false){
                    List empleadosEncontrados = adm.query("Select o from Matriculas as o where o.curso.codigocur = '"+cur.codigocur+"'  order by o.estudiante.apellido");
                    estudiantesCombo.getChildren().clear();
                    Matriculas matri = new Matriculas(-1);
                    Estudiantes es = new Estudiantes(-1);
                    es.setApellido("[Seleccione]");
                    es.setNombre("");
                    matri.setEstudiante(es);
                    empleadosEncontrados.add(0,matri);
                        
                           for (Iterator it = empleadosEncontrados.iterator(); it.hasNext();) {
                                  Matriculas estudent = (Matriculas) it.next();
                                    Listitem item = new Listitem();
                                    item.setValue(estudent);
                                    item.appendChild(new Listcell(estudent.estudiante.apellido+" "+estudent.estudiante.nombre));
                                    estudiantesCombo.appendChild(item);
                         }
                            matri = new Matriculas(-2);
                            matri.setEstudiante(es);
                                    Listitem item = new Listitem();
                                    item.setValue(matri);
                                    item.appendChild(new Listcell("[TODOS]"));
                                    estudiantesCombo.appendChild(item);

                                    estudiantesCombo.setSelectedIndex(0);
            }

if(materiasCombo.disabled==false){
            List materiaEncontrados = adm.query("Select o from MateriaProfesor as o where o.curso.codigocur = '"+cur.codigocur+"'  order by o.curso.paralelo.descripcion");
                     materiasCombo.getChildren().clear();
                     Listitem item = new Listitem();
                                    MateriaProfesor mat = new MateriaProfesor(-1);
                                    Global gl = new Global(-1);
                                    gl.setDescripcion("[Seleccione]");
                                    mat.setMateria(gl);
                                    item.setValue(mat);
                                    item.appendChild(new Listcell("[Seleccione]"));
                                    materiasCombo.appendChild(item);
                        for (Iterator it = materiaEncontrados.iterator(); it.hasNext();) {
                                  MateriaProfesor matep = (MateriaProfesor) it.next();
                                    Listitem item = new Listitem();
                                    item.setValue(matep);
                                    item.appendChild(new Listcell(matep.materia.descripcion));
                                    materiasCombo.appendChild(item);
                         }
materiasCombo.setSelectedIndex(0);
}
        
        
    }

 
      public Double redondear(Double numero, int decimales) {
        try{
                BigDecimal d = new BigDecimal(numero);
        d = d.setScale(decimales, RoundingMode.HALF_UP);
        return d.doubleValue();
        }catch(Exception e){
            return 0.0;
        }
        
        }

public JRDataSource distributivo(){
      Administrador adm = new Administrador();
      Session ses = Sessions.getCurrent();
      Periodo periodo = (Periodo) ses.getAttribute("periodo");
        ArrayList detalle = new ArrayList();
        List hoy = adm.query("SELECT mat FROM MateriaProfesor AS mat " +
                "WHERE mat.curso.periodo.codigoper = '" + periodo.getCodigoper() + "' " +
                "order by mat.curso.secuencia");
        for (Iterator it = hoy.iterator(); it.hasNext();) {
            MateriaProfesor elem = (MateriaProfesor) it.next();
            detalle.add(elem);
        }
      ReporteProfesorDataSource ds = new ReporteProfesorDataSource(detalle);


      return ds;
}

public JRDataSource distributivo2(){
      Administrador adm = new Administrador();
      Session ses = Sessions.getCurrent();
      Periodo periodo = (Periodo) ses.getAttribute("periodo");
      Cursos curso = ((Cursos)curs.selectedItem.value);
        ArrayList detalle = new ArrayList();
        List hoy = adm.query("SELECT mat FROM MateriaProfesor AS mat " +
                "WHERE mat.curso.codigocur = '" + curso.getCodigocur() + "' " +
                "order by mat.orden ");
        for (Iterator it = hoy.iterator(); it.hasNext();) {
            MateriaProfesor elem = (MateriaProfesor) it.next();
            detalle.add(elem);
        }
      ReporteProfesorDataSource ds = new ReporteProfesorDataSource(detalle);


      return ds;
}


public JRDataSource profesores(){
      Administrador adm = new Administrador();
      Session ses = Sessions.getCurrent();
      Periodo periodo = (Periodo) ses.getAttribute("periodo");
        ArrayList detalle = new ArrayList();
        List hoy = adm.query("SELECT mat FROM Empleados AS mat " +
                "  order by mat.apellidos");
        for (Iterator it = hoy.iterator(); it.hasNext();) {
            Empleados elem = (Empleados) it.next();
            detalle.add(elem);
        }
      ProfesoresDataSource ds = new ProfesoresDataSource(detalle);
      return ds;
}
 

 void showReport() {
 
 String tipo = reporte.getSelectedItem().getValue();
           if(tipo.equals("linea")){
                return;
           }
           
     
           rep.setOpen(true);parametros.setOpen(false); 
            Institucion insts = periodo.getInstitucion();
             
            Map parametros = new HashMap();
            parametros.put("denominacion", insts.getDenominacion());
            parametros.put("nombre", insts.getNombre());
            parametros.put("periodo", periodo.getDescripcion());
            parametros.put("titulo", titulo.value);
            parametros.put("slogan", insts.getSlogan());
            parametros.put("perseleccionado", sistemasCombo.getSelectedItem().getValue().getTrimestre().getDescripcion()+ " - "+sistemasCombo.getSelectedItem().getValue().getNombre()+"");
            
            
            JRDataSource datasource = null;

            if(tipo.equals("DIS")){
                    datasource = distributivo();
                    report.setSrc("WEB-INF/reportes/distributivo.jasper");
            }else if(tipo.equals("DIS2")){
                    datasource = distributivo2();
                    report.setSrc("WEB-INF/reportes/firmascuadrocalificaciones.jasper");
            }else if(tipo.equals("PROF")){
                    datasource = profesores();
                    report.setSrc("WEB-INF/reportes/profesores.jasper");
            }else if(tipo.equals("PROFC")){
                    datasource = profesores();
                    report.setSrc("WEB-INF/reportes/profesoresCompleto.jasper");
            }else if(tipo.equals("CERT")){
                    datasource = noti.promocion(curs.getSelectedItem().getValue(),estudiantesCombo.getSelectedItem().getValue());
                    report.setSrc("WEB-INF/reportes/promocion.jasper");
            }else if(tipo.equals("PCUR")){
                    datasource = noti.promediocurso(sistemasCombo.getSelectedItem().getValue());
                    report.setSrc("WEB-INF/reportes/promedioporcurso.jasper");
            }else if(tipo.equals("MEJ")){
                    datasource = noti.mejoresporcurso(sistemasCombo.getSelectedItem().getValue());
                    report.setSrc("WEB-INF/reportes/mejoresporcurso.jasper");
            }else if(tipo.equals("NMAT")){
                    
                    ArrayList arreglo = noti.notasd(curs.getSelectedItem().getValue(),((MateriaProfesor)materiasCombo.getSelectedItem().getValue()).getMateria(),sistemasCombo.getSelectedItem().getValue());
                    datasource = (ReporteNotasDataSource) arreglo.get(0);
                     parametros = (HashMap) arreglo.get(1);
                     parametros.put("perseleccionado",((Sistemacalificacion)sistemasCombo.getSelectedItem().getValue()).getNombre());
                    MateriaProfesor mate = ((MateriaProfesor)materiasCombo.getSelectedItem().getValue());
                    parametros.put("materia", mate.getMateria().getDescripcion());
                     parametros.put("profesor", mate.getEmpleado().getNombres()+" "+ mate.getEmpleado().getApellidos());
                    report.setSrc("WEB-INF/reportes/notaspor.jasper");
                    parametros.put("titulo", titulo.value);
            }else if(tipo.equals("NMATD")){

                    ArrayList arreglo = noti.notasdisciplina(curs.getSelectedItem().getValue(),((MateriaProfesor)materiasCombo.getSelectedItem().getValue()).getMateria(),sistemasCombo.getSelectedItem().getValue());
                    datasource = (ReporteNotasDataSource) arreglo.get(0);
                    MateriaProfesor mate = ((MateriaProfesor)materiasCombo.getSelectedItem().getValue());
                    parametros.put("materia", mate.getMateria().getDescripcion());
                    parametros.put("profesor", mate.getEmpleado().getNombres()+" "+ mate.getEmpleado().getApellidos());
                    report.setSrc("WEB-INF/reportes/notaspor.jasper");
            }else if(tipo.equals("EXAM")){
                    datasource = noti.cuadroexamenes(curs.getSelectedItem().getValue());
                    report.setSrc("WEB-INF/reportes/examenesgrado.jasper");
            }else if(tipo.equals("CDIS")){
                    ArrayList arreglo = discipli.reporteDisciplina(curs.getSelectedItem().getValue(),sistemasCombo.getSelectedItem().getValue());
                    parametros = (HashMap) arreglo.get(1);
                    parametros.put("perseleccionado",((Sistemacalificacion)sistemasCombo.getSelectedItem().getValue()).getNombre());
                    datasource = (DisciplinaDataSource) arreglo.get(0);
                    report.setSrc("WEB-INF/reportes/disciplina.jasper");
                    parametros.put("titulo",titulo.value);
            }else if(tipo.equals("CCAL2")){
                    parametros.put("perseleccionado",((Sistemacalificacion)sistemasCombo.getSelectedItem().getValue()).getNombre());
                    datasource = noti.cuadrocalificaciones(curs.getSelectedItem().getValue(),sistemasCombo.getSelectedItem().getValue(),desde.doubleValue(),hasta.doubleValue());
                    report.setSrc("WEB-INF/reportes/cuadrocalificaciones2.jasper");
            }else if(tipo.equals("CCAL")){
                    parametros.put("perseleccionado",((Sistemacalificacion)sistemasCombo.getSelectedItem().getValue()).getNombre());
                    datasource = noti.cuadrocalificaciones(curs.getSelectedItem().getValue(),sistemasCombo.getSelectedItem().getValue(),desde.doubleValue(),hasta.doubleValue());
                    report.setSrc("WEB-INF/reportes/cuadrocalificaciones.jasper");

            }else if(tipo.equals("CNF")){
                    
                    datasource = noti.cuadrofinal(curs.getSelectedItem().getValue(),sistemasCombo.getSelectedItem().getValue(),desde.doubleValue(),hasta.doubleValue());
                    report.setSrc("WEB-INF/reportes/cuadrofinal.jasper");
            }else if(tipo.equals("AG")){
                    datasource = noti.actaGrado(curs.getSelectedItem().getValue(),"original");
                    report.setSrc("WEB-INF/reportes/actaGrado.jasper");
            }else if(tipo.equals("CAG")){
                    datasource = noti.actaGrado(curs.getSelectedItem().getValue(),"copia");
                    report.setSrc("WEB-INF/reportes/copiaactaGrado.jasper");
            }else if(tipo.equals("LIB")){

                    datasource = noti.libretas(curs.getSelectedItem().getValue(),estudiantesCombo.getSelectedItem().getValue(),sistemasCombo.getSelectedItem().getValue());
                    report.setSrc("WEB-INF/reportes/libreta.jasper");
                    parametros.put("pathSubRel", "reportes/libreta_sub.jasper");
                    parametros.put("pathSubRel2", "reportes/libreta_subFaltas.jasper");
                   
            }else if(tipo.equals("-1")){
                   alert("No ha seleccionado ningún reporte...!");
                    return;
            }
            if(!tipo.equals("-1")){
                report.setParameters(parametros);
                report.setDatasource(datasource);
                report.setType((String) format.getSelectedItem().getValue());
            }
		}

void campos(String valor){
        estudiantesCombo.disabled = true;
        materiasCombo.disabled = true;
        curs.disabled = true;
        sistemasCombo.disabled = true;

      fila.visible = false;
      sistemasCombo.setSelectedIndex(0);
      curs.setSelectedIndex(0);

        if(valor.equals("DIS")){
            curs.disabled = false;
            titulo.value= "Distributivo";
        }else if(valor.equals("DIS2") || valor.equals("CDIS")){
            curs.disabled = false;
            titulo.value= "Lista de profesores por Curso";
            sistemasCombo.disabled = false;
        }else if(valor.equals("PCUR")){
             titulo.value= "Promedios por Curso";
            sistemasCombo.disabled = false;
        }else if(valor.equals("MEJ")){
             titulo.value= "Mejores por Curso";
            sistemasCombo.disabled = false;
        }else if(valor.equals("NMAT") || valor.equals("NMATD") ){
            curs.disabled = false;
            sistemasCombo.disabled = false;
            materiasCombo.disabled = false;
            titulo.value= "Cuadro de Notas por Materia";
            if(valor.equals("NMATD"))
                titulo.value= "Cuadro de Notas por Materia Disciplina";
            materiasCombo.setSelectedIndex(-1);
            curs.setSelectedIndex(0);
        }else if(valor.equals("LIB")){
            curs.disabled = false;
            estudiantesCombo.disabled = false;
            sistemasCombo.disabled = false;
             titulo.value= "Libreta de Calificaciones";
            estudiantesCombo.setSelectedIndex(-1);
        }else if(valor.equals("CERT")  ){
            curs.disabled = false;
            estudiantesCombo.disabled = false;
             titulo.value= "Certificado de Promocion";
 
        }else if(valor.equals("CCAL") || valor.equals("CCAL2")){
            curs.disabled = false;
            sistemasCombo.disabled = false;
             titulo.value= "Cuadro de Calificaciones";
             fila.visible = true;
        }else if(valor.equals("AG") ){
            curs.disabled = false;
            titulo.value= "Acta de Grado";
        }else if(valor.equals("EXAM")){
            curs.disabled = false;
            titulo.value= "Examenes de Grado";
        }else if(valor.equals("CAG")){
            curs.disabled = false;
            titulo.value= "Copia de Acta de Grado";
        }else if(valor.equals("CNF")){
            curs.disabled = false;
            sistemasCombo.disabled = false;
            titulo.value= "Cuadro de Final de Calificaciones";
            fila.visible = true;
        }else{
            titulo.value= " ";
        }
}
]]>
	</zscript>
<panel width="100%" id="parametros"  height="100%" border="normal"
collapsible="true" title="Parametros">
				<panelchildren>
<grid width="100%">
<rows>
<row>
     
<span style="float:right"> Reporte:</span>
<span>
<listbox id="reporte" onSelect="campos(self.selectedItem.value)" width="300px"  mold="select" >
		<listitem label="[Seleccione]" value="-1" selected="true" />
        
		<listitem id="NMAT" label="Cuadro de Notas por Materia" value="NMAT" />
        <listitem id="NMATD"  label="Cuadro de Notas por Materia Disciplina" value="NMATD" />
        <listitem  id="LIB" label="Libreta de Calificaciones" value="LIB" />
		<listitem id="CCAL"  label="Cuadro de Calificaciones" value="CCAL" />
        <listitem id="CCAL2"  label="Cuadro de Calificaciones(2)" value="CCAL2" />
		<listitem  id="CNF" label="Cuadro Juntas o Final" value="CNF" />
		<listitem  id="CDIS" label="Cuadro de Disciplinas" value="CDIS"/>
        <listitem  id="PCUR" label="Promedios por Curso" value="PCUR"/>
        <listitem  id="MEJ" label="Mejores por Curso" value="MEJ"/>
        <listitem  id="AG" label="Acta de Grado" value="AG"/>
        <listitem  id="CAG" label="Copia de Acta de Grado" value="CAG"/>
        <listitem  id="CERT" label="Certificado de Promoción" value="CERT"/>
        <listitem  id="EXAM" label="Examenes de Grado" value="EXAM"/>

        <listitem  id="linea" label="=========================" value="linea" />
         <!--listitem  label="Mejor egresado(*)" value="CDIS"/>
        <listitem label="Cuadro juntas de curso(*)" value="CDIS"/>
        <listitem label="Cuadro de Supletorios(*)" value="CDIS"/>
        <listitem label="Cuadro de Mejores Estudiantes por curso(*)" value="CDIS"/>
        <listitem label="Cuadro de Promedios Finales(*)" value="CDIS"/>
        <listitem label="Promedios Generales de 1ro a 5to (*)" value="CDIS"/-->
        <listitem  id="DIS" label="Distributivo" value="DIS" />
        <listitem  id="DIS2" label="Profesores por Curso" value="DIS2" />
        <listitem  id="PROF" label="Listado de Profesores" value="PROF" />
        <listitem  id="PROFC" label="Listado de Profesores completo" value="PROFC" />
        
	</listbox>
    
    </span>
</row>
<row id="fila" visible="false">
    <span style="float:right;color:blue"> Rango Notas:</span>
    <span style="color:blue"> Desde: <decimalbox id="desde" value="0" cols="5" /> Hasta: <decimalbox id="hasta" value="20" cols="5"/></span>
</row>

<row>
<span style="float:right"> Curso:</span>
        <listbox id="curs" width="300px"  mold="select" onSelect="buscar2(((Cursos)self.selectedItem.value)); ">
            <listitem   forEach="${cursos}" value="${each}" label="${each.descripcion} ${each.especialidad}  ${each.paralelo}"/>
        </listbox>
 </row>
 <row>
<span style="float:right"> Estudiantes: </span>
                                <listbox id="estudiantesCombo" width="300px"  mold="select" >
                                    <listitem    forEach="${estudiantes}" value="${each}" label="${each.apellidos}" />

                                </listbox>
</row>
<row>
<span style="float:right"> Materias: </span>
                                <listbox id="materiasCombo" width="300px"  mold="select" >
                                    <listitem forEach="${materias}" value="${each}">
                                        <listcell label="${each.descripcion}" />
                                        
                                    </listitem>
                                </listbox>
</row>
<row  >
<span style="float:right"> Sistema Notas: </span>

                                <listbox id="sistemasCombo" width="300px"  mold="select" >
                                    <listitem  forEach="${sistemas}" value="${each}">
                                        <listcell label="${each.nombre}" />
                                    </listitem>
                                </listbox>
</row>

<row>
    <span style="float:right"> Título:</span>
    <textbox id="titulo" value=" " cols="35"/>
</row>
<row>
<span style="float:right"> Formato:</span>
 <span> <listbox id="format" mold="select" onSelect="showReport();" >
		<listitem label="PDF" value="pdf" selected="true" />
		<listitem label="XML" value="xml" />
		<listitem label="HTML" value="html" />
		<listitem label="Word (RTF)" value="rtf" />
		<listitem label="Excel" value="xls" />
		<listitem label="Excel (JXL)" value="jxl" />
		<listitem label="CSV" value="csv" />
		<listitem label="OpenOffice (ODT)" value="odt" unless="false"/>
	</listbox>
    <button label="Ejecutar!" onClick='showReport();'/></span>
</row>

</rows>
</grid>
</panelchildren>
</panel>
<panel width="100%" id="rep"  onOpen="parametros.setOpen(true);"  height="90%" border="normal"
collapsible="true" title="Reporte">
				<panelchildren>
	<jasperreport id="report" />
 </panelchildren>
 </panel>

<zscript>
import bean.Permisos;
Permisos per = new Permisos();
void cargando(){
        NMAT.visible = per.verificarPermisoReporte("NMAT", "Ingresar");
        NMATD.visible = per.verificarPermisoReporte("NMATD", "Ingresar");
        LIB.visible = per.verificarPermisoReporte("LIB", "Ingresar");
		CCAL.visible = per.verificarPermisoReporte("CCAL", "Ingresar");
        CCAL2.visible = per.verificarPermisoReporte("CCAL2", "Ingresar");
		CNF.visible = per.verificarPermisoReporte("CNF", "Ingresar");
		CDIS.visible = per.verificarPermisoReporte("CDIS", "Ingresar");
        AG.visible = per.verificarPermisoReporte("AG", "Ingresar");
        CAG.visible = per.verificarPermisoReporte("CAG", "Ingresar");
        CERT.visible = per.verificarPermisoReporte("CERT", "Ingresar");
        EXAM.visible = per.verificarPermisoReporte("EXAM", "Ingresar");
        
        DIS.visible = per.verificarPermisoReporte("DIS", "Ingresar");
        DIS2.visible = per.verificarPermisoReporte("DIS2", "Ingresar");
        PROF.visible = per.verificarPermisoReporte("PROF", "Ingresar");
        PROFC.visible = per.verificarPermisoReporte("PROFC", "Ingresar");

}
</zscript>


</zk>
</window>
