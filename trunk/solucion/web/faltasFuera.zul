
<?page id="main-page"?>
<window
 title="Ingresar Faltas Disciplinarias"
  id="principal">
<zscript>
<![CDATA[
import java.math.BigDecimal;
import bean.disciplina;
import jcinform.persistencia.*;
import jcinform.procesos.Administrador;
 import bean.Permisos;
import java.util.Date;
import org.joda.time.DateMidnight;
import org.zkoss.zul.Listbox;

Administrador adm = new Administrador();
Session ses = Sessions.getCurrent();
Periodo periodo = (Periodo) ses.getAttribute("periodo");
Empleados user =  (Empleados)ses.getAttribute("user");
//List cursos = adm.query("Select o from Cursos as o where o.periodo.codigoper = '"+periodo.getCodigoper()+"' ");
List cursos = adm.query("Select distinct o.curso from MateriaProfesor as o " + 
    " where o.empleado.codigoemp = '"+user.getCodigoemp()+"'  " + 
    " and o.curso.periodo.codigoper = '"+periodo.getCodigoper()+"' and o.materia.codigo in (0,1) ");
 Cursos curS = new Cursos(-1);
 cursos.add(0,curS);
Permisos permiso = new Permisos();
disciplina no = new disciplina();
Boolean guardando = false;
List equivalen = adm.query("Select o from Equivalencias as o where o.periodo.codigoper =  '"+periodo.getCodigoper()+"'  and o.grupo = 'DI'");
 /*List sistemas = adm.query("Select o from Sistemacalificacion as o where o.periodo.codigoper =  '"+periodo.getCodigoper()+"'  and o.faltas = true order by o.orden");
Sistemacalificacion siste = new Sistemacalificacion(-1);
sistemas.add(0,siste);*/
List trimestres = adm.query("Select o from Trimestres as o where  o.periodo = '"+periodo.getCodigoper()+"' order by o.codigotrim  ");
List sistemas = new ArrayList();
 for (Iterator it = trimestres.iterator(); it.hasNext();) {
              Trimestres trime = (Trimestres) it.next();
              List sistemas0 = adm.query("Select o from Sistemacalificacion as o " +
              " where o.trimestre.codigotrim = '"+ trime.getCodigotrim() +"' and  o.periodo.codigoper = '"+periodo.getCodigoper()+"'  and o.faltas = true  order by o.orden");

              Sistemacalificacion stodos = new Sistemacalificacion();
              stodos.setNombre("=>"+trime.getDescripcion()+"");
              int orden = 0;
              int codigo=0;
              if(sistemas0.size() >0 ){
                  orden = ((Sistemacalificacion) sistemas0.get(sistemas0.size()-1)).getOrden();
                  codigo = ((Sistemacalificacion) sistemas0.get(sistemas0.size()-1)).getCodigosis();

              }
              stodos.setOrden(orden);
              stodos.setCodigosis(codigo);
              stodos.setTrimestre(trime);
              sistemas.add(stodos);
              for (Iterator it2 = sistemas0.iterator(); it2.hasNext();){
                    Sistemacalificacion siste = (Sistemacalificacion) it2.next();
                    sistemas.add(siste);
               }

 }


 
String[][] values = new String[equivalen.size()][2];

          for (int i=0;i<equivalen.size();i++) {
             values[i][0]= ((Equivalencias)equivalen.get(i)).getAbreviatura();
             values[i][1]= "number";
           }
guardar(){
   if(guardando)
            return;
        guardando = true;
    disciplina nso = new disciplina();
    disciplina r = (disciplina) datos.getRows();
       Cursos curso = ((Cursos)curs.selectedItem.value);
         Sistemacalificacion sistema = (Sistemacalificacion)sisis.selectedItem.value;
                    Boolean seguir=true;
                    int mm = 1;
                    do{
                        System.out.println("******** Ingreso n: "+mm);
                        String ocupado = "Select o from Cursoocupado as o where o.curso = '" + curso.getCodigocur() + "' "
                                            + "and o.sistema = '" + sistema.getCodigosis() + "' ";
                        List ocupando = adm.query(ocupado);
                        if (ocupando.size() > 0) {
                                System.out.println("Esperando.... ");
                                seguir = true;
                                Thread.sleep(2000);
                        }else{
                            seguir = false;
                        }
                        mm++;
                    }while(seguir==true);  

                    Cursoocupado cO = new Cursoocupado(adm.getNuevaClave("Cursoocupado", "codigo"));
                    cO.setCurso(curso.getCodigocur());
                    cO.setSistema(sistema.getCodigosis());
                    cO.setTipo(2);
                    adm.guardar(cO);
    nso.guardar(r.getChildren(),((Cursos)curs.selectedItem.value),(Sistemacalificacion)sisis.selectedItem.value);
    //AL FINALIZAR EL PROCESO BORRO EL REGISTRO DE ÉSTE PROFESOR 
    adm.eliminarObjeto(Cursoocupado.class, cO.getCodigo());
    int a = Messagebox.show("Registro Almacenado con éxito...! \n ", "Administrador ", Messagebox.OK, Messagebox.QUESTION);
 guardando = false;

}


 Boolean verificar(String accion){
        return permiso.verificarPermiso("Registro de Faltas",accion);
 }


void buscar2(Cursos cur){
        List empleadosEncontrados = adm.query("Select o from MateriaProfesor as o where o.curso.codigocur = '"+cur.codigocur+"' and o.opcional = true order by o.orden");
        //bd2.getItems().clear();
        mates.getChildren().clear();
        
               for (Iterator it = empleadosEncontrados.iterator(); it.hasNext();) {
                      MateriaProfesor estudent = (MateriaProfesor) it.next();
                        Listitem item = new Listitem();
                        item.setValue(estudent);
                        item.appendChild(new Listcell(estudent.getMateria()+""));
                        mates.appendChild(item);
             }

    }
doAdd(Cursos curso){
 if(!verificar("Agregar")){
                guardar1.disabled=true;
                guardar2.disabled=true;
            }
Sistemacalificacion sistema = sisis.getSelectedItem().getValue();
        filas.addFaltas(curso,sistema);
}
]]>
</zscript>
<grid>
<rows>
 <row>

        <span style="float:right"> Sistema(*):</span>
  <span>
                    <listbox id="sisis" mold="select" width="420px"
                    onSelect="curs.setSelectedIndex(0)">
                        <listitem forEach="${sistemas}" value="${each}">
                              <listcell label="${each.nombre}" />

                        </listitem>
                    </listbox>
                    <button label="Guardar"  id="guardar1" image="/images/guardar.gif" onClick="guardar();"/>
  </span>

</row>
<row>
 <span style="float:right"> Curso(*):</span>

                    <listbox id="curs"  mold="select"  width="420px"
                    onSelect="doAdd(((Cursos)curs.selectedItem.value));">

                        <listitem forEach="${cursos}" value="${each}">
                              <listcell label="${each.descripcion} ${each.especialidad}  ${each.paralelo}" />

                        </listitem>
                    </listbox>

</row>

</rows>
</grid>
 <grid width="100%" id="datos"  >
         <columns>
             <column width="10%" label ="Mat."/>
             <column width="50%" label ="Estudiante"/>
             <column forEach="${values}"  width="20px"  label="${each[0]}" align="right"  />
 
         </columns>
         <rows  id="filas" use="bean.disciplina">
         </rows>
 </grid>
 <button label="Guardar"   id="guardar2"   image="/images/guardar.gif" onClick="guardar();"/>
  

</window>

	