
<zk xmlns="http://www.zkoss.org/2005/zul">
    <window title="Calificaciones que se muestran"  border="normal" >
        <zscript>

<![CDATA[
import bean.EventDAO;
import java.util.ArrayList;
import jcinform.persistencia.*;
import jcinform.procesos.Administrador;
import bean.Permisos;
import bean.notasRecalcular;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import bsh.Interpreter;
import bsh.EvalError;
  import java.math.BigDecimal;
static Sistemacalificacion empa = new Sistemacalificacion();
  Session ses = Sessions.getCurrent();
     Administrador adm = new Administrador();
Permisos permiso = new Permisos();
    Periodo per = (Periodo) ses.getAttribute("periodo");
    List trimestres = adm.query("Select o from Trimestres as o where o.periodo  = '"+per.getCodigoper()+"'  order by o.codigotrim  ");
 String redon = "public Double redondear(Double numero, int decimales) {" + "" + "try{" + "                java.math.BigDecimal d = new java.math.BigDecimal(numero);" + "        d = d.setScale(decimales, java.math.RoundingMode.HALF_UP);" + "        return d.doubleValue();" + "        }catch(Exception e){" + "            return 0.0;" + "        }" + "     }";
 String equival = "public Double equivalencia(Double numero) { try{" + "                java.math.BigDecimal d = new java.math.BigDecimal(numero);" + "  return d.doubleValue();" + "        }catch(Exception e){" + "            return 0.0;" + "        }" + "     }";
 String prom1 = "   Double promedio (Double va1, Double va2, Double va3, Double va4, Double va5, Double va6, Double va7, Double va8, Double va9, Double va10, Double va11, Double va12, Double va13, Double va14, Double va15, Double va16, Double va17){        int cont = 0;         if(va1 >0) cont++;  if(va2 >0) cont++;        if(va3 >0) cont++;         if(va4 >0) cont++;        if(va5 >0) cont++;        if(va6 >0) cont++;         if(va7 >0) cont++;        if(va8 >0) cont++;        if(va9 >0) cont++;         if(va10 >0) cont++;        if(va11 >0) cont++;        if(va12 >0) cont++;         if(va13 >0) cont++;        if(va14 >0) cont++;        if(va15 >0) cont++;         if(va16 >0) cont++;        if(va17 >0) cont++;         return (va1+va2+va3+va4+va5+va6+va7+va8+va9+va10+va11+va12+va13+va14+va15+va16+va17)/cont;     }"
            + "   Double promedio (Double va1, Double va2, Double va3, Double va4, Double va5, Double va6, Double va7, Double va8, Double va9, Double va10, Double va11, Double va12, Double va13, Double va14, Double va15, Double va16){         int cont = 0;         if(va1 >0) cont++;  if(va2 >0) cont++;        if(va3 >0) cont++;         if(va4 >0) cont++;        if(va5 >0) cont++;        if(va6 >0) cont++;         if(va7 >0) cont++;        if(va8 >0) cont++;        if(va9 >0) cont++;         if(va10 >0) cont++;        if(va11 >0) cont++;        if(va12 >0) cont++;         if(va13 >0) cont++;        if(va14 >0) cont++;        if(va15 >0) cont++;         if(va16 >0) cont++;                 return (va1+va2+va3+va4+va5+va6+va7+va8+va9+va10+va11+va12+va13+va14+va15+va16)/cont;     } "
            + "   Double promedio (Double va1, Double va2, Double va3, Double va4, Double va5, Double va6, Double va7, Double va8, Double va9, Double va10, Double va11, Double va12, Double va13, Double va14, Double va15){         int cont = 0;         if(va1 >0) cont++;  if(va2 >0) cont++;        if(va3 >0) cont++;         if(va4 >0) cont++;        if(va5 >0) cont++;        if(va6 >0) cont++;         if(va7 >0) cont++;        if(va8 >0) cont++;        if(va9 >0) cont++;         if(va10 >0) cont++;        if(va11 >0) cont++;        if(va12 >0) cont++;         if(va13 >0) cont++;        if(va14 >0) cont++;        if(va15 >0) cont++;         return (va1+va2+va3+va4+va5+va6+va7+va8+va9+va10+va11+va12+va13+va14+va15)/cont;     }"
            + "   Double promedio (Double va1, Double va2, Double va3, Double va4, Double va5, Double va6, Double va7, Double va8, Double va9, Double va10, Double va11, Double va12, Double va13, Double va14){          int cont = 0;         if(va1 >0) cont++;  if(va2 >0) cont++;        if(va3 >0) cont++;         if(va4 >0) cont++;        if(va5 >0) cont++;        if(va6 >0) cont++;         if(va7 >0) cont++;        if(va8 >0) cont++;        if(va9 >0) cont++;         if(va10 >0) cont++;        if(va11 >0) cont++;        if(va12 >0) cont++;         if(va13 >0) cont++;        if(va14 >0) cont++;         return (va1+va2+va3+va4+va5+va6+va7+va8+va9+va10+va11+va12+va13+va14)/cont;     } "
            + "   Double promedio (Double va1, Double va2, Double va3, Double va4, Double va5, Double va6, Double va7, Double va8, Double va9, Double va10, Double va11, Double va12, Double va13){         int cont = 0;         if(va1 >0) cont++;  if(va2 >0) cont++;        if(va3 >0) cont++;         if(va4 >0) cont++;        if(va5 >0) cont++;        if(va6 >0) cont++;         if(va7 >0) cont++;        if(va8 >0) cont++;        if(va9 >0) cont++;         if(va10 >0) cont++;        if(va11 >0) cont++;        if(va12 >0) cont++;         if(va13 >0) cont++;                return (va1+va2+va3+va4+va5+va6+va7+va8+va9+va10+va11+va12+va13)/cont;     } "
            + "   Double promedio (Double va1, Double va2, Double va3, Double va4, Double va5, Double va6, Double va7, Double va8, Double va9, Double va10, Double va11, Double va12){         int cont = 0;         if(va1 >0) cont++;  if(va2 >0) cont++;        if(va3 >0) cont++;         if(va4 >0) cont++;        if(va5 >0) cont++;        if(va6 >0) cont++;         if(va7 >0) cont++;        if(va8 >0) cont++;        if(va9 >0) cont++;         if(va10 >0) cont++;        if(va11 >0) cont++;        if(va12 >0) cont++;        return (va1+va2+va3+va4+va5+va6+va7+va8+va9+va10+va11+va12)/cont;     } "
            + "   Double promedio (Double va1, Double va2, Double va3, Double va4, Double va5, Double va6, Double va7, Double va8, Double va9, Double va10, Double va11){         int cont = 0;         if(va1 >0) cont++;  if(va2 >0) cont++;        if(va3 >0) cont++;         if(va4 >0) cont++;        if(va5 >0) cont++;        if(va6 >0) cont++;          if(va7 >0) cont++;        if(va8 >0) cont++;        if(va9 >0) cont++;         if(va10 >0) cont++;        if(va11 >0) cont++;          return (va1+va2+va3+va4+va5+va6+va7+va8+va9+va10+va11)/cont;    } "
            + "   Double promedio (Double va1, Double va2, Double va3, Double va4, Double va5, Double va6, Double va7, Double va8, Double va9, Double va10){         int cont = 0;          if(va1 >0) cont++;  if(va2 >0) cont++;        if(va3 >0) cont++;         if(va4 >0) cont++;        if(va5 >0) cont++;        if(va6 >0) cont++;         if(va7 >0) cont++;        if(va8 >0) cont++;        if(va9 >0) cont++;         if(va10 >0) cont++;                return (va1+va2+va3+va4+va5+va6+va7+va8+va9+va10)/cont;     } "
            + "   Double promedio (Double va1, Double va2, Double va3, Double va4, Double va5, Double va6, Double va7, Double va8, Double va9){         int cont = 0;         if(va1 >0) cont++;  if(va2 >0) cont++;        if(va3 >0) cont++;          if(va4 >0) cont++;        if(va5 >0) cont++;        if(va6 >0) cont++;         if(va7 >0) cont++;        if(va8 >0) cont++;        if(va9 >0) cont++;         return (va1+va2+va3+va4+va5+va6+va7+va8+va9)/cont;     } "
            + "   Double promedio (Double va1, Double va2, Double va3, Double va4, Double va5, Double va6, Double va7, Double va8){        int cont = 0;         if(va1 >0) cont++;  if(va2 >0) cont++;        if(va3 >0) cont++;         if(va4 >0) cont++;        if(va5 >0) cont++;        if(va6 >0) cont++;         if(va7 >0) cont++;        if(va8 >0) cont++;                 return (va1+va2+va3+va4+va5+va6+va7+va8)/cont;     } "
            + "   Double promedio (Double va1, Double va2, Double va3, Double va4, Double va5, Double va6, Double va7){         int cont = 0;         if(va1 >0) cont++;  if(va2 >0) cont++;        if(va3 >0) cont++;         if(va4 >0) cont++;        if(va5 >0) cont++;        if(va6 >0) cont++;         if(va7 >0) cont++;                 return (va1+va2+va3+va4+va5+va6+va7)/cont;    } "
            + "   Double promedio (Double va1, Double va2, Double va3, Double va4, Double va5, Double va6){         int cont = 0;         if(va1 >0) cont++;  if(va2 >0) cont++;        if(va3 >0) cont++;         if(va4 >0) cont++;        if(va5 >0) cont++;        if(va6 >0) cont++;          return (va1+va2+va3+va4+va5+va6)/cont;     }"
            + "   Double promedio (Double va1, Double va2, Double va3, Double va4, Double va5){         int cont = 0;         if(va1 >0) cont++;  if(va2 >0) cont++;        if(va3 >0) cont++;         if(va4 >0) cont++;        if(va5 >0) cont++;             return (va1+va2+va3+va4+va5)/cont;     } "
            + "   Double promedio (Double va1, Double va2, Double va3, Double va4){         int cont = 0;         if(va1 >0) cont++;  if(va2 >0) cont++;        if(va3 >0) cont++;    if(va4 >0) cont++;         return (va1+va2+va3+va4)/cont;     }  "
            + "   Double promedio (Double va1, Double va2, Double va3){         int cont = 0;         if(va1 >0) cont++;  if(va2 >0) cont++;        if(va3 >0) cont++;         return (va1+va2+va3)/cont;     } "
            + "   Double promedio (Double va1, Double va2){         int cont = 0;         if(va1 >0) cont++;  if(va2 >0) cont++;             return (va1+va2)/cont; } "
            + "   Double promedio (Double va1){         int cont = 0;         if(va1 >0) cont++;           return (va1)/cont; } ";
            
class SistemaTree extends Tree {
	public void onSelect() {

         Treeitem item = getSelectedItem();
    //     String menu = item.getId();

      //          if (item != null) {
        //            System.out.println((String)item.getValue());
          //      }

	}
	
}

  void verificarOrden(Integer valor){
      if(valor == null){
            orden.value = 0;
      }
            List empleados = adm.query("Select o from Sistemacalificacion as o " +
            " where o.orden = '"+ orden.value +"' and o.periodo.codigoper = "+per.getCodigoper()+" ");
            if(empleados.size()>0){
                Messagebox.show("Orden ya asignado a otro aporte, cambie por favor para continuar...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                orden.value = 0;
                orden.focus();
            }
    }



public  String disponible(){
   Field[] a = Notas.class.getDeclaredFields();
      ArrayList arregloTodos = new ArrayList();

       for (Field field : a) {
            if(field.getName().contains("nota") && !field.getName().equals("nota")){
                arregloTodos.add(field.getName());
            }
        }
 
        List  notassistemas = adm.query("Select o from Notanotas as o where o.sistema.periodo.codigoper = '"+ per.getCodigoper() +"'  ");
        ArrayList arregloAsignadas = new ArrayList();
        for (Notanotas notanotas : notassistemas) {
            arregloAsignadas.add(notanotas.getNota());
        }

    for (Iterator it2 = arregloAsignadas.iterator(); it2.hasNext();) {
        String aborrar  = it2.next().toString();
        int i = arregloTodos.indexOf(aborrar);
        //alert(i);
        if(i != -1)
                arregloTodos.remove(i);
            }
 
  return arregloTodos.get(0).toString();

}

        class MySimpleTreeNode extends SimpleTreeNode {
                private String myData = null;
                public MySimpleTreeNode(Object data, List children) {
                      super(data, children);
                      myData = data.toString();
                }

                public String toString() {
                     return "" + myData;
                }

                public void append(String data) {
                    myData = myData + data;
                }
                public String getData() {
                    return myData;
                }
        }

	public void onSele() {
  
         Treeitem item = tree.getSelectedItem();
         String menu  = item.getLabel();
         
            try{
                 menu = menu.substring(0, menu.indexOf("]"));
            }catch(Exception error){return;}
            
             menu= menu.replace("[","").replace("]", "");
                if (item != null) {
                        Sistemacalificacion encontrado = (Sistemacalificacion) adm.buscarClave(new Integer(menu),Sistemacalificacion.class);
                        llenar(encontrado);
                            Notanotas sis = (Notanotas) adm.querySimple("Select o from Notanotas as o where o.sistema.codigosis = '"+encontrado.getCodigosis()+"' ");
                            if(sis != null){
                                    codi.value = sis.getCodigo()+"";
                                    nota.value = sis.getNota();
                            }else{
                                codi.value = "0";
                               nota.value="";
                            }
                      eliminar.disabled=false;
                }


	}
 
    List aChildren = new ArrayList();
    List empty = new ArrayList();
    MySimpleTreeNode a0 = new MySimpleTreeNode("", empty);
    List children = new ArrayList();
    MySimpleTreeNode a = new MySimpleTreeNode("", empty);
          for(int t=0; t< trimestres.size(); t++) {
                    Trimestres tri = trimestres.get(t);
                    List sistemas = adm.query("Select o from Notanotas as o where o.sistema.trimestre.codigotrim = '"+tri.codigotrim+"' order by o.sistema.orden ");
                        aChildren = new ArrayList();
                        //+ (sis.getSistema().getFaltas()==true?"(F)":"")+
                        for(int i=0; i< sistemas.size(); i++) {
                                Notanotas sis = sistemas.get(i);
                                a0 = new MySimpleTreeNode("["+sis.getSistema().getCodigosis()+"]"+sis.getSistema().getNombre() +" ["+sis.getNota()+"()]", empty);
                                aChildren.add(a0);
                       }
	                a = new MySimpleTreeNode(""+tri.getDescripcion(), aChildren);
                    children.add(a);
	       }
       MySimpleTreeNode r = new MySimpleTreeNode("Sistema", children);
       SimpleTreeModel stm = new SimpleTreeModel(r);



public void llenarArbol(){

      aChildren = new ArrayList();
      empty = new ArrayList();
      a0 = new MySimpleTreeNode("", empty);
      children = new ArrayList();
      a = new MySimpleTreeNode("", empty);
          for(int t=0; t< trimestres.size(); t++) {
                    Trimestres tri = trimestres.get(t);
                    List sistemas = adm.query("Select o from Notanotas as o where o.sistema.trimestre.codigotrim = '"+tri.codigotrim+"' order by o.sistema.orden ");
                        aChildren = new ArrayList();
                        for(int i=0; i< sistemas.size(); i++) {
                                Notanotas sis = sistemas.get(i);
                               a0 = new MySimpleTreeNode("["+sis.getSistema().getCodigosis()+"]"+sis.getSistema().getNombre() +" ["+sis.getNota()+"()]", empty);
                                aChildren.add(a0);
                       }
	                a = new MySimpleTreeNode(""+tri.getDescripcion(), aChildren);
                    children.add(a);
	       }
         r = new MySimpleTreeNode("Sistema", children);
        
    int a=0;
int tamanio = tree.getTreechildren().getChildren().size();
        for (int k = 0; k<tamanio; k++) {
            tree.getTreechildren().getChildren().remove(a);
        }
         stm = new SimpleTreeModel(r);
            tree.setModel(stm);
}
     


Object media = null;
  public void mostrarTodos(){
  try{
       		int l = tree.getTreechildren().getChildren().size();
            int total = tree.getItemCount();

	       for(int i=0; i<l; i++) {
                    try{
                        for(int m=0;m<total;m++){
                            int[] path ={m,i};
                            tree.renderItemByPath(path);
                        }
                    }finally{}
	               
	       }
           }catch(Exception ea){System.out.println("aportes: index-1:"+ea);}
       }



//FUNCIONES
void llenar(Sistemacalificacion empa){

   codigo.value =empa.getCodigosis();
    nombre.value = empa.getNombre();
    abreviatura.value = empa.getAbreviatura();
    desde.value = empa.getFechainicial();
    hasta.value = empa.getFechafinal();
    desdei.value = empa.getFechainti();
    hastai.value = empa.getFechaintf();
    orden.value = empa.getOrden();
    seimprime.checked = empa.getSeimprime();
    esdisciplina.checked = empa.getEsdisciplina();
    faltas.checked = empa.getFaltas();
    requerida.checked = empa.getRequerida();
    espromedio.checked = empa.getEspromedio();
    ensupletorio.checked = empa.getEnsupletorio();
    esequivalencia.checked = empa.getEsequivalencia();
    formula.value = empa.getFormula();
    formuladisciplina.value = empa.getFormuladisciplina();
    //formulafaltas.value = empa.getFormulafaltas();
    try{
      if(empa.getNotalimite().equals(null))
        empa.setNotalimite(0.0);
    }catch(Exception aa){
        empa.setNotalimite(0.0);
    }

    try{
      if(empa.getConduca().equals(null))
        empa.setConduca(0.0);
    }catch(Exception aa){
        empa.setConduca(0.0);
    }

        BigDecimal mini = new BigDecimal(empa.getNotalimite());
        aprovechamiento.value = mini;
         mini = new BigDecimal(empa.getConduca());
        conducta.value = mini;
        if(empa.getPromediofinal().equals("NI")){
            ninguno.selected = true;
        }else if(empa.getPromediofinal().equals("PG")){
        promediogeneral.selected = true;
        }else if(empa.getPromediofinal().equals("PF")){
        promediofinal.selected = true;
        }else if(empa.getPromediofinal().equals("SU")){
            supletorio.selected = true;
        }else if(empa.getPromediofinal().equals("SM")){
            sumatoria.selected = true;
        }

        if(empa.getTrimestre()!=null){
         for (int i = 0; i <= trime.getItems().size(); i++) {
                    Trimestres tr0 = ((Trimestres)((Listitem)trime.getItems().get(i)).getValue());
                    int primero = tr0.getCodigotrim();
                    int segundo = empa.getTrimestre().getCodigotrim();
                    if(primero == segundo){
                        trime.setSelectedItem((Listitem)trime.getItems().get(i));
                        break;
                    }
                }
        }
}
void estado(Boolean estado,Boolean modificar){
        if(modificar){
            
        }

    nombre.readonly = estado;
    abreviatura.readonly = estado;
    desde.disabled = estado;
    hasta.disabled = estado;
    desdei.disabled = estado;
    hastai.disabled = estado;
    seimprime.disabled = estado;
    esdisciplina.disabled = estado;
    aprovechamiento.readonly = estado;
    //disciplina.disabled = estado;
    faltas.disabled = estado;
    requerida.disabled = estado;
    orden.readonly = estado;
    trime.disabled = estado;
    tipo.disabled= estado;
    formula.readonly= estado;
    formuladisciplina.readonly = estado;
    //formulafaltas.disabled = estado;
conducta.readonly =estado;
espromedio.disabled= estado;
ensupletorio.disabled= estado;
esequivalencia.disabled= estado;
}


 void guardar(){

 if(verificar2() || verificar3() || verificar4()){
 //Messagebox.show("UNA DE LAS FORMULAS INGRESADAS ESTÁN INCORRECTAS...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
 return;
 }
   if(nombre.value=="" || abreviatura.value=="" || desde.value=="" || hasta.value=="" || desdei.value=="" || hastai.value=="" || aprovechamiento.value=="" || orden.value== null || orden.value== 0){
    Messagebox.show("Ingrese los campos con (*) para continuar...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    return;
 }

        empa.setCodigosis(codigo.value);
        empa.setNombre(nombre.value);
        empa.setAbreviatura(abreviatura.value);
        empa.setFechainicial(desde.value);
        empa.setFechafinal(hasta.value);
        empa.setFechainti(desdei.value);
        empa.setFechaintf(hastai.value);
        empa.setNotalimite((aprovechamiento.value).doubleValue());
        empa.setConduca((conducta.value).doubleValue());
        empa.setSeimprime(seimprime.checked);
        empa.setEsdisciplina(esdisciplina.checked);
        empa.setFaltas(faltas.checked);
        empa.setRequerida(requerida.checked);
        empa.setEspromedio(espromedio.checked);
        empa.setEnsupletorio(ensupletorio.checked);
        empa.setEsequivalencia(esequivalencia.checked);

        empa.setOrden(orden.value);
        try{
            empa.setPromediofinal(promedios.selectedItem.value);
            
        }catch(Exception e){
        Messagebox.show("Seleccione el Tipo de nota...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                    return;
        }
        

        empa.setFormula(formula.value);
        empa.setFormuladisciplina(formuladisciplina.value);
        //empa.setFormulafaltas(formulafaltas.value);
        Periodo per = (Periodo) ses.getAttribute("periodo");
        empa.setPeriodo(per);
        empa.setTrimestre(trime.selectedItem.value);

         if((!empa.getCodigosis().equals(0) && !empa.getCodigosis().equals("")) ){
             adm.actualizar(empa);
 
         }else{
            empa.setCodigosis(adm.getNuevaClave("Sistemacalificacion","codigosis"));
             adm.guardar(empa);
             //llenarArbol();
            //mostrarTodos();

         }

         if((!codi.value.equals(0)) ){
            Notanotas nueva = new Notanotas(new Integer(codi.value));
            nueva.setNota(nota.value);
            nueva.setSistema(empa);
            adm.actualizar(nueva);
         }else{
            Notanotas nueva = new Notanotas();
            nueva.setNota(nota.value);
            nueva.setSistema(empa);
            nueva.setCodigo(adm.getNuevaClave("Notanotas","codigo"));
            adm.guardar(nueva);
         }
         permiso.auditar("Aportes","Guardar",""+nombre.value);
llenarArbol();
mostrarTodos();
                    guardar.disabled=true;
                    agregar.disabled=false;
                    estado(true,false);
                    llenar(new Sistemacalificacion(0));
                    anadirSubAportes.disabled = true;


    }

   Boolean verificar(String accion){
        return permiso.verificarPermiso("Aportes",accion);

    }
 void nuevo(){
    if(verificar("Agregar")){
        guardar.disabled=false; 
        llenar(new Sistemacalificacion(0));
        estado(false,false);
        nota.value = disponible();
        codi.value = "0";
    }else{
            Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    }
}
 void move(){
        llenar((Sistemacalificacion)datos.selectedItem.value);
        modificar.disabled = false;
  }
void modificar(){
  if(verificar("Modificar")){
       guardar.disabled=false; estado(false,true);
       anadirSubAportes.disabled = false;
    }else{
    anadirSubAportes.disabled = true;
            Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    }
}
void eliminar(){
  if(verificar("Eliminar")){
  int val = Messagebox.show("¿Seguro de eliminar, puede causar la pérdida de notas, si ya tiene registrado?", "Seguridad",  Messagebox.YES | Messagebox.NO, Messagebox.QUESTION);
  if(val == 16){

                    try{
                         adm.eliminarObjeto(Notanotas.class, new Integer(codi.value));
                         adm.eliminarObjeto(Sistemacalificacion.class, codigo.value);
                            permiso.auditar("Aportes","Eliminar",""+nombre.value);
                         llenarArbol();
                        mostrarTodos();
                         Messagebox.show("Registro Eliminado con Éxito...!", "Administrador Educativo", Messagebox.OK, Messagebox.INFORMATION);
                    }catch(Exception e){
                        Messagebox.show("No se pudo eliminar el Registro...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                    }
        }
    }else{
            Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    }
}
void recalcular(){
   
  int val = Messagebox.show("¿Seguro que Desea aplicar el Nuevo Sistema de Calificaciones, este proceso puede tardar varios minutos, No cierre el navegador hasta terminar el proceso", "Seguridad",  Messagebox.YES | Messagebox.NO, Messagebox.QUESTION);
    if(val == 16){

                    try{
                          notasRecalcular n = new notasRecalcular();
                          val = Messagebox.show("¿Desea la Confirmación para Cada Curso?", "Seguridad",  Messagebox.YES | Messagebox.NO, Messagebox.QUESTION);
                            if(val == 16){
                                n.calcularSistema(true);  
                            }else{
                                n.calcularSistema(false);  
                            }
                          
                         Messagebox.show("Proceso Terminado con Éxito...!", "Administrador Educativo", Messagebox.OK, Messagebox.INFORMATION);
                    }catch(Exception e){
                        Messagebox.show("No se pudo relizar el Proceso...."+e, "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                    }
        }
    
}
 
  void buscar(String p){
        List empleadosEncontrados = adm.query("Select o from Sistemacalificacion as o where o.apellidos like '%"+p+"%' order by o.apellidos");
        datos = new Listbox();
        int a=0;
               for(Iterator it = datos.getItems().iterator(); it.hasNext();) {
                    datos.getItems().remove(a);
                }
               for (Iterator it = empleadosEncontrados.iterator(); it.hasNext();) {
                      Sistemacalificacion acceIt = (Sistemacalificacion) it.next();
                      Listitem li = new Listitem();
                      li.setValue(acceIt);
                      li.appendChild(new Listcell(acceIt.getIdentificacion()+""));
                      li.appendChild(new Listcell(acceIt.getApellidos()+" "+acceIt.getNombres()));
                      li.appendChild(new Listcell(acceIt.getDireccion()+""));
                      datos.appendChild(li);
             }

    }
void cargar(Trimestres g){
    empa.setTrimestre(g);
}

public Boolean verificar2(){ //VERIFICO SI EL APROVEHCAMIENTO ESTA BIEN INGRESADO
    String formula1 = formula.value;
     Periodo periodo = per;
  
    if(formula1.equals("")){
        return false;
    }
        List notas = adm.query("Select o from Notanotas as o where o.sistema.periodo.codigoper = '"+periodo.getCodigoper()+"' order by o.sistema.orden ");
        Interpreter inter = new Interpreter();
         try {
             inter.eval(redon);
             inter.eval(prom1);
             inter.eval(equival);
              Notas nota = new Notas();
              inter.set("nota", nota);
              for(int x =1;x<91;x++){ //LLENO LOS DATOS DE LAS NOTANOTAS CON 1.0
                    String llena = "nota.setNota"+x+"(1.0);";
                    inter.eval(llena);
              }
            String formuPrevia = formula1.replace("nota","nota.getNota");
            try{
            inter.eval(formuPrevia);
            }catch(Exception e1){
                    Messagebox.show("ERROR EN FORMULA DE APROVECHAMIENTO...! \n Revise los '()' o que sea una nota valida ", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                    return true;
            }

           formula1 = formula1.replace("()","");
        for (Iterator it = notas.iterator(); it.hasNext();) {
                     Notanotas notanotas = (Notanotas)it.next();
                    inter.eval(""+notanotas.getNota()+"=1;");
        }
         inter.eval(formula1+"*1");
       
      } catch (EvalError ex) {
      System.out.println(".........."+ex);
          Messagebox.show("ERROR EN FORMULA DE APROVECHAMIENTO...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
          return true;
      } 
        return false;
}
public Boolean verificar3(){
    String formula1 = formuladisciplina.value;
     Periodo periodo = per;

 
    if(formula1.equals("")){
            return false;
        }



               List notas = adm.query("Select o from Notanotas as o where o.sistema.esdisciplina = true and o.sistema.periodo.codigoper = '"+periodo.getCodigoper()+"' order by o.sistema.orden ");
        Interpreter inter = new Interpreter();
         try {
             inter.eval(redon);
             inter.eval(prom1);
             inter.eval(equival);
                
                Notas nota = new Notas();
              inter.set("nota", nota);
              for(int x =1;x<91;x++){ //LLENO LOS DATOS DE LAS NOTANOTAS CON 1.0
                    String llena = "nota.setNota"+x+"(1.0);";
                    inter.eval(llena);
              }
            String formuPrevia = formula1.replace("nota","nota.getNota");
            try{
            inter.eval(formuPrevia);
            }catch(Exception e1){
                    Messagebox.show("ERROR EN FORMULA DE APROVECHAMIENTO...! \n Revise los '()' o que sea una nota valida ", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                    return true;
            }
   formula1 = formula1.replace("()","");
        for (Iterator it = notas.iterator(); it.hasNext();) {
                     Notanotas notanotas = (Notanotas)it.next();
                    inter.eval(""+notanotas.getNota()+"=1;");
        }
         inter.eval(formula1+"*1");
       
      } catch (EvalError ex) {
          Messagebox.show("ERROR EN FORMULA DE DISCIPLINA...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
          return true;
      }
        return false;
}

public Boolean verificar4(){
   /* String formula1 = formulafaltas.value;
if(formula1.equals("")){
    return false;
}
     Periodo periodo = per;
    formula1 = formula1.replace("()","");
       
        List notas = adm.query("Select o from Notanotas as o where o.sistema.faltas = true and o.sistema.periodo.codigoper = '"+periodo.getCodigoper()+"' order by o.sistema.orden ");
           
        Interpreter inter = new Interpreter();
         try {
             inter.eval(redon);
             inter.eval(prom1);
             inter.eval(equival);
        for (Iterator it = notas.iterator(); it.hasNext();) {

                     Notanotas notanotas = (Notanotas)it.next();
                    inter.eval(""+notanotas.getNota()+"=1;");
        }
         inter.eval(formula1+"*1");
         
      } catch (EvalError ex) {
          Messagebox.show("ERROR EN FORMULA DE FALTAS...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
          return true;
      }*/
        return false;
}

        ]]>

        </zscript>

        <borderlayout height="450px">
            <west autoscroll="true" maxsize="300" size="38%" splittable="true" collapsible="true">
                <span>
                    <button    id="llsenar" image="/images/expandir.png" label="Expandir"   onClick="mostrarTodos();"/>
                    <tree model="${stm}" onLoad="mostrarTodos();" onSelect="onSele();modificar.disabled= false;estado(true,false);"
                          use="SistemaTree" id="tree" width="100%"    zclass="z-vfiletree"
                          vflex="true" height="400px" >
                    </tree>
                </span>
        
            </west>



            <center flex="true">
 
                <grid width="100%">
                    <rows>

                        <row>
                            <span style="float:right"> Nombres(*):</span>
                            <span>
                                <intbox id="codigo"  maxlength="60" cols="3" readonly="true"   />
                                <textbox id="nombre"  maxlength="60" cols="30" readonly="true"   />  
                            </span>  
                        </row>
                        <row> 
                            <span style="float:right"> Abreviatura(*):</span>
                            <textbox id="abreviatura"  maxlength="10" cols="20" readonly="true"  /> 
                        </row>
                        <row> 
                            <span style="float:right"> Pase de Notas(*):</span> 
                            <span>Desde: 
                                <datebox format="dd/MMM/yyyy" id="desde"/> Hasta:
                                <datebox  format="dd/MMM/yyyy"  id="hasta"/>
                            </span>
                        </row>
                        <row> 
                            <span style="float:right"> Pase de Secretaria(*):</span> 
                            <span>Desde: 
                                <datebox format="dd/MMM/yyyy" id="desdei"/> Hasta:
                                <datebox  format="dd/MMM/yyyy"  id="hastai"/>
                            </span>
                        </row>
                        <row> 
                            <span style="float:right"> Límite de Notas(*):</span>
                            <span>Aprovechamiento:
                                <decimalbox id="aprovechamiento" maxlength="5" cols="5"  format="#,##0.##"/> Disciplina:
                                <decimalbox id="conducta" maxlength="5" cols="5" format="#,##0.##"/> 
                            </span>
                        </row>
                        <row spans="2"> 
                            <span style="float:center" >
                                <separator bar="false" orient="vertical"  />
                                <separator bar="false" orient="vertical"  />
                                <separator bar="false" orient="vertical"  />
                                <separator bar="false" orient="vertical" />
                                <checkbox label="Imprime en Reportes" id="seimprime"/> 
                                <separator bar="true" orient="vertical" />
        
                                <checkbox id="esdisciplina" label="Ingresa Disciplina" />
                                <separator bar="true" orient="vertical" />
         
                                <checkbox label="Ingresa Faltas" id="faltas"/>     
                                <separator bar="true" orient="vertical" />
                                
                                <checkbox label="Es Requerida" id="requerida"/>     
                                <separator bar="true" orient="vertical" />
                            </span>
                        </row>

                        <row> 
                            <span style="float:right"> Orden(*):</span>
                            <span>
                                <intbox id="orden" cols="5"  onChange="verificarOrden(self.value)" />
                                <separator bar="true" orient="vertical" />
                                <checkbox id="espromedio" label="Impr. en Prom Final"/> 
                                <separator bar="true" orient="vertical" />
                                <checkbox id="esequivalencia" label="Es Equivalencia"/> 
                                <separator bar="true" orient="vertical" />
                                <checkbox id="ensupletorio" label="Impr.Supletorios"/> 
                                <separator bar="true" orient="vertical" />
                                
                            </span>
                        </row>
                        <row> 
                            <span style="float:right"> Tipo de Nota:</span>
                            <span>
                                <radiogroup id="promedios">
                                    <radio id="sumatoria" value="SM" label="Sumatoria"/>
                                    <radio id="promediogeneral" value="PG" label="Prom.Gen."/>
                                    <radio id="promediofinal" value="PF"  label="Prom.Final"/>
                                    <radio id="supletorio"  value="SU" label="Suplet."/>
                                    <radio id="ninguno"  value = "NI" label="Ninguno"/>
                                </radiogroup>
                            </span>
                        </row>

 
                        <row> 
                            <span style="float:right"> Trimestre:</span>

                            <listbox mold="select" id="trime" width="250px" onSelect="cargar(((Trimestres)self.selectedItem.value));">
                                <listhead>
                                    <listheader label="Description"/>
                                </listhead>
                                <listitem selected="true" forEach="${trimestres}" value="${each}">
                                    <listcell label="${each.descripcion}" />

                                </listitem>
                            </listbox>
		 

                        </row>
                        <row>
                            <span style="float:right"> Form. Aprov.:</span>
                            <span>
                                <textbox id="formula" rows="2" cols="30" />
                                <button id="verificar"  image="/images/ok.gif"   onClick="verificar2();"/>
                                <image src="/images/information.png" height="22px" width="22px" tooltip="mailt" popup="mailt" style="cursor: pointer" />
                                <popup id="mailt" width="300px">
                                    <html>
    &lt;p&gt; Suma dos notas y divide para dos Ejem.: (nota1()+nota2())/2  &lt;/p&gt;
    &lt;p&gt; Suma dos notas y divide para el # de notas ingresadas Ejm.: promedio(nota1(),nota2()) &lt;/p&gt;
   &lt;p&gt;  Redondea el valor de una nota a cero decimales Ejm.: redondear(nota1(),0) &lt;/p&gt;
   &lt;p&gt;  La Equivalencia sirve para mostrar el valor de una nota en forma Cualitativa 20 = S, 18= MB Ejm.: equivalencia(nota1()) &lt;/p&gt;

                                    </html>
                                </popup>
                            </span>
                        </row>
                        <row>
                            <span style="float:right"> Form. Disc.:</span>
                            <span>
                                <textbox id="formuladisciplina" rows="2" cols="30" />
                                <button id="verificar3"  image="/images/ok.gif"  onClick="verificar3();"/>
                                <image src="/images/information.png" height="22px" width="22px" tooltip="mailt" popup="mailt" style="cursor: pointer" />
                            </span>
                        </row>
 
                        <row>
                            <span style="float:right"> Codigo:</span>
                            <span> 
                                <textbox readonly="true" cols="2"  id="codi"   />
                                Campo:
                                <textbox readonly="true" id="nota" cols="10" />
                            </span>
                        </row>
                    

                        <row spans="2" >
                            <span style="float:center">

                                <button image="/images/guardar.gif" id="guardar" label="Guardar"  disabled="true"  onClick="guardar();"/>
                                <button  image="/images/nuevo.gif" id="agregar" label="Agregar" onClick="nuevo();" />
                                <button  image="/images/editar.gif" id="modificar"  label="Modificar" disabled="true"  onClick="modificar()"/>
                                <button  image="/images/eliminar.gif" id="eliminar"  label="Eliminar" disabled="true"  onClick="eliminar();"/>
                                <button  image="/images/run.gif"  id="recalcular"  label="RECALCULAR" disabled="false"  onClick="recalcular();"/>
                              
                                <button label="Añadir SubAportes" disabled="true" id="anadirSubAportes" image="/images/editar.gif" >
                                    <attribute name="onClick">{
                                final Window win = (Window) Executions.createComponents("evaluacionSub.zul", null, null);
                                win.setMaximizable(true);
                                win.setClosable(true);
                                win.setAttribute("codigo", codigo.value);
                                win.setTitle("AÑADIR SUB REPORTES");
                                win.doModal();
                            }                            
                                    </attribute>
                                </button>
                              
                                
                              
                            </span>
                        </row>


                    </rows>
                </grid>




            </center>
        </borderlayout>
    </window>
</zk>