<?xml version="1.0" encoding="UTF-8"?>
<window    onCreate="cargando();"    height="100%" border="normal"
         >
    <zk xmlns="http://www.zkoss.org/2005/zul" >

        <zscript>
            <![CDATA[
import sources.CustomDataSource;
import net.sf.jasperreports.engine.JRDataSource;
import sources.*;
import bean.notas;
import java.math.BigDecimal;
import bean.notas;
import jcinform.persistencia.*;
import jcinform.procesos.Administrador;

import java.util.Date;
import org.joda.time.DateMidnight;
import org.zkoss.zul.Listbox;
import bean.Permisos;

Permisos per = new Permisos();
Administrador adm = new Administrador();
Session ses = Sessions.getCurrent();
Periodo periodo = (Periodo) ses.getAttribute("periodo");

Empleados user = (Empleados)ses.getAttribute("user");
    List cursos = null;

    if(user.getTipo().equals("Interna")){
        cursos = adm.query("Select o from Cursos as o where o.periodo.codigoper = '"+periodo.getCodigoper()+"' ");
    }else{
        cursos = adm.query("Select distinct o.curso from MateriaProfesor as o where o.empleado.codigoemp = '"+user.getCodigoemp()+"'  and o.curso.periodo.codigoper = '"+periodo.getCodigoper()+"' ");
    }

Cursos selec = new Cursos(-1);
selec.setDescripcion("[Seleccione]");
cursos.add(0,selec);

Cursos todos = new Cursos(-2);
todos.setDescripcion("[TODOS]");

if(user.getTipo().equals("Interna"))
    cursos.add(todos);


List materias = adm.query("Select o from Global as o where o.grupo = 'MAT' ");
void buscar2(Cursos cur){

    }
 public JRDataSource inscritos(String tipo){
      Administrador adm = new Administrador();
      Session ses = Sessions.getCurrent();
      ArrayList detalle = new ArrayList();
        String query = "SELECT mat FROM Matriculas AS mat " +
                "WHERE  mat.estado =  '"+tipo+"' " +
                "and mat.curso.periodo.codigoper = '" + periodo.getCodigoper() + "' " +
                " order by mat.curso.secuencia, mat.curso.codigocur, mat.estudiante.apellido, mat.estudiante.nombre";
      List hoy = adm.query(query);
      for(Iterator it = hoy.iterator(); it.hasNext();) {
            Matriculas elem = (Matriculas) it.next();
            detalle.add(elem);
      }
      ReporteInscritosDataSource ds = new ReporteInscritosDataSource(detalle);
      return ds;
}
public JRDataSource certificados(Cursos curso,String tipo){
      Administrador adm = new Administrador();
      Session ses = Sessions.getCurrent();
                    ArrayList detalle = new ArrayList();
                    String query = "SELECT mat FROM Matriculas AS mat " +
                            "WHERE  mat.estado in ('Matriculado','Recibir Pase','Retirado','Emitir Pase') " +
                            "and mat.curso.periodo.codigoper = '" + periodo.getCodigoper() + "' " +
                            " order by mat.curso.secuencia, mat.curso.codigocur, mat.estudiante.apellido,mat.estudiante.nombre";
                    if (!curso.getCodigocur().equals(-2)) {
                        query = "Select o from Matriculas as o " +
                                "where o.curso.periodo.codigoper = '" + periodo.getCodigoper() + "' " +
                                "and o.curso.codigocur = '" + curso.getCodigocur() + "' " +
                                " and o.estado in ('Matriculado','Recibir Pase','Retirado','Emitir Pase') order by o.curso.secuencia,o.estudiante.apellido,o.estudiante.nombre";
                    }

                    List hoy = adm.query(query);
                    for (Iterator it = hoy.iterator(); it.hasNext();) {
                        Matriculas elem = (Matriculas) it.next();
                        detalle.add(elem);
                    }
                JRDataSource ds = null;
                if(tipo.equals("CM")){
                     ds = new ReporteCertificadoDataSource(detalle);
                }else if(tipo.equals("CM2") || tipo.equals("LTRAN") || tipo.equals("LINT")  || tipo.equals("LNUEV") || tipo.equals("LMIN")  || tipo.equals("LFEC")  || tipo.equals("LGENT")  || tipo.equals("LGEN")  || tipo.equals("LASI")  || tipo.equals("LCA")  || tipo.equals("LCAS")  || tipo.equals("AM")  || tipo.equals("LMAT")  || tipo.equals("LCLA")   || tipo.equals("LCLA2") || tipo.equals("LCOR")  || tipo.equals("LREP")  || tipo.equals("LCAR1") || tipo.equals("LCAR")){
                      ds = new ReporteActaDataSource(detalle);
                }

            return ds;

}

public JRDataSource pases(Cursos curso,String tipo){
      Administrador adm = new Administrador();
      Session ses = Sessions.getCurrent();
                    ArrayList detalle = new ArrayList();
                    String query = "SELECT mat FROM Matriculas AS mat " +
                            "WHERE  mat.estado in ('Recibir Pase') " +
                            "and mat.curso.periodo.codigoper = '" + periodo.getCodigoper() + "' " +
                            " order by mat.curso.secuencia, mat.curso.codigocur, mat.estudiante.apellido, mat.estudiante.nombre";
                    if (!curso.getCodigocur().equals(-2)) {
                        query = "Select o from Matriculas as o " +
                                "where o.curso.periodo.codigoper = '" + periodo.getCodigoper() + "' " +
                                "and o.curso.codigocur = '" + curso.getCodigocur() + "' " +
                                " and o.estado in ('Recibir Pase') order by o.curso.secuencia,o.estudiante.apellido,o.estudiante.nombre";
                    }

                    List hoy = adm.query(query);
                    for (Iterator it = hoy.iterator(); it.hasNext();) {
                        Matriculas elem = (Matriculas) it.next();
                        detalle.add(elem);
                    }
                JRDataSource ds = new ReporteActaDataSource(detalle);
                

            return ds;

}

public JRDataSource transporte(Cursos curso,String tipo){
      Administrador adm = new Administrador();
      Session ses = Sessions.getCurrent();
                    ArrayList detalle = new ArrayList();
                    if(tipo.equals("LTRAN")){
                        String query = "SELECT mat FROM Matriculas AS mat " +
                                "WHERE  mat.estado  in ('Matriculado','Recibir Pase','Retirado','Emitir Pase') " +
                                "and mat.curso.periodo.codigoper = '" + periodo.getCodigoper() + "' and  mat.estudiante.transporte = true  " +
                                " order by mat.curso.secuencia, mat.curso.codigocur, mat.estudiante.apellido, mat.estudiante.nombre";
                        if (!curso.getCodigocur().equals(-2)) {
                            query = "Select o from Matriculas as o " +
                                    "where o.curso.periodo.codigoper = '" + periodo.getCodigoper() + "' " +
                                    "and o.curso.codigocur = '" + curso.getCodigocur() + "' and o.estudiante.transporte = true  order by o.curso.secuencia, o.curso.codigocur, o.estudiante.apellido,o.estudiante.nombre";
                        }

                        List hoy = adm.query(query);
                        for (Iterator it = hoy.iterator(); it.hasNext();) {
                            Matriculas elem = (Matriculas) it.next();
                            detalle.add(elem);
                        }
                    }else if(tipo.equals("LCART")){
                        String query = "SELECT mat FROM Matriculas AS mat " +
                                    "WHERE  mat.estado  in ('Matriculado','Recibir Pase','Retirado','Emitir Pase') " +
                                    "and mat.curso.periodo.codigoper = '" + periodo.getCodigoper() + "' " +
                                    " order by mat.curso.secuencia, mat.curso.codigocur, mat.estudiante.apellido, mat.estudiante.nombre";
                            if (!curso.getCodigocur().equals(-2)) {
                                query = "Select o from Matriculas as o " +
                                        "where o.curso.periodo.codigoper = '" + periodo.getCodigoper() + "' " +
                                        "and o.curso.codigocur = '" + curso.getCodigocur() + "'  order by o.curso.secuencia, o.curso.codigocur, o.estudiante.apellido,o.estudiante.nombre ";
                            }

                            List hoy = adm.query(query);
                            for (Iterator it = hoy.iterator(); it.hasNext();) {
                                Matriculas elem = (Matriculas) it.next();
                                detalle.add(elem);
                            }

                    }
                JRDataSource ds = new ReporteActaDataSource(detalle);


            return ds;

}
public JRDataSource nuevos(Cursos curso,String tipo){
      Administrador adm = new Administrador();
      Session ses = Sessions.getCurrent();
                    ArrayList detalle = new ArrayList();
                    String query = "SELECT mat FROM Matriculas AS mat " +
                            "WHERE  mat.estado  in ('Matriculado','Recibir Pase','Retirado','Emitir Pase') " +
                            "and mat.curso.periodo.codigoper = '" + periodo.getCodigoper() + "' and  mat.nuevo = true  " +
                            " order by mat.curso.secuencia, mat.curso.codigocur, mat.estudiante.apellido, mat.estudiante.nombre";
                    if (!curso.getCodigocur().equals(-2)) {
                        query = "Select o from Matriculas as o " +
                                "where o.curso.periodo.codigoper = '" + periodo.getCodigoper() + "' " +
                                "and o.curso.codigocur = '" + curso.getCodigocur() + "' and o.nuevo = true ";
                    }

                    List hoy = adm.query(query);
                    for (Iterator it = hoy.iterator(); it.hasNext();) {
                        Matriculas elem = (Matriculas) it.next();
                        detalle.add(elem);
                    }
                JRDataSource ds = new ReporteActaDataSource(detalle);


            return ds;

}

public JRDataSource internos(Cursos curso,String tipo){
      Administrador adm = new Administrador();
      Session ses = Sessions.getCurrent();
                    ArrayList detalle = new ArrayList();
                    String query = "SELECT mat FROM Matriculas AS mat " +
                            "WHERE  mat.estado  in ('Matriculado','Recibir Pase','Retirado','Emitir Pase') " +
                            "and mat.curso.periodo.codigoper = '" + periodo.getCodigoper() + "' and  mat.estudiante.adventista = true  " +
                            " order by mat.curso.secuencia, mat.curso.codigocur, mat.estudiante.apellido, mat.estudiante.nombre";
                    if (!curso.getCodigocur().equals(-2)) {
                        query = "Select o from Matriculas as o " +
                                "where o.curso.periodo.codigoper = '" + periodo.getCodigoper() + "' " +
                                "and o.curso.codigocur = '" + curso.getCodigocur() + "' and o.estudiante.adventista = true ";
                    }

                    List hoy = adm.query(query);
                    for (Iterator it = hoy.iterator(); it.hasNext();) {
                        Matriculas elem = (Matriculas) it.next();
                        detalle.add(elem);
                    }
                JRDataSource ds = new ReporteActaDataSource(detalle);


            return ds;

}


        void showReport() {
            //Preparing parameters

//LCAS,LCA,LASI.LGEN,LGENT,LFEC,LMIN
            //conanioscumplidos
            String tipo = reporte.getSelectedItem().getValue();

rep.setOpen(true);parametros.setOpen(false);
            Institucion insts = periodo.getInstitucion();
            Map parametros = new HashMap();
            parametros.put("denominacion", insts.getDenominacion());
            parametros.put("nombre", insts.getNombre());
            parametros.put("periodo", periodo.getDescripcion());
            parametros.put("slogan", insts.getSlogan());
            parametros.put("secretaria", insts.getSecretaria());
            parametros.put("rectora", insts.getRector());


            JRDataSource datasource = null;
            if(tipo.equals("CM")){
                    datasource = certificados((Cursos)curs.getSelectedItem().getValue(),"CM");
                    report.setSrc("WEB-INF/reportes/certificadoMatricula.jasper");
                    parametros.put("titulo", "Certificado de Matricula");
            }else if(tipo.equals("CM2")){
                    datasource = certificados((Cursos)curs.getSelectedItem().getValue(),"LREP");
                    parametros.put("titulo", titulo.getValue());
                    report.setSrc("WEB-INF/reportes/certificadoMatricula2.jasper");
            }else if(tipo.equals("LFEC")){
                    datasource = certificados((Cursos)curs.getSelectedItem().getValue(),"LREP");
                    parametros.put("titulo", titulo.getValue());
                    report.setSrc("WEB-INF/reportes/conanioscumplidos.jasper");
            }else if(tipo.equals("LCAS")){
                    datasource = certificados((Cursos)curs.getSelectedItem().getValue(),"LREP");
                    parametros.put("titulo", titulo.getValue());
                    report.setSrc("WEB-INF/reportes/concasilleros.jasper");
            }else if(tipo.equals("LMIN")){
                    datasource = certificados((Cursos)curs.getSelectedItem().getValue(),"LREP");
                    parametros.put("titulo", titulo.getValue());
                    report.setSrc("WEB-INF/reportes/conmatricula.jasper");
            }else if(tipo.equals("LPAS")){
                    datasource = pases((Cursos)curs.getSelectedItem().getValue(),"LPAS");
                    parametros.put("titulo", titulo.getValue());
                    report.setSrc("WEB-INF/reportes/conpase.jasper");
            }else if(tipo.equals("LTRAN")){
                    datasource = transporte((Cursos)curs.getSelectedItem().getValue(),"LTRAN");
                    parametros.put("titulo", titulo.getValue());
                    report.setSrc("WEB-INF/reportes/transporte.jasper");
            }else if(tipo.equals("LCART")){
                    datasource = transporte((Cursos)curs.getSelectedItem().getValue(),"LCART");
                    parametros.put("titulo", titulo.getValue());
                    report.setSrc("WEB-INF/reportes/paracarnet.jasper");
            }
            else if(tipo.equals("LNUEV")){
                    datasource = nuevos((Cursos)curs.getSelectedItem().getValue(),"LNUEV");
                    parametros.put("titulo", titulo.getValue());
                    report.setSrc("WEB-INF/reportes/nuevos.jasper");
            }else if(tipo.equals("LINT")){
                    datasource = internos((Cursos)curs.getSelectedItem().getValue(),"LINT");
                    parametros.put("titulo", titulo.getValue());
                    report.setSrc("WEB-INF/reportes/internos.jasper");
            }else if(tipo.equals("LCA")){
                    datasource = certificados((Cursos)curs.getSelectedItem().getValue(),"LREP");
                    parametros.put("titulo",titulo.getValue());
                    report.setSrc("WEB-INF/reportes/con1casilleros.jasper");
            }else if(tipo.equals("LASI")){
                    datasource = certificados((Cursos)curs.getSelectedItem().getValue(),"LREP");
                    parametros.put("titulo",titulo.getValue());
                    report.setSrc("WEB-INF/reportes/conasistencia.jasper");
            }else if(tipo.equals("LGEN")){
                    datasource = certificados((Cursos)curs.getSelectedItem().getValue(),"LREP");
                    parametros.put("titulo", titulo.getValue());
                    report.setSrc("WEB-INF/reportes/congenero.jasper");
            }else if(tipo.equals("AM")){
                    datasource = certificados((Cursos)curs.getSelectedItem().getValue(),"AM");
                    parametros.put("titulo", "Acta de Matricula");
                    report.setSrc("WEB-INF/reportes/actaMatricula.jasper");

            }else if(tipo.equals("INS")){
                    datasource = inscritos("Inscrito");
                    parametros.put("titulo", titulo.getValue());
                    report.setSrc("WEB-INF/reportes/estudiantes.jasper");
            }else if(tipo.equals("MAT")){
                    datasource = inscritos("Matriculado");
                    parametros.put("titulo", titulo.getValue());
                    report.setSrc("WEB-INF/reportes/estudiantes.jasper");
            }else if(tipo.equals("RET")){
                    datasource = inscritos("Retirado");
                    parametros.put("titulo", titulo.getValue());
                    report.setSrc("WEB-INF/reportes/estudiantes.jasper");
            }else if(tipo.equals("LMAT")){
                    datasource = certificados((Cursos)curs.getSelectedItem().getValue(),"LMAT");
                    parametros.put("titulo", titulo.getValue());
                    report.setSrc("WEB-INF/reportes/estudiantes.jasper");
            }else if(tipo.equals("LCLA")){
                    datasource = certificados((Cursos)curs.getSelectedItem().getValue(),"LCLA");
                    parametros.put("titulo",titulo.getValue());
                    report.setSrc("WEB-INF/reportes/claves.jasper");
            }else if(tipo.equals("LCLA2")){
                    datasource = certificados((Cursos)curs.getSelectedItem().getValue(),"LCLA2");
                    parametros.put("titulo",titulo.getValue());
                    report.setSrc("WEB-INF/reportes/clavePersonalCompleto.jasper");
            }else if(tipo.equals("LCOR")){
                    datasource = certificados((Cursos)curs.getSelectedItem().getValue(),"LCOR");
                    parametros.put("titulo",titulo.getValue());
                    report.setSrc("WEB-INF/reportes/concorreos.jasper");
            }else if(tipo.equals("LREP")){
                    datasource = certificados((Cursos)curs.getSelectedItem().getValue(),"LREP");
                    parametros.put("titulo",titulo.getValue());
                    report.setSrc("WEB-INF/reportes/representantes.jasper");
            }else if(tipo.equals("LCAR")){
                    datasource = certificados((Cursos)curs.getSelectedItem().getValue(),"LCAR");
                    parametros.put("titulo", "Carné Estudiantil");
                    report.setSrc("WEB-INF/reportes/carnet.jasper");
            }else if(tipo.equals("LCAR1")){
                    datasource = certificados((Cursos)curs.getSelectedItem().getValue(),"LCAR");
                    parametros.put("titulo", "Carné Estudiantil");
                    report.setSrc("WEB-INF/reportes/carnetMinisterio.jasper");
            }else if(tipo.equals("-1")){
                alert("No ha seleccionado ningún reporte...!");
                    return;
            }
            if(!tipo.equals("-1")){
                report.setParameters(parametros);
                report.setDatasource(datasource);
                report.setType((String) format.getSelectedItem().getValue());
            }
        }

void campos(String valor){
curs.setSelectedIndex(0);
mates.disabled = true;
        if(valor.equals("CM") || valor.equals("AM")){
            curs.disabled = false;
            
            titulo.value = "Listado de Estudiantes";
        } else if(valor.equals("INS") || valor.equals("MAT") || valor.equals("RET") ){
            curs.disabled = true;
            mates.disabled = true;
            titulo.value = "Listado de Estudiantes";
        }else if(valor.equals("LMAT") || valor.equals("LCLA") || valor.equals("LCLA2") || valor.equals("LCOR") || valor.equals("LREP") || valor.equals("LCAR")){
            curs.disabled = false;
            mates.disabled = true;
            titulo.value = "Listado de Estudiantes";

        }
        if(valor.equals("CM") ||  valor.equals("CM2") )
            titulo.value = "Certificado de Matricula";
        if(valor.equals("AM"))
            titulo.value = "Actas de Matricula";
        if(valor.equals("INS"))
            titulo.value = "Estudiantes Inscritos";
        if(valor.equals("MAT"))
            titulo.value = "Listado de Matriculados";
        if(valor.equals("RET"))
            titulo.value = "Listado de Retirados";
        if(valor.equals("LMAT"))
            titulo.value = "Listado de Matriculados";
        if(valor.equals("LCAR"))
            titulo.value = "Carné Estudiantil";
        if(valor.equals("LCLA"))
            titulo.value = "Claves de Estudiantes";
       if(valor.equals("LCLA2"))
            titulo.value = "Claves de Estudiantes";
      if(valor.equals("LCOR"))
            titulo.value = "Correos";
        if(valor.equals("LREP"))
            titulo.value = "Lista de Representantes";
        if(valor.equals("LCAS"))
            titulo.value = "Listado de Estudiantes";
       if(valor.equals("LCA"))
            titulo.value = "Listado de Estudiantes";
       if(valor.equals("LASI"))
            titulo.value = "Listado de Estudiantes";
       if(valor.equals("LGEN"))
            titulo.value = "Listado de Estudiantes";
       if(valor.equals("LFEC"))
            titulo.value = "Listado de Estudiantes";
       if(valor.equals("LMIN"))
            titulo.value = "Listado de Estudiantes";

       if(valor.equals("LPAS"))
            titulo.value = "NOMINA DE ESTUDIANTES CON PASES DE OTROS COLEGIOS";
      if(valor.equals("LINT"))
            titulo.value = "Listado de Estudiantes";






}


]]>
        </zscript>
        <panel width="100%" id="parametros"  height="100%" border="normal" collapsible="true" title="Parametros">
            <panelchildren>
                <grid width="550px">
                    <rows>
                        <row>
                            <span style="float:right"> Reporte:</span>
                            <listbox id="reporte" onSelect="campos(self.selectedItem.value)" width="300px"  mold="select" >
                                <listitem  label="[Seleccione]" value="-1" selected="true" />
                                <listitem id="CM"  label="Certificado de Matricula" value="CM" />
                                <listitem  id="CM2" label="Certificado de Matricula(2)" value="CM2" />
                                <listitem  id="AM" label="Actas de Matricula" value="AM" />
                                <listitem  id="INS" label="Estudiantes Inscritos" value="INS" />
                                <listitem  id="MAT" label="Estudiantes Matriculados" value="MAT" />
                                <listitem id="RET"  label="Estudiantes Retirados" value="RET" />
                                <listitem  id="LMAT" label="Lista de Matriculados" value="LMAT" />
                                <listitem  id="LCAR" label="Lista de Carné "  value="LCAR"/>
                                <listitem  id="LCAR1" label="Lista de Carné Estudiantil"  value="LCAR1"/>
                                <listitem  id="LCART" label="Listado para Carnets" value="LCART" />
                                <listitem  id="LCLA" label="Lista de Claves" value="LCLA"/>
                                <listitem  id="LCLA2" label="Listado de Claves con Matricula" value="LCLA2"/>
                                <listitem  id="LCOR" label="Listado de Correos electronicos" value="LCOR"/>

                                <listitem  id="LREP" label="Lista de Representantes" value="LREP"/>
                                <listitem  id="LCAS" label="Lista de Estudiantes con Casilleros vacios" value="LCAS"/>
                                <listitem  id="LCA" label="Lista de Estudiantes 1 Casillero" value="LCA"/>
                                <listitem  id="LASI" label="Listado para Asistencia" value="LASI"/>
                                <listitem  id="LGEN" label="Listadopor Genero" value="LGEN"/>
                                <listitem  id="LFEC" label="Listado con Años Cumplidos" value="LFEC"/>
                                <listitem  id="LMIN" label="Listado con Folio y No. Matricula" value="LMIN"/>
                                <listitem  id="LPAS" label="Listado de Pases Recibidos" value="LPAS"/>
                                <listitem  id="LNUEV" label="Listado de Estudiantes Nuevos" value="LNUEV"/>
                                <listitem  id="LTRAN" label="Listado de Estudiantes que Toman transporte" value="LTRAN"/>
                                <listitem  id="LINT" label="Listado de Estudiantes Internos" value="LINT"/>
                            </listbox>
                        </row>

                        <row>
                            <span style="float:right"> Curso:</span>
                            <listbox id="curs" width="400px"  mold="select"
                                     onSelect="buscar2(((Cursos)self.selectedItem.value));">

                                <listitem forEach="${cursos}" value="${each}" label="${each.descripcion} ${each.especialidad}  ${each.paralelo}"/>
                            </listbox>
                        </row>
                        <row visible="false">
                            <span style="float:right"> Estudiantes: </span>

                            <listbox id="mates" width="300px"  mold="select" >
                                <listitem forEach="${estudiantes}" value="${each}">
                                    <listcell label="${each.apellidos}" />
                                </listitem>
                            </listbox>


                        </row>
                        <row>
                            <span style="float:right"> Titulo: </span>
                            <textbox id="titulo" width="280px" />
                        </row>

                        <row>
                            <span style="float:right"> Formato:</span>
                            <span>
                                <listbox id="format" mold="select" onSelect="showReport();" >
                                    <listitem label="PDF" value="pdf" selected="true" />
                                    <listitem label="XML" value="xml" />
                                    <listitem label="HTML" value="html" />
                                    <listitem label="Word (RTF)" value="rtf" />
                                    <listitem label="Excel" value="xls" />
                                    <listitem label="Excel (JXL)" value="jxl" />
                                    <listitem label="CSV" value="csv" />
                                    <listitem label="OpenOffice (ODT)" value="odt" unless="false"/>
                                </listbox>
                                <button label="Ejecutar!" onClick='showReport();'/>
                            </span>
                        </row>
                    </rows>
                </grid>
            </panelchildren>
        </panel>
        <panel width="100%" onOpen="parametros.setOpen(true);" id="rep"  height="90%" border="normal" collapsible="true" maximizable="true"   title="Reporte">
            <panelchildren>
                <jasperreport id="report" />
            </panelchildren>
        </panel>



        <zscript>
            import bean.Permisos;
            Permisos per = new Permisos();
            void cargando(){

            CM.visible = per.verificarPermisoReporte("CM", "Ingresar");
            CM2.visible = per.verificarPermisoReporte("CM2", "Ingresar");
            AM.visible = per.verificarPermisoReporte("AM", "Ingresar");
            INS.visible = per.verificarPermisoReporte("INS", "Ingresar");
            MAT.visible = per.verificarPermisoReporte("MAT", "Ingresar");
            RET.visible = per.verificarPermisoReporte("RET", "Ingresar");
            LMAT.visible = per.verificarPermisoReporte("LMAT", "Ingresar");
            LCAR.visible = per.verificarPermisoReporte("LCAR", "Ingresar");
            LCAR1.visible = per.verificarPermisoReporte("LCAR1", "Ingresar");
            LCART.visible = per.verificarPermisoReporte("LCART", "Ingresar");
            LCLA.visible = per.verificarPermisoReporte("LCLA", "Ingresar");
            LCLA2.visible = per.verificarPermisoReporte("LCLA2", "Ingresar");
            LCOR.visible = per.verificarPermisoReporte("LCOR", "Ingresar");

            LREP.visible = per.verificarPermisoReporte("LREP", "Ingresar");
            LCAS.visible = per.verificarPermisoReporte("LCAS", "Ingresar");
            LCA.visible = per.verificarPermisoReporte("LCA", "Ingresar");
            LASI.visible = per.verificarPermisoReporte("LASI", "Ingresar");
            LGEN.visible = per.verificarPermisoReporte("LGEN", "Ingresar");
            LFEC.visible = per.verificarPermisoReporte("LFEC", "Ingresar");
            LMIN.visible = per.verificarPermisoReporte("LMIN", "Ingresar");
            LPAS.visible = per.verificarPermisoReporte("LPAS", "Ingresar");
            LNUEV.visible = per.verificarPermisoReporte("LNUEV", "Ingresar");
            LTRAN.visible = per.verificarPermisoReporte("LTRAN", "Ingresar");
            LINT.visible = per.verificarPermisoReporte("LINT", "Ingresar");

            }
        </zscript>


    </zk>


</window>






