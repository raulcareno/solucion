<?page id="main-page"?>

<zk  xmlns="http://www.zkoss.org/2005/zul"
	xmlns:h="http://www.w3.org/1999/xhtml" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.zkoss.org/2005/zul http://www.zkoss.org/2005/zul/zul.xsd">
<zscript>
<![CDATA[
import bean.reportesClase;
import java.math.BigDecimal;
import bean.notas;
import jcinform.persistencia.*;
import jcinform.procesos.Administrador;
 
import java.util.Date;
import org.joda.time.DateMidnight;
import org.zkoss.zul.Listbox;
  import bean.Permisos;
  import net.sf.jasperreports.engine.JRDataSource;
import sources.*;
Administrador adm = new Administrador();
Session ses = Sessions.getCurrent();
Periodo periodo = (Periodo) ses.getAttribute("periodo");
Empleados user =  (Empleados)ses.getAttribute("user");
List cursos = adm.query("Select distinct o.curso from MateriaProfesor as o where o.empleado.codigoemp = '"+user.getCodigoemp()+"'  and o.curso.periodo.codigoper = '"+periodo.getCodigoper()+"' ");
   Permisos permiso = new Permisos();
List materias = adm.query("Select o from Global as o where o.grupo = 'MAT' ");
notas no = new notas();
reportesClase noti = new reportesClase();
List trimestres = adm.query("Select o from Trimestres as o where  o.periodo = '"+periodo.getCodigoper()+"' order by o.codigotrim  ");
List sistemas = adm.query("Select o from Sistemacalificacion as o where o.periodo.codigoper =  '"+periodo.getCodigoper()+"'  order by o.orden ");
 String[][] cabes = new String[trimestres.size()][2];
Boolean guardando = false;
System.out.println(trimestres.size()+"");
int k=0;
 for (Iterator it = trimestres.iterator(); it.hasNext();) {
              Trimestres trime = (Trimestres) it.next();
              List sistemas0 = adm.query("Select o from Sistemacalificacion as o " +
              " where o.trimestre.codigotrim = '"+ trime.getCodigotrim() +"' and  o.periodo.codigoper = '"+periodo.getCodigoper()+"' order by o.orden");
              int orden = 0;
              int codigo=0;

              if(sistemas0.size() >0 ){
                  orden = ((Sistemacalificacion) sistemas0.get(sistemas0.size()-1)).getOrden();
                  codigo = ((Sistemacalificacion) sistemas0.get(sistemas0.size()-1)).getCodigosis();
                  cabes[k][0]= trime.getDescripcion();
                   cabes[k][1]= sistemas0.size()+"";
                   sistemas0 = null;
              }else{
                   cabes[k][1]= 1+"";
              }



             
k++;
 }

String[][] values = new String[sistemas.size()][2];
Date fechaActual = new Date();
  DateMidnight actual = new DateMidnight(fechaActual);

          for (int i=0;i<sistemas.size();i++) {
             values[i][0]= ((Sistemacalificacion)sistemas.get(i)).getAbreviatura();
                DateMidnight inicial = new DateMidnight(((Sistemacalificacion)sistemas.get(i)).getFechainicial());
                DateMidnight finale = new DateMidnight(((Sistemacalificacion)sistemas.get(i)).getFechafinal());
            if(actual.compareTo(finale) <=0 && actual.compareTo(inicial) >=0){
                values[i][1]= "number";
  
            }else{
                values[i][1]= "readonly";

            }
           
           // values[i]="number";
          }
          notas nso = new notas();
guardar(){

    if(guardando)
            return;
    guardando = true;

        notas nso = new notas();
        notas r = (notas) datos.getRows();
    String resultado = "";
        Cursos curso = ((Cursos)curs.selectedItem.value);
        MateriaProfesor materia = ((MateriaProfesor)mates.selectedItem.value);
                            Boolean seguir=true;
                            int mm = 1;
                            
                            do{
                                System.out.println("******** Ingreso n: "+mm);
                                String ocupado = "Select o from Cursoocupado as o where o.curso = '" + curso.getCodigocur() + "' "
                                                    + "and o.materia = '" + materia.getMateria().getCodigo() + "' and o.tipo = 0 ";
                                List ocupando = adm.query(ocupado);
                                if (ocupando.size() > 0) {
                                        System.out.println("Esperando.... ");
                                        seguir = true;
                                        Thread.sleep(2000);
                                }else{
                                    seguir = false;
                                }
                                mm++;
                            }while(seguir==true);  
                            Cursoocupado cO = new Cursoocupado(adm.getNuevaClave("Cursoocupado", "codigo"));
                            cO.setCurso(curso.getCodigocur());
                            cO.setMateria(materia.getMateria().getCodigo());
                            cO.setTipo(0);
                            cO.setFecha(adm.Date());
                            adm.guardar(cO);


    if(((MateriaProfesor)mates.selectedItem.value).getCuantitativa()){
            resultado = nso.guardar(r.getChildren(),((Cursos)curs.selectedItem.value),((MateriaProfesor)mates.selectedItem.value));
    }else{
            resultado = nso.guardarCualitativas(r.getChildren(),((Cursos)curs.selectedItem.value),((MateriaProfesor)mates.selectedItem.value));
    }
 //AL FINALIZAR EL PROCESO BORRO EL REGISTRO DE ÉSTE PROFESOR 
 adm.eliminarObjeto(Cursoocupado.class, cO.getCodigo());
 
if(resultado.equals("ok")){
     doAdd(((Cursos)curs.selectedItem.value),((MateriaProfesor)mates.selectedItem.value));
    Messagebox.show("Registro Almacenado con éxito...!", "Administrador Educativo", Messagebox.OK, Messagebox.INFORMATION);
        permiso.auditar("Notas","Guardar",""+((Cursos)curs.selectedItem.value)+" "+((MateriaProfesor)mates.selectedItem.value).getMateria());
        
 }else{
    Messagebox.show(resultado, "Administrador Educativo", Messagebox.CANCEL, Messagebox.ERROR);
 }
 
guardando = false;
}

void buscar2(Cursos cur){
        List empleadosEncontrados = adm.query("Select o from MateriaProfesor as o where o.empleado.codigoemp = '"+user.getCodigoemp()+"' and o.curso.codigocur = '"+cur.codigocur+"' " + 
            " and (o.materia.descripcion not like '%disciplina%' and  o.materia.codigo not in (0,1)) order by o.orden");
        //bd2.getItems().clear();
    mates.getChildren().clear();
    datos.getRows().getChildren().clear();
    bd2.value = ""; 
               for (Iterator it = empleadosEncontrados.iterator(); it.hasNext();) {
                      MateriaProfesor estudent = (MateriaProfesor) it.next();
                        Listitem item = new Listitem();
                        item.setValue(estudent);
                        item.appendChild(new Listcell(estudent.getMateria()+""));
                        mates.appendChild(item);
             }

    }

void doAdd(Cursos curso, MateriaProfesor materia){
        if(!verificar("Agregar")){
                guardar1.disabled=true;
                guardar2.disabled=true;
            }
                filas.addRow(curso,materia,demo.getText());
                 if(periodo.getCerrado()){
                        guardar1.disabled = true;
                        guardar2.disabled = true;
                    }
      
}

Boolean verificar(String accion){
        //Registro de Disciplina
        return permiso.verificarPermiso("Registro de Notas",accion);

    }

		void showReport(String tipo) {
			//Preparing parameters
            reportes.visible = true;

            Institucion insts = periodo.getInstitucion();

			Map parametros = new HashMap();
            parametros.put("denominacion", insts.getDenominacion());
            parametros.put("nombre", insts.getNombre());
            parametros.put("periodo", periodo.getDescripcion());
            parametros.put("slogan", insts.getSlogan());
            JRDataSource datasource = null;
 String directorioReportes = insts.getReportes();
                ArrayList arreglo = noti.notasd(curs.getSelectedItem().getValue(),((MateriaProfesor)mates.getSelectedItem().getValue()),sistemasCombo.getSelectedItem().getValue());
                datasource = (ReporteNotasDataSource) arreglo.get(0);
                parametros = (HashMap) arreglo.get(1);
                parametros.put("perseleccionado",((Sistemacalificacion)sistemasCombo.getSelectedItem().getValue()).getNombre());

             MateriaProfesor mate = ((MateriaProfesor)mates.getSelectedItem().getValue());
             parametros.put("materia", mate.getMateria().getDescripcion());
             parametros.put("profesor", mate.getEmpleado().getNombres()+" "+ mate.getEmpleado().getApellidos());
             parametros.put("titulo", "Notas Registradas");
             report.setSrc(directorioReportes+"notaspor.jasper");



                report.setParameters(parametros);
                report.setDatasource(datasource);
                report.setType("pdf");


		}

]]>
</zscript>
    
<grid onClientInfo="onClientInfo(event)" visible="false">
    <rows>
        <row><intbox id="alto"/> ancho: <intbox id="ancho"/></row>
    </rows>
 
    <zscript>
     void onClientInfo(ClientInfoEvent evt) {
         alto.setValue(evt.getScreenHeight());
         ancho.setValue(evt.getScreenWidth());
     }
    </zscript>
</grid>
   <panel  id="notasingreso" >
        <panelchildren>

            <grid>
                <rows>   <row spans="4" style="background:red" visible="false" id="errorMensaje" >
                        Error en FORMULAS de los APORTES, si Ud. no es el administrador, solicite ayuda...!
                    </row>
                    <row>
                        <span style="float:right"> Curso(*):</span>
                        <bandbox  width="200px" readonly="true"  id="bd1">
                            <bandpopup>
                                <vbox>
                                    <listbox id="curs" width="420px"
                                                 onSelect="bd1.value=self.selectedItem.label;buscar2(((Cursos)self.selectedItem.value));bd1.closeDropdown();">

                                        <listitem forEach="${cursos}" value="${each}">
                                            <listcell label="${each.descripcion} ${each.especialidad}  ${each.paralelo}" />

                                        </listitem>
                                    </listbox>
                                </vbox>
                            </bandpopup>
                        </bandbox>
                        <span style="float:right"> Materias(*):</span>
                        <span>
                            <bandbox  width="200px" readonly="true"  id="bd2">
                                <bandpopup>
                                    <vbox>
                                        <listbox id="mates" width="420px"
                                                     onSelect='bd2.value=self.selectedItem.label;bd2.closeDropdown();doAdd(((Cursos)curs.selectedItem.value),((MateriaProfesor)self.selectedItem.value)); datos.setHeight((alto.value-300)+"px");'>

                                            <listitem forEach="${materias}" value="${each}">
                                                <listcell label="${each.descripcion}" />

                                            </listitem>
                                        </listbox>
                                    </vbox>
                                </bandpopup>
                            </bandbox>

                            <button label="Guardar" id="guardar1"  image="/images/guardar.gif" onClick="guardar();"/>
                            <button label="Imprimir"  image="/images/imprimir.gif" onClick='showReport("AM")'/>

                        </span>
                    </row>

                </rows>
            </grid>
            <grid   id="datos" >

                <auxhead >
                    <auxheader colspan="1">
                        <textbox cols="50" style="background: transparent;border:0px" readonly = "true"  />
                    </auxheader>
                    <auxheader forEach="${cabes}"  label="${each[0]}" colspan="${each[1]}"/>
                </auxhead>
                <columns>
                    <column width="10px" visible="false"  label ="Mat."/>
                    <column width="300px" label ="Estudiante"/>
                    <column forEach="${values}"  width="25px" label="${each[0]}" align="right"  />
                </columns>
                <rows id="filas" use="bean.notas">
                </rows>
            </grid>
            <span>
                <button label="Guardar" visible="false"   id="guardar2" image="/images/guardar.gif" onClick="guardar();"/>
                <button label="Imprimir" visible="false"   image="/images/imprimir.gif" onClick='showReport("AM")'/>
                <decimalbox  id="demo" visible="false" format="#,###.00"/>
            </span>

        </panelchildren>
    </panel>

    <panel id="reportes" width="98%" height="98%" framable="true" style="position:absolute; top:1%;left:1%" visible = "false" >



        <panelchildren>
            <toolbar  align="end">
                <toolbarbutton style="align:right" label="CERRAR"  image ="/images/eliminar.gif" onClick='reportes.setVisible(false)' />
            </toolbar>
            <grid width="75%">
                <rows>
                    <row  spans="3">
                        <span style="color:red;font-size:14px;">
                                Nota: imprima una vez que haya guardado las notas, sino estas no se reflejarán en el reporte
                        </span>
                    </row>
                    <row visible="false">
                        <span style="float:right"> Aporte que desea imprimir: </span>

                        <listbox id="sistemasCombo" width="300px"  mold="select" >
                            <listitem selected="true"  forEach="${sistemas}" value="${each}">
                                <listcell label="${each.trimestre} - ${each.nombre}" />
                            </listitem>
                        </listbox>
                        <button label="Imprimir"  image="/images/imprimir.gif" onClick='showReport("AM")'/>
                    </row>

                </rows>
            </grid>


            <jasperreport id="report" />

        </panelchildren> 
    </panel>
    <zscript> <![CDATA[
        Double v = 99000 / 4.7d;
        demo.setValue(new BigDecimal(v));
        nso.verificarSistema();
        // errorMensaje.visible = true;
           
           
]]>
    </zscript>
</zk>