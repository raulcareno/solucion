<?xml version="1.0" encoding="UTF-8"?>
<zk  xmlns="http://www.zkoss.org/2005/zul">
    <window  onClose="cerrar()" onCreate="cargar()" width="650px" id="facturarCliente">
           <style>
            .MyGridRowHeight
            tr.z-row td.z-row-inner
            {
            border:1px solid white;
            border-right:1px solid transparent;
            padding:0px;
            } 
    </style>
        <zscript>
            <![CDATA[
  import jcinform.persistencia.*;
  import jcinform.conexion.*;
  import jcinform.bean.*;
  import java.util.ArrayList;
  import org.zkoss.image.AImage;
  import org.zkoss.image.Image;
  import java.util.HashMap;
    import java.util.Map;
    import java.math.BigDecimal;
    import jcinform.bean.sources.*;

    Administrador adm = new Administrador();
    Permisos permiso = new Permisos();
    Session ses = Sessions.getCurrent();
    
    Empleados usuarioActual = ses.getAttribute("user");
    Empresa empresa = ses.getAttribute("empresa");
    Empleadossucursal sucursalEmp = ses.getAttribute("sector");
    String directorioReportes = empresa.getReportes();
    ses.setAttribute(org.zkoss.web.Attributes.PREFERRED_LOCALE, Locale.ENGLISH);
    Sucursal suc = new Sucursal();
    List bancos = adm.query("Select o from Bancos as o  order by o.nombre ");       
    cargarCliente(){
        boton = Path.getComponent("//controlequipospage/controlventana/facturas");
        boton.doClick();
    }
String llenarCeros(String numero){

        while(numero.length()<7){
            numero = "0"+numero;
        }  
        return numero;

}  
 Boolean verificar(String accion){
        return permiso.verificarPermiso("RealizarCobros",accion);
 } 
        void cerrar(){
        if(facturaPanel.isVisible()){
                nofactura.getValue();
                return;
        }
               Path.getComponent("//contratospage/contratosventana/facturas").setSelected(true);
           //  facturarCliente.detach();
        }
  void guardar(){
  
  if(verificar("Agregar")){
            if(deposito.value.doubleValue()>0){
                    if(nocuenta.value.isEmpty()){
                       Messagebox.show("Ingrese el No. de Depósito...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                       return;
                    }
                    //bancodep,bancocheque,bancotransferencia,bancoban
                    if(bancodep.selectedItem == null){
                       Messagebox.show("Seleccione el Banco del Depósito...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                       return;
                    }
            } 
            if(transferencia.value.doubleValue()>0){
                    if(notransferencia.value.isEmpty()){
                    Messagebox.show("Ingrese el No. de Transferencia...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                    return;
                    }
                    if(bancotransferencia.selectedItem == null){
                       Messagebox.show("Seleccione el Banco del Transferencia...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                       return;
                    }
            }
            if(bancario.value.doubleValue()>0){
                    if(nodeposito.value.isEmpty()){
                    Messagebox.show("Ingrese el No. de Débito...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                    return;
                    }
                    if(bancoban.selectedItem == null){
                       Messagebox.show("Seleccione el Banco del Débito...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                       return;
                    }
            }
  
        BigDecimal total = efectivo.getValue().add(cheque.getValue()).add(deposito.getValue()).add(tarjeta.getValue()).add(descuento.getValue()).add(descuento.getValue()).add(transferencia.getValue()).add(bancario.getValue()).add(rtotal.getValue());
        if(total.compareTo(new BigDecimal(0)) == 0 ){
            Messagebox.show("Valor a pagar está en Cero  ...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
            efectivo.focus();
            return;
        }
      
            Cxcobrar cobrar = new Cxcobrar(adm.getNuevaClave("Cxcobrar", "codigo"));
            cobrar.setFactura(new Factura(codigofac.value));
            cobrar.setDebe(new BigDecimal(0));
            cobrar.setHaber(totalCobros.value);
            cobrar.setFecha(adm.Date());
            cobrar.setTipo("P");
            cobrar.setDescuento(descuento.value);
            cobrar.setEfectivo(efectivo.value);
            cobrar.setCheque(cheque.value);
            cobrar.setDeposito(deposito.value);
            cobrar.setTarjeta(tarjeta.value);
            cobrar.setNocheque(nocheque.value);
            cobrar.setNotarjeta(notarjeta.value);
            cobrar.setNocuenta(nocuenta.value);
            cobrar.setTransferencia(transferencia.value);
            cobrar.setNotransferencia(notransferencia.value);
            cobrar.setRiva(riva.value);
            cobrar.setRfuente(rfuente.value);
            cobrar.setRtotal(rtotal.value);
            cobrar.setEmpleados(usuarioActual);
            cobrar.setNumeroretencion(noretencion.value);
            cobrar.setBancario(bancario.value);
            cobrar.setNocuentaban(nodeposito.value);
            
            
            try{
                cobrar.setBanco(bancotransferencia.selectedItem.value);
            }catch(Exception e){System.out.println("NO HAY BANCOS SELECCIONADO");}
            
            try{
                cobrar.setBancocheque(bancocheque.selectedItem.value);
            }catch(Exception e){System.out.println("NO HAY BANCOS SELECCIONADO");}
             try{
                cobrar.setBancoban(bancoban.selectedItem.value);
            }catch(Exception e){System.out.println("NO HAY BANCOS SELECCIONADO");}
            try{
                cobrar.setBancodep(bancodep.selectedItem.value);
            }catch(Exception e){System.out.println("NO HAY BANCOS SELECCIONADO");}
            
            cobrar.setFechatransferencia(fechatransferencia.value);
            cobrar.setFechacheque(fechacheque.value);
            cobrar.setFechadeposito(fechadeposito.value);
            adm.guardar(cobrar);
            
            Factura factu = adm.buscarClave(codigofac.value,Factura.class);
            Date creado = adm.Date();
            /**
                    GUARDO LOS DEPOSITOS Y CLASIFICO SEGÚN LO QUE HA PAGADO
                    deposito/nocuenta 
                    transferencia/notransferencia 
                    debito/nodeposito
            **/
                if(cobrar.getDeposito().doubleValue()>0){
                            try{
                                Depositos dep = new Depositos(adm.getNuevaClave("Depositos", "codigo"));
                                dep.setNodeposito(cobrar.getNocuenta());
                                dep.setFactura(factu.getNumero().replace("FAC","00")+""); // char
                                dep.setCxcobrar(cobrar.getCodigo()); //int
                                dep.setFechacxc(creado);//date
                                dep.setContable((bancodep.selectedItem.value).getCuenta()); //char
                                dep.setPago(cobrar.getDeposito()); //decimal
                                dep.setContrato(factu.getContratos().getContrato());//int
                                dep.setFecha(creado);//date
                                dep.setEmision(factu.getEmision());//date
                                dep.setVence(factu.getVencimiento());//date
                                dep.setDetalle(mes(factu.getFecha().getMonth()));//date
                                dep.setCliente(factu.getContratos().getClientes()+"");//char
                                dep.setRuc(factu.getContratos().getClientes().getIdentificacion()+"");//char
                                dep.setMonto(factu.getTotal());//date 
                                dep.setEmpleados(usuarioActual); //int
                                Integer facturaCodigo = factu.getCodigo();

                                List pagosHechos = adm.queryNativo("Select count(*) from Cxcobrar " + 
                                        " where factura =  "+facturaCodigo+"  " + 
                                        " and haber > 0 ");
                                        Integer conteo = 0;
                                if(pagosHechos.size()>0){
                                        Integer val = new Integer(pagosHechos.get(0).toString().replace("[","").replace("]",""));
                                        conteo = val;
                                }
                                List abonoCancela = adm.queryNativo("Select if((SUM(debe) - SUM(haber)) = 0,'CA','AB') from Cxcobrar " + 
                                        " where factura =  "+facturaCodigo+"  ");
                                String tipoCance = "AB";
                                    if(abonoCancela.size()>0){
                                        String val = (abonoCancela.get(0).toString().replace("[","").replace("]",""));
                                        tipoCance = val;
                                    }
                                dep.setTipo(tipoCance); //char
                                dep.setNopago(conteo);
                                dep.setComentario(conteo+"");//char
                                adm.guardar(dep);

                            }catch(Exception ax){
                                System.out.println(""+ax.printStackTrace());
                            }

                }
                if(cobrar.getTransferencia().doubleValue()>0){
                            try{
                                Depositos dep = new Depositos(adm.getNuevaClave("Depositos", "codigo"));
                                dep.setNodeposito(cobrar.getNocuenta());
                                dep.setFactura(factu.getNumero().replace("FAC","00")+""); // char
                                dep.setCxcobrar(cobrar.getCodigo()); //int
                                dep.setFechacxc(creado);//date
                                dep.setContable((bancotransferencia.selectedItem.value).getCuenta()); //char
                                dep.setPago(cobrar.getTransferencia()); //decimal
                                dep.setContrato(factu.getContratos().getContrato());//int
                                dep.setFecha(creado);//date
                                dep.setEmision(factu.getEmision());//date
                                dep.setVence(factu.getVencimiento());//date
                                dep.setDetalle(mes(factu.getFecha().getMonth()));//date
                                dep.setCliente(factu.getContratos().getClientes()+"");//char
                                dep.setRuc(factu.getContratos().getClientes().getIdentificacion()+"");//char
                                dep.setMonto(factu.getTotal());//date 
                                dep.setEmpleados(usuarioActual); //int
                                Integer facturaCodigo = factu.getCodigo();

                                List pagosHechos = adm.queryNativo("Select count(*) from Cxcobrar " + 
                                        " where factura =  "+facturaCodigo+"  " + 
                                        " and haber > 0 ");
                                        Integer conteo = 0;
                                if(pagosHechos.size()>0){
                                        Integer val = new Integer(pagosHechos.get(0).toString().replace("[","").replace("]",""));
                                        conteo = val;
                                }
                                List abonoCancela = adm.queryNativo("Select if((SUM(debe) - SUM(haber)) = 0,'CA','AB') from Cxcobrar " + 
                                        " where factura =  "+facturaCodigo+"  ");
                                String tipoCance = "AB";
                                    if(abonoCancela.size()>0){
                                        String val = (abonoCancela.get(0).toString().replace("[","").replace("]",""));
                                        tipoCance = val;
                                    }
                                dep.setTipo(tipoCance); //char
                                dep.setNopago(conteo);
                                dep.setComentario(conteo+"");//char
                                adm.guardar(dep);

                            }catch(Exception ax){
                                System.out.println(""+ax.printStackTrace());
                            }

                }
                if(cobrar.getBancario().doubleValue()>0){
                   try{
                                Depositos dep = new Depositos(adm.getNuevaClave("Depositos", "codigo"));
                                dep.setNodeposito(cobrar.getNocuenta());
                                dep.setFactura(factu.getNumero().replace("FAC","00")+""); // char
                                dep.setCxcobrar(cobrar.getCodigo()); //int
                                dep.setFechacxc(creado);//date
                                dep.setContable((bancoban.selectedItem.value).getCuenta()); //char
                                dep.setPago(cobrar.getBancario()); //decimal
                                dep.setContrato(factu.getContratos().getContrato());//int
                                dep.setFecha(creado);//date
                                dep.setEmision(factu.getEmision());//date
                                dep.setVence(factu.getVencimiento());//date
                                dep.setDetalle(mes(factu.getFecha().getMonth()));//date
                                dep.setCliente(factu.getContratos().getClientes()+"");//char
                                dep.setRuc(factu.getContratos().getClientes().getIdentificacion()+"");//char
                                dep.setMonto(factu.getTotal());//date 
                                dep.setEmpleados(usuarioActual); //int
                                Integer facturaCodigo = factu.getCodigo();

                                List pagosHechos = adm.queryNativo("Select count(*) from Cxcobrar " + 
                                        " where factura =  "+facturaCodigo+"  " + 
                                        " and haber > 0 ");
                                        Integer conteo = 0;
                                if(pagosHechos.size()>0){
                                        Integer val = new Integer(pagosHechos.get(0).toString().replace("[","").replace("]",""));
                                        conteo = val;
                                }
                                List abonoCancela = adm.queryNativo("Select if((SUM(debe) - SUM(haber)) = 0,'CA','AB') from Cxcobrar " + 
                                        " where factura =  "+facturaCodigo+"  ");
                                String tipoCance = "AB";
                                    if(abonoCancela.size()>0){
                                        String val = (abonoCancela.get(0).toString().replace("[","").replace("]",""));
                                        tipoCance = val;
                                    }
                                dep.setTipo(tipoCance); //char
                                dep.setNopago(conteo);
                                dep.setComentario(conteo+"");//char
                                adm.guardar(dep);

                            }catch(Exception ax){
                                System.out.println(""+ax.printStackTrace());
                            }

                }    
            if(codigodes.value > 0){
                Descuentos des = adm.buscarClave(codigodes.value,Descuentos.class);
                des.setAplicado(true);
                des.setFechaaplicado(adm.Date());
                adm.actualizar(des);
            }
                if(valor.value.compareTo(totalCobros.value) == 0 ){
                    facturaPanel.visible = true;
                    nofactura.focus();
                    
                }else{
                       registrofactura.visible= false;
                    imprimirRecibo(cobrar.getCodigo());
                    impresion.setSelected(true);
                }

            efectivo.readonly = true;
            deposito.readonly = true;
            cheque.readonly = true;
            tarjeta.readonly = true;
            btnguardar.disabled = true;
        generarFacturas gn = new generarFacturas();
        gn.comprobarEstados(sucursalEmp.getSucursal(),factu.getContratos());
 
        
    }else{
            Messagebox.show("No tiene permisos para realizar esta acción...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
    }  
            
 }
        void actualFactura(){
        String nn = "";
                if(esRecibo.checked ){
                       nn = sucursalEmp.getSucursal().getSerie1()+""+sucursalEmp.getSucursal().getSerie2()+"REC"+llenarCeros(""+nofactura.value.replace("REC",""));        
                }else{
                      nn = sucursalEmp.getSucursal().getSerie1()+""+sucursalEmp.getSucursal().getSerie2()+"FAC"+llenarCeros(""+nofactura.value.replace("FAC",""));        
              }
                        List siExiste = adm.query("Select o from Factura as o where o.numero = '"+nn+"' and o.codigo not in ("+ codigofac.value +") ");
                        if(siExiste.size()>0){
                            Messagebox.show("Número de Factura/Recibo ya existe, rectifique y vuelva a intentarlo ...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                            nofactura.focus();
                            return;        
                        }
                        
                      
                            Factura fac = adm.buscarClave(codigofac.value,Factura.class);
                            fac.setNumero(nn+"");
                            if(fac.getAutorizacion()==null){
                                fac.setAutorizacion(sucursalEmp.getSucursal().getAutorizacion());
                            }
                            if(fac.getVencimiento()==null){
                                fac.setVencimiento(adm.Date());
                            }
                            if(fac.getEmision() == null){
                                fac.setEmision(adm.Date());
                            }
                            adm.actualizar(fac);
                            facturaPanel.visible=false;
                           imprimir();
                           impresion.setSelected(true); 
                           registrofactura.visible= false;
                        if(esRecibo.checked){
                            System.out.println(nofactura.value.substring(3)+"");
                                suc.setSecrecibos(new Integer(nofactura.value.substring(3)));
                                adm.actualizar(suc);
                        }
        }
        
        public void imprimir(){
 
                    try{
               Path.getComponent("//contratospage/contratosventana/facturas").setSelected(true);
                    Map parameters = new HashMap();
                   
                    List detalleFac = adm.query("Select o from Detalle as o where o.factura.codigo = '" + codigofac.value + "'");
                    ArrayList detalles = new ArrayList();
                   for (Iterator itAbono =detalleFac.iterator(); itAbono.hasNext();) {
                        Detalle det = itAbono.next();
                         detalles.add(det);
                   }
                   ReporteFacturaDataSource ds = new ReporteFacturaDataSource(detalles);
                   reportelocal.setSrc(directorioReportes+"factura.jasper");
                   reportelocal.setParameters(parameters);
                   reportelocal.setDatasource(ds);
                   reportelocal.setType("pdf");
            }catch(Exception  ex){
                System.out.println("EXXX: "+ex);
            }
        
        
        }
         public void imprimirRecibo(Integer codigo){
 
                    try{
               Path.getComponent("//contratospage/contratosventana/facturas").setSelected(true);
                    Map parameters = new HashMap();
                     parameters.put("empresa", empresa.getRazonsocial());
                    parameters.put("ruc", empresa.getRuc());
                   parameters.put("direccion", empresa.getDireccion());
                    parameters.put("telefono", empresa.getTelefono());
            
                    List detalleFac = adm.query("Select o from Cxcobrar as o where o.codigo = '" + codigo + "'");
                    ArrayList detalles = new ArrayList();
                   for (Iterator itAbono =detalleFac.iterator(); itAbono.hasNext();) {
                        Cxcobrar det = itAbono.next();
                         detalles.add(det);
                   }
                   ReporteReciboDataSource ds = new ReporteReciboDataSource(detalles);
                   reportelocal.setSrc(directorioReportes+"recibos.jasper");
                   reportelocal.setParameters(parameters);
                   reportelocal.setDatasource(ds);
                   reportelocal.setType("pdf");
            }catch(Exception  ex){
                System.out.println("EXXX: "+ex);
            }
        
        
        }
       public void sumarcobros(String tipo){
                BigDecimal  totalFinal = valor.getValue();
                BigDecimal total = efectivo.getValue().add(cheque.getValue()).add(deposito.getValue()).add(tarjeta.getValue()).add(descuento.getValue()).add(transferencia.getValue()).add(bancario.getValue());
            //    Double antesTotal = new Double(totalCobros.getValue());
                if(total.compareTo(totalFinal)==1){ //>
                    if(tipo.equals("efe")){
                        BigDecimal cobros =  totalCobros.getValue() ;
                        efectivo.setValue((totalFinal.subtract(cobros).compareTo(new BigDecimal(0)) == -1?new BigDecimal(0):(totalFinal.subtract(cobros))));
                    }else if(tipo.equals("dep")){
                        BigDecimal cobros = (totalCobros.getValue());
                         //deposito.setValue(""+(redondear((totalFinal -cobros),2)<0?0:redondear((totalFinal -cobros),2)));
                         deposito.setValue((totalFinal.subtract(cobros).compareTo(new BigDecimal(0)) == -1?new BigDecimal(0):(totalFinal.subtract(cobros))));
                    }else if(tipo.equals("che")){
                        BigDecimal cobros = (totalCobros.getValue());
                        //cheque.setValue(""+(redondear((totalFinal -cobros),2)<0?0:redondear((totalFinal -cobros),2)));
                        cheque.setValue((totalFinal.subtract(cobros).compareTo(new BigDecimal(0)) == -1?new BigDecimal(0):(totalFinal.subtract(cobros))));
                    }else if(tipo.equals("tar")){
                        BigDecimal cobros = (totalCobros.getValue());
                        //cheque.setValue(""+(redondear((totalFinal -cobros),2)<0?0:redondear((totalFinal -cobros),2)));
                        tarjeta.setValue((totalFinal.subtract(cobros).compareTo(new BigDecimal(0)) == -1?new BigDecimal(0):(totalFinal.subtract(cobros))));
                    }else if(tipo.equals("tra")){
                        BigDecimal cobros = (totalCobros.getValue());
                        transferencia.setValue((totalFinal.subtract(cobros).compareTo(new BigDecimal(0)) == -1?new BigDecimal(0):(totalFinal.subtract(cobros))));
                    }else if(tipo.equals("ban")){
                        BigDecimal cobros = (totalCobros.getValue());
                        bancario.setValue((totalFinal.subtract(cobros).compareTo(new BigDecimal(0)) == -1?new BigDecimal(0):(totalFinal.subtract(cobros))));
                    }
                }
                 total = efectivo.getValue().add(cheque.getValue()).add(deposito.getValue()).add(tarjeta.getValue()).add(descuento.getValue()).add(transferencia.getValue()).add(bancario.getValue());
                totalCobros.setValue(total);
}

   public void sumarretencion(String tipo){
                BigDecimal  totalFinal = valor.getValue();
                BigDecimal total = riva.getValue().add(rfuente.getValue()).add(efectivo.getValue()).add(cheque.getValue()).add(deposito.getValue()).add(tarjeta.getValue()).add(descuento.getValue()).add(transferencia.getValue()).add(bancario.getValue());
                if(total.compareTo(totalFinal)==1){  
                    if(tipo.equals("iva")){
                        BigDecimal cobros =  totalCobros.getValue() ;
                        riva.setValue((totalFinal.subtract(cobros).compareTo(new BigDecimal(0)) == -1?new BigDecimal(0):(totalFinal.subtract(cobros))));
                    }else if(tipo.equals("fuente")){
                        BigDecimal cobros = (totalCobros.getValue());
                         rfuente.setValue((totalFinal.subtract(cobros).compareTo(new BigDecimal(0)) == -1?new BigDecimal(0):(totalFinal.subtract(cobros))));
                    } 
                }
                 total = riva.getValue().add(rfuente.getValue());
                rtotal.setValue(total);
                BigDecimal total2 = efectivo.getValue().add(cheque.getValue()).add(deposito.getValue()).add(tarjeta.getValue()).add(descuento.getValue()).add(transferencia.getValue()).add(bancario.getValue());
                total2 = total2.add(rtotal.getValue());
                totalCobros.setValue(total2);
}


void ultimoRecibo(){
    suc = adm.buscarClave(sucursalEmp.getSucursal().getCodigo(), Sucursal.class);
    if(!nofactura.value.contains("REC")){
            Integer valor = suc.getSecrecibos()+1;
            nofactura.value = valor;
    }
    
}
void validarNoCuenta(){
    String nocuenta2 = nocuenta.value;
    String cliente2 = "";
    String valor2 = "";
    if(nocuenta2.length()>0){
    List cobros = adm.query("Select o from Cxcobrar as o where o.nocuenta = '"+nocuenta2+"' ");
            if(cobros.size()>0){
                    int m = 1;
                    for (Iterator itAbono = cobros.iterator(); itAbono.hasNext();) {
                        Cxcobrar det = itAbono.next();
                         cliente2 += " \n "+m + " .- "+ det.getFactura().getClientes()
                         +" \n Fecha: "+det.getFecha().toLocaleString() 
                         +" \n Valor: "+det.getDeposito() +"\n";

                         m++;
                    }
                    Messagebox.show(""+cliente2, "COMPROBANTE YA USADO EN: ", Messagebox.OK, Messagebox.ERROR);
         }
 }
}

void validarNoTransferencia(){
    String nocuenta2 = notransferencia.value;
    String cliente2 = "";
    String valor2 = "";
    if(nocuenta2.length()>0){
        List cobros = adm.query("Select o from Cxcobrar as o where o.notransferencia = '"+nocuenta2+"' ");
            if(cobros.size()>0){
                    int m = 1;
                    for (Iterator itAbono = cobros.iterator(); itAbono.hasNext();) {
                        Cxcobrar det = itAbono.next();
                         cliente2 += " \n "+m + " .- "+ det.getFactura().getClientes()
                         +" \n Fecha: "+det.getFecha().toLocaleString() 
                         +" \n Valor: "+det.getTransferencia() +"\n";

                         m++;
                    }
                    Messagebox.show(""+cliente2, "COMPROBANTE YA USADO EN: ", Messagebox.OK, Messagebox.ERROR);
            }
    }
}


   public String mes(int mes) {
        switch (mes) {
            case 0:
                return "Enero";
            case 1:
                return "Febrero";
            case 2:
                return "Marzo";
            case 3:
                return "Abril";
            case 4:
                return "Mayo";
            case 5:
                return "Junio";
            case 6:
                return "Julio";
            case 7:
                return "Agosto";
            case 8:
                return "Septiembre";
            case 9:
                return "Octubre";
            case 10:
                return "Noviembre";
            case 11:
                return "Diciembre";
        }
        return "";

    }

]]>
        </zscript>
       
        <tabbox>
            <tabs>
                <tab id="registrofactura" label="Registro Factura" />
                <tab id="impresion" label="Impresión" />
         
            </tabs>
            <tabpanels>
                <tabpanel>
                    <panel framable="true" title="Ingrese el Número de Factura" visible="false" style="position:absolute; top:20%; left:15%" id="facturaPanel"  width="330px" >
                        <panelchildren>
                            <span >
                                <label style="font-weight:bold;color:red" value="No.Factura" /> 
                            </span>
                            <span> 
                                <textbox onOK="nofactura.getValue();actualFactura();" style="text-align:center; font-weight:bold; color:blue; font-size:14px"  constraint="no empty: Ingrese el No. de Factura" id="nofactura" /> 
                                <checkbox id="esRecibo" label="Es Recibo??" style="font-weight:bold" onCheck="ultimoRecibo()" />
                            </span>
                            <button label="Continuar" onClick='nofactura.getValue();actualFactura();'/>
                        </panelchildren>
                    </panel>
                        
                                
                        
                    <grid width="100%" >
                        <rows>
                         
                            <row> 
                                <span  style="float:right">
                                    <label style="font-weight:bold" value="CLIENTE: " /> 
                                </span>
                                <span> 
                                    <label id="cliente" />  
                                    <intbox visible="false" readonly="true" id="codigocli" /> 
                                    <intbox visible="false"  readonly="true" id="codigofac" /> 
                                    <intbox visible="false"  readonly="true" id="codigodes" /> 
                                    <span>
                                    <label style="font-weight:bold" value="FECHA: " /> 
                                    </span>
                                <label id="fecha" /> 
                                </span>
                            </row>
                             
                            <!--row>
                                <span  style="float:right;"> 
                                    <label style="font-weight:bold" value="DIRECCIÓN: " />
                                </span>
                                <span>
                                    <label id="direccion" /> 
                                    <label style="font-weight:bold" value="TELEFONO:" />
                                    <label id="telefono" /> 
                                </span>
                            </row-->
                            <row>
                                <span  style="float:right">
                                    <label style="font-weight:bold" value="VALOR MORA: " />
                                </span> 
                                <span>
                                    <decimalbox readonly="true" cols="7" format="##0.00"  id="valor" />
                              
                                    <label style="font-weight:bold" value="DESCUENTO: " />
                             
                                    <decimalbox  readonly="true" format="##0.00" cols="7" id="descuento" />
                                    <label style="font-weight:bold" value="TOTAL: " />
                                    <decimalbox readonly="true" cols="7" format="##0.00"  id="totalCobros" />
                                </span>
                            </row>
                            
                         
                            <row align="center" spans="2">
                                <label style="font-weight:bold" value="FORMA DE PAGO" />
                            </row>
                            <row spans="2">
                                <grid  sclass="MyGridRowHeight" >
                                
                                    <rows>
                                
                                     
                                        <row>
                                            <span  style="float:center; font-weigth:bold;"> </span> 
                                            <label style="font-weight:bold;">Efectivo</label> 
                                            <label  style="font-weight:bold;">Depósito</label> 
                                            <label  style="font-weight:bold;">Cheque</label> 
                                            <label  style="font-weight:bold;">Tarjeta</label> 
                                            <label  style="font-weight:bold;">Transferencia</label> 
                                            <label  style="font-weight:bold;">Débito</label> 
                                        </row>
                                        <row>
                                            <span>
                                                <label  style="font-weight:bold;">VALOR:</label> 
                                            </span>

                                            <decimalbox onOK="deposito.focus()" onBlur='sumarcobros("efe")' format="##0.00" cols="7" id="efectivo" />
                                            <decimalbox cols="7"   onBlur='sumarcobros("dep")'  format="##0.00"  onOK="nocuenta.focus()" id="deposito" />
                                            <decimalbox  onBlur='sumarcobros("che")'   format="##0.00"  onOK="nocheque.focus()"  cols="7" id="cheque" />
                                            <decimalbox   onBlur='sumarcobros("tar")' onOK="notarjeta.focus()"  format="##0.00"   cols="7" id="tarjeta" />
                                            <decimalbox   onBlur='sumarcobros("tra")' onOK="notransferencia.focus()"  format="##0.00"   cols="7" id="transferencia" />
                                            <decimalbox   onBlur='sumarcobros("ban")' onOK="nodeposito.focus()"  format="##0.00"   cols="7" id="bancario" />
                                                
                                        </row>
                                        <row>
                                            <label  style="font-weight:bold;">NÚMERO:</label>
                                            <span> - </span>
                                            <textbox id="nocuenta" onBlur='validarNoCuenta();' cols="7"   onOK="cheque.focus()"  />
                                            <textbox id="nocheque" cols="7"  onOK="tarjeta.focus()"  />
                                            <textbox id="notarjeta"  cols="7"  onOK="transferencia.focus()"  />
                                            <textbox id="notransferencia" onBlur="validarNoTransferencia();"  cols="7"  onOK="btnguardar.focus()"  />
                                            <textbox id="nodeposito"   cols="7"  onOK="btnguardar.focus()"  />
                                            
                                        </row>
                                        <row>
                                            <label  style="font-weight:bold;"> </label>
                                            <span>   </span>
                                            <bandbox  readonly="true" value="Banco" width="50px"  id="bdDeposito">
                                                    <bandpopup>
                                                        <vbox>
                                                            <listbox  id="bancodep" width="250px"
                                                                    onSelect="bdDeposito.value=self.selectedItem.label;bdDeposito.closeDropdown();">
                                                                <listhead>
                                                                    <listheader label="Seleccione un Banco"/>
                                                                </listhead>
                                                                <listitem forEach="${bancos}" value="${each}">
                                                                    <listcell label="${each.nombre}" />

                                                                </listitem>
                                                            </listbox>
                                                        </vbox>
                                                    </bandpopup>
                                                </bandbox>
                                             
                                            <bandbox   readonly="true"   value="Banco" width="50px"  id="bd22">
                                                    <bandpopup>
                                                        <vbox>
                                                            <listbox  id="bancocheque" width="250px"
                                                                    onSelect="bd22.value=self.selectedItem.label;bd22.closeDropdown();">
                                                                <listhead>
                                                                    <listheader label="Seleccione un Banco"/>
                                                                </listhead>
                                                                <listitem forEach="${bancos}" value="${each}">
                                                                    <listcell label="${each.nombre}" />

                                                                </listitem>
                                                            </listbox>
                                                        </vbox>
                                                    </bandpopup>
                                                </bandbox>
                                            <span>   </span>
                                             
                                            <bandbox  readonly="true" value="Banco" width="50px"  id="bd223">
                                                    <bandpopup>
                                                        <vbox>
                                                            <listbox  id="bancotransferencia" width="250px"
                                                                    onSelect="bd223.value=self.selectedItem.label;bd223.closeDropdown();">
                                                                <listhead>
                                                                    <listheader label="Seleccione un Banco"/>
                                                                </listhead>
                                                                <listitem forEach="${bancos}" value="${each}">
                                                                    <listcell label="${each.nombre}" />

                                                                </listitem>
                                                            </listbox>
                                                        </vbox>
                                                    </bandpopup>
                                                </bandbox>
                                                  
                                            <bandbox  readonly="true" value="Banco" width="50px"  id="bd224">
                                                    <bandpopup>
                                                        <vbox>
                                                            <listbox  id="bancoban" width="250px"
                                                                    onSelect="bd224.value=self.selectedItem.label;bd224.closeDropdown();">
                                                                <listhead>
                                                                    <listheader label="Seleccione un Banco"/>
                                                                </listhead>
                                                                <listitem forEach="${bancos}" value="${each}">
                                                                    <listcell label="${each.nombre}" />

                                                                </listitem>
                                                            </listbox>
                                                        </vbox>
                                                    </bandpopup>
                                                </bandbox>
                                        </row>
                                        <row>
                                            <span>   </span>
                                            <span>   </span>
                                            <span><datebox  width="50px"  id="fechadeposito"  format="dd-MM-yyyy" />   </span>
                                            <span><datebox  width="50px"  id="fechacheque"  format="dd-MM-yyyy" />   </span>
                                            <span>   </span>
                                            <datebox  width="50px" id="fechatransferencia"  format="dd-MM-yyyy" />   
                                        </row>
                          
                            
                                    </rows>
                                </grid>
                            </row>
                                
                            <row align="center" spans="2">
                                <label style="font-weight:bold" value="RETENCIONES" />
                            </row>
                            <row spans="2" >
                                <grid width ="100%">
                                    <rows>
                                        <row>
                                            <span  style="float:center; font-weigth:bold;"> </span> 
                                            <label style="font-weight:bold;">Retención IVA</label> 
                                            <label  style="font-weight:bold;">Retención Fuente</label> 
                                            <label  style="font-weight:bold;">Total Retención </label> 
                                            <label  style="font-weight:bold;">No.Retención </label> 
                                        </row>
                                        <row>
                                            <span  style="float:center; font-weigth:bold;"> </span> 
                                            <decimalbox onOK="deposito.focus()" onBlur='sumarretencion("iva")' format="##0.00" cols="7" id="riva" />
                                            <decimalbox cols="7"   onBlur='sumarretencion("fuente")'  format="##0.00"  onOK="nocuenta.focus()" id="rfuente" />
                                            <decimalbox readonly="true" format="##0.00"  onOK="nocheque.focus()"  cols="7" id="rtotal" />
                                            <textbox id="noretencion"  cols="7"  onOK="btnguardar.focus()"  />
                                               
                                    
                                        </row>
                                    </rows>
                                
                            
                                </grid>    
                            </row>
                            
                            <row align="center" spans="2">
                                <button label="GUARDAR PAGO" image="/images/guardar.gif" width="300px" onClick="guardar()" id="btnguardar" />
                            </row>
                           
                           
                           
                        </rows>
                  

                    </grid>
                </tabpanel>
                <tabpanel>
                    <jasperreport height="330px" id="reportelocal" />
                </tabpanel>
            </tabpanels>

    
        </tabbox>
 
          
        <zscript>
            void cargar(){
            
            try{
                    String factura = facturarCliente.getAttribute("codigoFactura");
                    java.math.BigDecimal valoraPagar = facturarCliente.getAttribute("valoraPagar");
                    System.out.println("codigoFactura: "+factura+" " + valoraPagar);
                    Factura facEnc = adm.buscarClave(new Integer(factura),Factura.class);
                    cliente.value = facEnc.getClientes().getApellidos() +" "+facEnc.getClientes().getNombres();
                    codigocli.value = facEnc.getClientes().getCodigo();
                    codigofac.value = new Integer(facEnc.getCodigo());
                    direccion.value = facEnc.getClientes().getDireccion();
                    telefono.value  = facEnc.getClientes().getTelefono();
                    fecha.value = (adm.Date()).toLocaleString();
                    valor.value = valoraPagar;
                    totalCobros.value = valoraPagar;
                    efectivo.value = valoraPagar;
                    cheque.value = BigDecimal.ZERO;
                    tarjeta.value = BigDecimal.ZERO;
                    deposito.value = BigDecimal.ZERO;
                    transferencia.value = BigDecimal.ZERO;
                    riva.value =  BigDecimal.ZERO;
                    rtotal.value =  BigDecimal.ZERO;
                    rfuente.value =  BigDecimal.ZERO;
                    bancario.value =  BigDecimal.ZERO;
                    noretencion.value =  "";
                    if(facEnc.getNumero() != null){
                        nofactura.value =  facEnc.getNumero().substring(6,facEnc.getNumero().length());
                        nofactura.readonly = true;
                        
                        try{
                                if(nofactura.value.contains("REC")){
                                    esRecibo.checked = true;
                                    ultimoRecibo();
                                }
                         }catch(Exception abc){
                         }
                    }
                    
                    List descuentos = adm.query("Select o from Descuentos as o where o.aplicado = false and o.factura.codigo = '"+ facEnc.getCodigo() +"' ");
                    if(descuentos.size()>0){
                            Descuentos descuentoIt = descuentos.get(0);
                            codigodes.value = descuentoIt.getCodigo();
                            descuento.value = descuentoIt.getValor();
                            efectivo.value = valoraPagar.subtract(descuento.value);
                    }else{
                            codigodes.value = 0;
                            descuento.value = new BigDecimal(0);
                    }
                    
             }catch(Exception e){
                     System.out.println("ERROR EN FACTURA "+e);
             }
            
                    
            }
        </zscript>
    </window>
</zk>