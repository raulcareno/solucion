<?page id="contratospage"?>
<window id="contratosventana"  border="normal" >
    <style>
.MyGridRowHeight tr.z-row td.z-row-inner  
{
      background: white;
      border-top: none;
      border-left: 1px solid white;
      border-right: 1px solid #CCC;
      //border-bottom: 1px solid #DDD;
      border-bottom: none;
 
}
/*.MyGridRowHeight tr.z-grid-odd td.z-row-inner, tr.z-grid-odd{
  background: #F8F8F8;
} */
.MyGridRowHeight td.z-row-inner
{
    padding: 0px;
    //overflow: hidden;
}
    </style>
    <zscript>   <![CDATA[
    
  import bean.EventDAO; 
  import java.util.ArrayList; 
  import jcinform.persistencia.*;
  import jcinform.conexion.*;
  import jcinform.bean.*;
  import java.math.BigDecimal;
import java.text.SimpleDateFormat;
  import jcinform.bean.generarFacturas;
    import jcinform.bean.sources.*;
import jcinform.bean.sources.clasestmp.Pendientes;

  Session ses = Sessions.getCurrent();
  //ses.setAttribute(org.zkoss.web.Attributes.PREFERRED_LOCALE, Locale.ENGLISH);
    Administrador adm = new Administrador();
    static Contratos equi = new Contratos();
    Permisos permiso = new Permisos();
    Empleados usuarioActual = ses.getAttribute("user");
   Empresa empresa = ses.getAttribute("empresa");
    Empleadossucursal sucursalEmp = ses.getAttribute("sector");
      generarFacturas gen = new generarFacturas();
         String directorioReportes = empresa.getReportes();
      
      
List cantonesList = adm.query("Select o from Canton as o ");
List empleadosList = adm.query("Select o from Empleados as o ");
 
    void seleccionarTodos(Checkbox estado,Integer tipo){
                if(tipo == 0){
                       List col = facturasDatos.getRows().getChildren();
                              for (int i = 0; i < col.size(); i++) {
                                     Row object = (Row) col.get(i);
                                      List labels = object.getChildren();
                                        ((Checkbox) labels.get(0)).setChecked(estado.isChecked());
                               }
                 }else{
                        List col = facturasDatosAsignados.getRows().getChildren();
                              for (int i = 0; i < col.size(); i++) {
                                     Row object = (Row) col.get(i);
                                      List labels = object.getChildren();
                                        ((Checkbox) labels.get(0)).setChecked(estado.isChecked());
                               }
                 
                 }
    }

      
    String llenarCeros(String numero) {
        
        while (numero.length() < 7) {
            numero = "0" + numero;
        }        
        return numero;
        
    }
    
 
  void guardarFilas(){

                       Date fechaAc = fecha.value;
                       String fec = gen.convertiraString(fechaAc);
                       if(empleados.selectedItem == null){
                            Messagebox.show("Seleccione un Empleado..!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                            empleados.focus();
                            return;
                       }
                             List col = facturasDatosAsignados.getRows().getChildren();
                             for (int i = 0; i < col.size(); i++) {
                                     Row object = (Row) col.get(i);
                                      List labels = object.getChildren();
                                            try{
                                              Empleadosfacturas empf = (Empleadosfacturas)object.getValue();
                                              BigDecimal valorAnt = empf.getTotal();
                                              
                                              empf.setVisitado(true);
                                              empf.setFecharegreso(adm.Date());
                                             empf.setCobrado(false);
                                              empf.setEfectivo(((Decimalbox)labels.get(6)).getValue());
                                              empf.setCheque(((Decimalbox)labels.get(7)).getValue());
                                              empf.setNocheque(((Textbox)labels.get(8)).getValue());
                                              empf.setDebito(((Decimalbox)labels.get(9)).getValue());
                                              empf.setNocuenta(((Textbox)labels.get(10)).getValue());
                                              empf.setTarjeta(((Decimalbox)labels.get(11)).getValue());
                                              empf.setNotarjeta(((Textbox)labels.get(12)).getValue());
                                              BigDecimal tot = empf.getEfectivo().add(empf.getCheque()).add(empf.getDebito()).add(empf.getTarjeta());
                                              empf.setTotal(tot);
                                                  if(tot.doubleValue()>0){
                                                        empf.setTotal(tot.add(empf.getDescuento()));
                                                        empf.setDescuento(((Decimalbox)labels.get(5)).getValue());
                                                        empf.setCobrado(true);
                                                  }
                                              adm.actualizar(empf);
                                                    Cxcobrar cobrar = new Cxcobrar(adm.getNuevaClave("Cxcobrar", "codigo"));
                                                    cobrar.setFactura(empf.getFactura());
                                                    cobrar.setDebe(new BigDecimal(0));
                                                    cobrar.setHaber(empf.getTotal());
                                                    cobrar.setFecha(adm.Date());
                                                    cobrar.setTipo("P");
                                                    cobrar.setDescuento(empf.getDescuento());
                                                    cobrar.setEfectivo(empf.getEfectivo());
                                                    cobrar.setCheque(empf.getCheque());
                                                    cobrar.setDebito(empf.getDebito());
                                                    cobrar.setTarjeta(empf.getTarjeta());
                                                    cobrar.setNocheque(empf.getNocheque());
                                                    cobrar.setNotarjeta(empf.getNotarjeta());
                                                    if(cobrar.getHaber().doubleValue()>0){
                                                        adm.guardar(cobrar);
                                                    }


                                              }catch(Exception ax){
                                                System.out.println(""+ax.getMessage());
                                            }

                                        
                          }

 }
   void facturasPendientesEmpleado(){
               if(empleados.selectedItem == null){
                            Messagebox.show("Seleccione un Empleado..!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                            empleados.focus();
                            return;
                       }
        try{
           Date fechaAc = fecha.value;
           String fec = gen.convertiraString(fechaAc);
            List facturasDatosAsignados2 =  adm.queryNativo("Select o.* from Empleadosfacturas as o " +
            " where o.empleados = '"+((Empleados)empleados.selectedItem.value).getCodigo()+ "' and  " +
            " date(o.fecha) = '"+ fec +"' ",Empleadosfacturas.class);
            facturasDatosAsignados.getRows().getChildren().clear();
            ArrayList contratosAnadidos = new ArrayList();
            int i =0;
                for (Iterator itna = facturasDatosAsignados2.iterator(); itna.hasNext();) {
                          Empleadosfacturas empf = (Empleadosfacturas) itna.next();
                           Row row = new Row();
                                   if(row == null){
                                        row = new Row();
                                   }
                 
                                    row = new Row();
                                    row.setValue(empf);
                                    row.appendChild(new Label(empf.getFactura().getNumero().substring(9)));
                                    SimpleDateFormat d1 = new SimpleDateFormat("dd-MM-yyyy");
                                    Date d = empf.getFecha();
                                    row.appendChild(new Label(d1.format(d)+""));
                                    row.appendChild(new Label(empf.getFactura().getClientes()+""));
                                    row.appendChild(new Label(empf.getSaldo()+""));
                                    



                            Intbox codigodes = new Intbox(0);
                            codigodes.setCols(1);
                            codigodes.setDisabled(true);
                            Decimalbox descuento = new Decimalbox();
                            descuento.setStyle("text-align:center");
                            descuento.setFormat("#00.00");
                            descuento.setCols(4);
                            descuento.setTabindex(0);
                            descuento.setReadonly(true);
                            descuento.setValue(new BigDecimal(0));

                            List descuentos = adm.query("Select o from Descuentos as o where o.aplicado = false and o.factura.codigo = '"+ empf.getFactura().getCodigo() +"' ");
                            if(descuentos.size()>0){
                                    Descuentos descuentoIt = descuentos.get(0);
                                    codigodes.value = descuentoIt.getCodigo();
                                    descuento.value = descuentoIt.getValor();
                                    //efectivo.value = valoraPagar.subtract(descuento.value);
                            }
                            row.appendChild(codigodes);
                            row.appendChild(descuento);
                            
                           Decimalbox efectivo = new Decimalbox();
                            efectivo.setStyle("text-align:center");
                            efectivo.setFormat("#00.00");
                            efectivo.setCols(4);
                            efectivo.setTabindex(1);
                            efectivo.setValue(empf.getEfectivo());
                            row.appendChild(efectivo);

                            Decimalbox cheque = new Decimalbox();
                            cheque.setStyle("text-align:center");
                            cheque.setFormat("#00.00");
                            cheque.setCols(4);
                            cheque.setTabindex(2);
                            cheque.setValue(empf.getCheque());
                            row.appendChild(cheque);

                           Textbox nocheque = new Textbox();
                            nocheque.setStyle("text-align:center");
                            nocheque.setTabindex(2);
                            nocheque.setCols(6);
                            nocheque.setValue(empf.getNocheque());
                            row.appendChild(nocheque);

                            Decimalbox debito = new Decimalbox();
                            debito.setStyle("text-align:center");
                            debito.setFormat("#00.00");
                            debito.setCols(4);
                            debito.setTabindex(3);
                            debito.setValue(empf.getDebito());
                            row.appendChild(debito);

                            Textbox nocuenta = new Textbox();
                            nocuenta.setStyle("text-align:center");
                            nocuenta.setTabindex(3);
                            nocuenta.setCols(6);
                            nocuenta.setValue(empf.getNocuenta());
                            row.appendChild(nocuenta);

                            Decimalbox tarjeta = new Decimalbox();
                            tarjeta.setStyle("text-align:center");
                            tarjeta.setCols(4);
                            tarjeta.setFormat("#00.00");
                            tarjeta.setTabindex(4);
                            tarjeta.setValue(empf.getTarjeta());
                            row.appendChild(tarjeta);

                            Textbox notarjeta = new Textbox();
                            notarjeta.setStyle("text-align:center");
                            notarjeta.setTabindex(4);
                            notarjeta.setCols(6);
                            notarjeta.setValue(empf.getNotarjeta());
                            row.appendChild(notarjeta);

                            filasFacAsignados.appendChild(row);
                }

                   }catch(Exception e){
                            //Messagebox.show("Seleccione primero un CLIENTE  ...! \n"+e, "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                            System.out.println("ERROR: "+e);
                   }

 }
 
 void imprimirTodos(){
            List col = facturasDatos.getRows().getChildren();
            String codigos = "";
                           for (int i = 0; i < col.size(); i++) {
                                     Row object = (Row) col.get(i);
                                     List labels = object.getChildren();
                                     if(((Checkbox) labels.get(0)).isChecked()){
                                                if(!labels.get(1).equals("")){
                                                      Integer facCodigo = object.getValue();
                                                     codigos += facCodigo+",";
                                                }
                                     }
                                                 
                            }
            if(codigos.length() >0){
                codigos = codigos.substring(0,codigos.length()-1);
                Map parameters = new HashMap();
                parameters.put("empresa",empresa.getRazonsocial());
                parameters.put("ruc",empresa.getRuc());
                parameters.put("direccion",empresa.getDireccion());
                parameters.put("telefono",empresa.getTelefono());
                    List detalleFac = adm.query("Select o from Detalle as o " + 
                    "where o.factura.codigo in (" + codigos + ") order by o.factura.numero  ");
                    ArrayList detalles = new ArrayList();
                   for (Iterator itAbono =detalleFac.iterator(); itAbono.hasNext();) {
                        Detalle det = itAbono.next();
                         detalles.add(det);
                   }
                   ReporteFacturaDataSource ds = new ReporteFacturaDataSource(detalles);
                   reportelocal.setSrc(directorioReportes+"factura.jasper");
                   reportelocal.setParameters(parameters);
                   reportelocal.setDatasource(ds);
                   reportelocal.setType("pdf");
                   impresion.selected = true;
                
            }
                
 
 }
 void imprimirTodosEmpleado(){
            List col = facturasDatosAsignados.getRows().getChildren();
            ArrayList detalles = new ArrayList();
            String codigos = "";
                           for (int i = 0; i < col.size(); i++) {
                                     Row object = (Row) col.get(i);
                                     List labels = object.getChildren();
                                         Integer facCodigo = object.getValue();
                                         codigos += facCodigo+",";
                            }
            if(codigos.length() >0){
                codigos = codigos.substring(0,codigos.length()-1);
//--------------------------------------------------------------------------------------------
            String quer = "SELECT fa.codigo, fa.fecha,max(cx.fecha), fa.total,  (SUM(cx.debe) - SUM(cx.haber)) saldo, fa.contratos,fa.clientes "
                     + "FROM cxcobrar cx, factura  fa "   +
                        " WHERE fa.codigo in ("+ codigos +")  " + 
                        "  AND cx.factura = fa.codigo GROUP BY fa.codigo  "
                     + " HAVING  (SUM(cx.debe) - SUM(cx.haber)) > 0 order by fa.contratos, fa.fecha ";
                     System.out.println(quer);
            List facEncontradas =  adm.queryNativo(quer); 
            System.out.println(""+quer);
            if (facEncontradas.size() > 0) {
                Pendientes pendi = null;
                for (Iterator itna = facEncontradas.iterator(); itna.hasNext();) {
                    Vector vec = (Vector) itna.next();
                    pendi = new Pendientes();
                    Clientes cli = adm.buscarClave(vec.get(6),Clientes.class);
                    pendi.setCliente(cli);
                    pendi.setFactura("" + vec.get(0));
                    Date d = (Date) vec.get(1);
                    pendi.setFecha(d);
                    Date d = (Date) vec.get(2);
                    pendi.setFechapago(d);
                    
                    Contratos c = (Contratos) adm.buscarClave(vec.get(5), Contratos.class);
                    pendi.setPlan(c.getPlan()+"");
                    pendi.setDireccion(c.getDireccion());
                    pendi.setTotal((BigDecimal) vec.get(3));
                    pendi.setSaldo((BigDecimal) vec.get(4));
                    detalles.add(pendi);
                }

            }
        ReportePendientesDataSource ds = new ReportePendientesDataSource(detalles);                
                
                
                
//-------------------------------------------------------------------------------------------------------
                Map parameters = new HashMap();
                parameters.put("empresa",empresa.getRazonsocial());
                parameters.put("ruc",empresa.getRuc());
                parameters.put("direccion",empresa.getDireccion());
                parameters.put("telefono",empresa.getTelefono());    
                parameters.put("empleados",empleados.selectedItem.value+"");    
                   reportelocal.setSrc(directorioReportes+"facturasempleado.jasper");
                   reportelocal.setParameters(parameters);
                   reportelocal.setDatasource(ds);
                   reportelocal.setType("pdf");
                   impresion.selected = true;
                
            }
                
 
 }
  ]]>
    </zscript>
    <div>
        <!--button label="MOSTRAR" id="mensaje"  onClick="llamar()" /-->

        <tabbox width="100%"  >
            <tabs>
                <tab label="Facturas Pendientes" id="facturas" />
                <tab id="impresion" label="Impresión" />
            </tabs>
            <tabpanels>
                <tabpanel>
       
                    <groupbox id="panel" mold="3d" width="100%">
                        <hbox>
                            <vbox>
                                <grid>
                                    <rows>
                                        <row>
                                            <span style="float:right"> Seleccione un Empleado(*):</span>
                                            <bandbox  width="200px" readonly="true"  id="bdEmpleados">
                                                <bandpopup>
                                                    <vbox>
                                                        <listbox id="empleados" width="250px"
                                                     onSelect="bdEmpleados.value=self.selectedItem.label; bdEmpleados.closeDropdown(); facturasDatosAsignados.getRows().getChildren().clear();">
                        
                                                            <listitem forEach="${empleadosList}" value="${each}">
                                                                <listcell label="${each.apellidos} ${each.nombres}" />

                                                            </listitem>
                                                        </listbox>
                                                    </vbox>
                                                </bandpopup>
                                            </bandbox>
                                              
                                        </row>
                                        <row>
                                            <span style="float:right"> Fecha(*):</span>
                                            <span>
                                                <datebox id="fecha" format="dd-MMM-yyyy" onCreate="self.value = adm.Date()"/>
                                                <button label="Buscar" onClick="facturasPendientesEmpleado()"/>
                                            </span>
                                        </row>
                                        <row spans="2" align="center">
                                            <span>
                                                <button label="Guardar" image="/images/guardar.gif" onClick="guardarFilas();facturasPendientesEmpleado();"/>
                                                <button label="Imprimir" image="/images/imprimir.gif" onClick="imprimirTodosEmpleado()"/>
                                            </span>
                                        </row>
                                        
                                    </rows>
                                </grid>

                                <grid height="350px"  sclass="MyGridRowHeight2"  fixedLayout="true"  id="facturasDatosAsignados" >
                                    <columns>
                                        <!--column  width="35px" >
                                            <checkbox id="todos2" label="Selección" onCheck="seleccionarTodos(self,1)" />
                                        </column-->
                                        <column   width="68px" label="# Fac."/>
                                        <column   width="68px"   label="Fecha"/>
                                        <column  width="150px" label="Cliente "/>
                                        <column    width="45px"  label="Saldo"/>
                                        <column  visible="false"  width="45px"  label="CodigoDescuento"/>
                                        <column    width="45px"  label="Dscto."/>
                                        <column    width="45px"  label="Efec."/>
                                        <column    width="45px"  label="Cheque"/>
                                        <column    width="50px"  label="No.Cheq."/>
                                        <column    width="45px"  label="Debito"/>
                                        <column    width="50px"  label="No.Cuenta"/>
                                        <column    width="45px"  label="Tarjeta"/>
                                        <column    width="50px"  label="No.Tarj."/>

                                    </columns>
                                    <rows id="filasFacAsignados">
                                    </rows>
                                </grid>
                            </vbox>
                        </hbox>
                 
                  
                    </groupbox>
 

                </tabpanel>
           
                <tabpanel>
                    <panel height="550px" style="margin-bottom:10px"
                           title="Reporte" border="normal">
                        <panelchildren>
                            <jasperreport id="reportelocal" />
                        </panelchildren>
                    </panel>
                
                </tabpanel>
            </tabpanels>
            
            
        </tabbox>
        <panel framable="true" visible="false" id="contratosPanel" title="CONTRATOS CON ÉSTE CLIENTE" style="position:absolute; top:5%; left:5%" width="600px">
            <panelchildren>
                <listbox mold="paging" rows="10" pageSize="10" onSelect="llenar(self.selectedItem.value); contratosPanel.visible = false;modificar.disabled = false;anadir.disabled = false;" id="contratosCliente" width="100%">
                    <listhead>
                        <listheader label="Contra."/>
                        <listheader label="Plan"/>
                        <listheader label="Fecha"/>
                        <listheader label="Estado"/>
                    </listhead>
                    <listitem forEach="${allEvents}" value="${each}">
                        <listcell label="${each.fecha}" />
                    </listitem>
                </listbox>
                <button label="CERRAR" onClick="contratosPanel.visible = false"/>
            </panelchildren>
        </panel>
    </div>
</window>
