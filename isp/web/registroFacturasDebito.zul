<?page id="contratospage"?>
<window id="contratosventana"  border="normal" >
    <style>
        .MyGridRowHeight tr.z-row td.z-row-inner  
        {
        background: white;
        border-top: none;
        border-left: 1px solid white;
        border-right: 1px solid #CCC;
        //border-bottom: 1px solid #DDD;
        border-bottom: none;
 
        }
        /*.MyGridRowHeight tr.z-grid-odd td.z-row-inner, tr.z-grid-odd{
        background: #F8F8F8;
        } */
        .MyGridRowHeight td.z-row-inner
        {
        padding: 0px;
        //overflow: hidden;
        }
    </style>
    <zscript>   <![CDATA[
    
  import bean.EventDAO; 
  import java.util.ArrayList; 
  import jcinform.persistencia.*;
  import jcinform.conexion.*;
  import jcinform.bean.*;
  import java.math.BigDecimal;
import java.text.SimpleDateFormat;
  import jcinform.bean.generarFacturas;
    import jcinform.bean.sources.*;
import jcinform.bean.sources.clasestmp.Pendientes;
import bean.reportesClase;

  Session ses = Sessions.getCurrent();
    Administrador adm = new Administrador();
    static Contratos equi = new Contratos();
    Permisos permiso = new Permisos();
    Empleados usuarioActual = ses.getAttribute("user");
   Empresa empresa = ses.getAttribute("empresa");
    Empleadossucursal sucursalEmp = ses.getAttribute("sector");
      generarFacturas gen = new generarFacturas();
         String directorioReportes = empresa.getReportes();
      
       ReportesClase reportes = new ReportesClase();
List cantonesList = adm.query("Select o from Canton as o ");
List empleadosList = new ArrayList();
if(usuarioActual.getTipo().equals("OTRO")){
        empleadosList = adm.query("Select o from Empleados as o ");
}else{
        empleadosList.add(usuarioActual);
}
 
    void seleccionarTodos(Checkbox estado,Integer tipo){
                if(tipo == 0){
                       List col = facturasDatosAsignados.getRows().getChildren();
                              for (int i = 0; i < col.size(); i++) {
                                     Row object = (Row) col.get(i);
                                      List labels = object.getChildren();
                                        ((Checkbox) labels.get(8)).setChecked(estado.isChecked());
                               }
                 }else{
                        List col = facturasDatosAsignados.getRows().getChildren();
                              for (int i = 0; i < col.size(); i++) {
                                     Row object = (Row) col.get(i);
                                      List labels = object.getChildren();
                                        ((Checkbox) labels.get(8)).setChecked(estado.isChecked());
                               }
                 
                 }
    }

      
    String llenarCeros(String numero) {
        
        while (numero.length() < 7) {
            numero = "0" + numero;
        }        
        return numero;
        
    }
    
 
  void guardarFilas(){

                       Date fechaAc = fecha.value;
                       Date creado = adm.Date();
                       String fec = gen.convertiraString(fechaAc);
                       if(numeroinforme.value == null){
                            Messagebox.show("Ingrese un NÃºmero de Informe ..!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                            empleados.focus();
                            return;
                       }
                             List col = facturasDatosAsignados.getRows().getChildren();
                             for (int i = 0; i < col.size(); i++) {
                                     Row object = (Row) col.get(i);
                                      List labels = object.getChildren();
                                            try{
                                              Facturasenviadas empf = (Facturasenviadas)object.getValue();
                                              BigDecimal valorAnt = empf.getTotal();
                                              
                                              empf.setVisitado(true);
                                              empf.setFecharegreso(adm.Date());
                                              empf.setCobrado(false);
                                              empf.setDebito(((Decimalbox)labels.get(6)).getValue());
                                              empf.setNocuenta(((Textbox)labels.get(7)).getValue());
                                              BigDecimal tot = empf.getDebito();
                                              empf.setTotal(tot);
                                                  if(tot.doubleValue()>0){
                                                        empf.setDescuento(((Decimalbox)labels.get(5)).getValue());
                                                        empf.setTotal(tot.add(empf.getDescuento()));
                                                         empf.setCobrado(true);
                                                         try{
                                                             Descuentos descu = adm.buscarClave(((Intbox)labels.get(4)).getValue(),Descuentos.class);
                                                             if(descu != null){
                                                                 descu.setAplicado(true);
                                                                 descu.setFechaaplicado(adm.Date());
                                                                 adm.actualizar(descu);
                                                             }
                                                         }catch(Exception em){
                                                            System.out.println("ERROR EN DESCUENTO: "+em);
                                                         }
                                                  }
                                              adm.actualizar(empf);
                                                    Cxcobrar cobrar = new Cxcobrar(adm.getNuevaClave("Cxcobrar", "codigo"));
                                                    cobrar.setFactura(empf.getFactura());
                                                    cobrar.setDebe(new BigDecimal(0));
                                                    cobrar.setHaber(empf.getTotal());
                                                    cobrar.setFecha(adm.Date());
                                                    cobrar.setTipo("P");
                                                    cobrar.setDescuento(new BigDecimal(0));
                                                    cobrar.setEfectivo(new BigDecimal(0));
                                                    cobrar.setCheque(new BigDecimal(0));
                                                    cobrar.setDeposito(new BigDecimal(0));
                                                    cobrar.setBancario(empf.getDebito());
                                                    cobrar.setTarjeta(new BigDecimal(0));
                                                    cobrar.setBancoban(empf.getBancos());
                                                    cobrar.setNocuentaban(empf.getNocuenta());
                                                    cobrar.setRtotal(BigDecimal.ZERO);
                                                    cobrar.setNocheque("");
                                                    cobrar.setEmpleados(usuarioActual);
                                                    cobrar.setNotarjeta("");
                                                    if(cobrar.getHaber().doubleValue()>0){
                                                            if(!((Checkbox)labels.get(8)).isDisabled()){
                                                                adm.guardar(cobrar);
                                                                    try{
                                                                        Depositos dep = new Depositos(adm.getNuevaClave("Depositos", "codigo"));
                                                                        dep.setNodeposito(empf.getNocuenta());
                                                                        dep.setFactura(empf.getFactura().getNumero().replace("FAC","00")+""); // char
                                                                        dep.setCxcobrar(cobrar.getCodigo()); //int
                                                                        dep.setFechacxc(creado);//date
                                                                        dep.setContable(empf.getBancos().getCuenta()); //char
                                                                        dep.setPago(empf.getDebito()); //decimal
                                                                        dep.setContrato(empf.getFactura().getContratos().getContrato());//int
                                                                        dep.setFecha(creado);//date
                                                                        dep.setEmision(empf.getFactura().getEmision());//date
                                                                        dep.setVence(empf.getFactura().getVencimiento());//date
                                                                        dep.setDetalle(mes(empf.getFactura().getFecha().getMonth()));//date
                                                                        dep.setCliente(labels.get(2).getValue().substring(4)+"");//char
                                                                        dep.setRuc(labels.get(9).getValue()+"");//char
                                                                        dep.setMonto(empf.getFactura().getTotal());//date 

                                                                        dep.setEmpleados(usuarioActual); //int
                                                                        Integer facturaCodigo = empf.getFactura().getCodigo();

                                                                        List pagosHechos = adm.queryNativo("Select count(*) from Cxcobrar " + 
                                                                                " where factura =  "+facturaCodigo+"  " + 
                                                                                " and haber > 0 ");
                                                                                Integer conteo = 0;
                                                                        if(pagosHechos.size()>0){
                                                                                Integer val = new Integer(pagosHechos.get(0).toString().replace("[","").replace("]",""));
                                                                                conteo = val;
                                                                        }
                                                                        List abonoCancela = adm.queryNativo("Select if((SUM(debe) - SUM(haber)) = 0,'CA','AB') from Cxcobrar " + 
                                                                                " where factura =  "+facturaCodigo+"  ");
                                                                      String tipoCance = "AB";
                                                                            if(abonoCancela.size()>0){
                                                                                String val = (abonoCancela.get(0).toString().replace("[","").replace("]",""));
                                                                                tipoCance = val;
                                                                            }
                                                                        dep.setTipo(tipoCance); //char
                                                                        dep.setNopago(conteo);
                                                                        dep.setComentario(conteo+"");//char
                                                                        adm.guardar(dep);

                                                                    }catch(Exception ax){
                                                                        System.out.println(""+ax.printStackTrace());
                                                                    }
                                                                
                                                                
                                                                
                                                            }
                                                    }


                                              }catch(Exception ax){
                                                System.out.println(ax+" --- "+ax.getMessage());
                                            }

                                        
                          }

 }
  void AsignarNo(String transfer){
                             List col = facturasDatosAsignados.getRows().getChildren();
                             for (int i = 0; i < col.size(); i++) {
                                     Row object = (Row) col.get(i);
                                      List labels = object.getChildren();
                                            try{
                                                    if(!((Checkbox)labels.get(8)).isDisabled()){
                                                    if(((Decimalbox)labels.get(6)).doubleValue()>0){
                                                        ((Textbox)labels.get(7)).setValue(""+transfer);
                                                     }
                                                    }
                                              }catch(Exception ax){
                                                System.out.println(ax+" --- "+ax.getMessage());
                                            }
                          }
                         
 }
 void sumaTotal(){
            BigDecimal total = new BigDecimal("0");
            int totalSeleccionados = 0;
       
                             List col = facturasDatosAsignados.getRows().getChildren();
                             for (int i = 0; i < col.size(); i++) {
                                     Row object = (Row) col.get(i);
                                      List labels = object.getChildren();
                                            try{
                                                    if(!((Checkbox)labels.get(8)).isDisabled()){
                                                        total = total.add(((Decimalbox)labels.get(6)).getValue());
                                                        if(((Checkbox)labels.get(8)).isChecked()){
                                                            totalSeleccionados ++;
                                                        }
                                                    }
                                              }catch(Exception ax){
                                                System.out.println(ax+" --- "+ax.getMessage());
                                            }
                          }
                          totalLabel.value = ""+total;
                          totalLabel2.value = ""+totalSeleccionados;
 }
   void facturasPendientesEmpleado(){
        try{
           Date fechaAc = fecha.value;
           String fec = gen.convertiraString(fechaAc);
            List facturasDatosAsignados2 =  adm.queryNativo("Select o.* from Facturasenviadas as o " +
            " where o.numero = '"+ numeroinforme.value + "' ",Facturasenviadas.class);
            facturasDatosAsignados.getRows().getChildren().clear();
            ArrayList contratosAnadidos = new ArrayList();
            int i =0;
            int si =0;
                for (Iterator itna = facturasDatosAsignados2.iterator(); itna.hasNext();) {
                          Facturasenviadas empf = (Facturasenviadas) itna.next();
                           Row row = new Row();
                                   if(row == null){
                                        row = new Row();
                                   }
                 
                                    row = new Row();
                                    row.setValue(empf);
                                    row.appendChild(new Label(empf.getFactura().getNumero().substring(9)));
                                    SimpleDateFormat d1 = new SimpleDateFormat("MMM-yyyy");
                                    Date d = empf.getFactura().getFecha();
                                    row.appendChild(new Label(d1.format(d)+""));
                                    row.appendChild(new Label("("+empf.getFactura().getContratos().getEstado().substring(0,1)+") "+ empf.getFactura().getClientes()));
                                    row.appendChild(new Label(empf.getSaldo()+""));
                                    



                            Intbox codigodes = new Intbox(0);
                            codigodes.setCols(1);
                            codigodes.setDisabled(true);
                            final Decimalbox descuento = new Decimalbox();
                            descuento.setStyle("text-align:center");
                            descuento.setFormat("#00.00");
                            descuento.setCols(4);
                            descuento.setTabindex(0);
                            descuento.setReadonly(true);
                            descuento.setValue(empf.getDescuento());

                            List descuentos = adm.query("Select o from Descuentos as o where o.aplicado = false and o.factura.codigo = '"+ empf.getFactura().getCodigo() +"' ");
                            if(descuentos.size()>0){
                                    Descuentos descuentoIt = descuentos.get(0);
                                    codigodes.value = descuentoIt.getCodigo();
                                    descuento.value = descuentoIt.getValor();
                                    //efectivo.value = valoraPagar.subtract(descuento.value);
                            }
                            row.appendChild(codigodes);
                            row.appendChild(descuento);
                            
                           
                            final Decimalbox deposito = new Decimalbox();
                            deposito.setStyle("text-align:center");
                            deposito.setFormat("#00.00");
                            deposito.setCols(4);
                            deposito.setTabindex(3);
                            deposito.setValue(empf.getDebito());
                            if(empf.getDebito().doubleValue()>0){
                                deposito.disabled = true;
                            }
                             deposito.addEventListener("onBlur", new EventListener() {
                                public void onEvent(org.zkoss.zk.ui.event.Event event) throws Exception {
                       
                                        sumaTotal();
                                     

                                }
                            });
                            
                            row.appendChild(deposito);

                            Textbox nocuenta = new Textbox();
                            nocuenta.setStyle("text-align:center");
                            nocuenta.setTabindex(3);
                            nocuenta.setCols(6);
                            nocuenta.setValue(empf.getNocuenta());
                            if(empf.getDebito().doubleValue()>0){
                                nocuenta.disabled = true;
                            }
                            row.appendChild(nocuenta);
                            Checkbox todo = new Checkbox();
                             todo.addEventListener("onCheck", new EventListener() {
                                public void onEvent(org.zkoss.zk.ui.event.Event event) throws Exception {
                                    try {
                                    if(todo.isChecked()){
                                        deposito.setValue(empf.getSaldo().subtract(descuento.getValue()));
                                        sumaTotal();
                                     }else{
                                        deposito.setValue(new BigDecimal("0"));
                                        sumaTotal();
                                     }
                                    } catch (Exception e) {
                                      
                                    }

                                }
                            });
                            if(empf.getSaldo().compareTo(empf.getDebito())==0){
                                    todo.disabled = true;
                                    todo.checked = true;
                                    
                            }
                            if(empf.getDebito().doubleValue() > 0.0){
                                        todo.disabled = true;
                                    }
                            
                            row.appendChild(todo);
                                row.appendChild(new Label(" "+empf.getFactura().getContratos().getClientes().getIdentificacion()));
                           
                            if(empf.getTotal().doubleValue()>0)
                                    si++;
                            filasFacAsignados.appendChild(row);
                }
                if(si>0){
                    //guardar.disabled = true;
                    }else{
                    guardar.disabled = false;}
                   }catch(Exception e){
                            //Messagebox.show("Seleccione primero un CLIENTE  ...! \n"+e, "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                            System.out.println("ERROR: "+e);
                   }
sumaTotal();
 }
 
  
 void imprimirTodosEmpleado(){
            ReportePendientesDataSource ds = reportes.reporteCobrosRecaudador(fecha.value,empleados.selectedItem.value);
                Map parameters = new HashMap();
                parameters.put("empresa",empresa.getRazonsocial());
                parameters.put("ruc",empresa.getRuc());
                parameters.put("direccion",empresa.getDireccion());
                parameters.put("telefono",empresa.getTelefono());    
                parameters.put("empleados",empleados.selectedItem.value+"");    
                parameters.put("empleados2",usuarioActual+"");    
                parameters.put("fecha",fecha.value);    
                
                   reportelocal.setSrc(directorioReportes+"facturacobradassempleado.jasper");
                   reportelocal.setParameters(parameters);
                   reportelocal.setDatasource(ds);
                   reportelocal.setType("pdf");
                   impresion.selected = true;
                
         
                
 
 }
 
 
   public String mes(int mes) {
        switch (mes) {
            case 0:
                return "Enero";
            case 1:
                return "Febrero";
            case 2:
                return "Marzo";
            case 3:
                return "Abril";
            case 4:
                return "Mayo";
            case 5:
                return "Junio";
            case 6:
                return "Julio";
            case 7:
                return "Agosto";
            case 8:
                return "Septiembre";
            case 9:
                return "Octubre";
            case 10:
                return "Noviembre";
            case 11:
                return "Diciembre";
        }
        return "";

    }
  ]]>
    </zscript>
    <div>
        <!--button label="MOSTRAR" id="mensaje"  onClick="llamar()" /-->

        <tabbox width="100%"  >
            <tabs>
                <tab label="Facturas Pendientes" id="facturas" />
                <tab id="impresion" label="ImpresiÃ³n" />
            </tabs>
            <tabpanels>
                <tabpanel>
       
                    <groupbox id="panel" mold="3d" width="100%">
                        <hbox>
                            <vbox>
                                <grid>
                                    <rows>
                                        <row>
                                            <span style="float:right"> Ingrese un NÃºmero de Informe(*)..:</span>
                                            <span>
                                                <textbox onOK="facturasPendientesEmpleado()" id="numeroinforme" />
                                                <button label="Buscar" onClick="facturasPendientesEmpleado()"/>
                                            </span>
                                        </row>
                          
                                        <row>
                                            <span style="float:right"> Fecha(*):</span>
                                            <span>
                                                <datebox id="fecha" disabled="true" format="dd-MMM-yyyy" onCreate="self.value = adm.Date()"/>
                                                <textbox id="transferencia" constraint="no empty: Ingrese un valor" />
                                                <button id="asignar" label="Asignar" image="/images/expa.png" onClick="transferencia.getValue(); AsignarNo(transferencia.value)"/>
                                            </span>
                                        </row>
                                        
                                    </rows>
                                </grid>

                                <grid height="350px"    width="800px"  sclass="MyGridRowHeight2"  fixedLayout="true"  id="facturasDatosAsignados" >
                                    <columns>
                                        <column   width="68px" label="# Fac."/>
                                        <column   width="68px"   label="Fecha"/>
                                        <column  width="150px" label="Cliente "/>
                                        <column    width="45px"  label="Saldo"/>
                                        <column  visible="false"  width="45px"  label="CodigoDescuento"/>
                                        <column    width="45px"  label="Dscto."/>
                                        <column    width="45px"  label="Debitado"/>
                                        <column    width="50px"  label="No.Cuenta"/>
                                        <column  width="35px" >
                                            <!--checkbox id="todos2" label="SelecciÃ³n" onCheck="seleccionarTodos(self,0)" /-->
                                            Pagado
                                        </column>
                                        <column  visible="false"  width="50px"  label="ruc"/>

                                    </columns>
                                    <rows id="filasFacAsignados">
                                    </rows>
                                </grid>
                                <span>
                                    <label value="Total:" style="font-weight:bold"/>
                                    <label id="totalLabel" /> 
                                    <label value="Seleccionados:" style="font-weight:bold"/> 
                                    <label id="totalLabel2" />
                                      <button id="guardar" label="Guardar" image="/images/guardar.gif" onClick="guardarFilas();facturasPendientesEmpleado();"/>
                                                <button label="Imprimir" image="/images/imprimir.gif" onClick="imprimirTodosEmpleado()"/>
                                </span>
                                
                            </vbox>
                        </hbox>
                 
                  
                    </groupbox>
 

                </tabpanel>
           
                <tabpanel>
                    <panel height="550px" style="margin-bottom:10px"
                           title="Reporte" border="normal">
                        <panelchildren>
                            <jasperreport id="reportelocal" />
                        </panelchildren>
                    </panel>
                
                </tabpanel>
            </tabpanels>
            
            
        </tabbox>
        <panel framable="true" visible="false" id="contratosPanel" title="CONTRATOS CON ÃSTE CLIENTE" style="position:absolute; top:5%; left:5%" width="600px">
            <panelchildren>
                <listbox mold="paging" rows="10" pageSize="10" onSelect="llenar(self.selectedItem.value); contratosPanel.visible = false;modificar.disabled = false;anadir.disabled = false;" id="contratosCliente" width="100%">
                    <listhead>
                        <listheader label="Contra."/>
                        <listheader label="Plan"/>
                        <listheader label="Fecha"/>
                        <listheader label="Estado"/>
                    </listhead>
                    <listitem forEach="${allEvents}" value="${each}">
                        <listcell label="${each.fecha}" />
                    </listitem>
                </listbox>
                <button label="CERRAR" onClick="contratosPanel.visible = false"/>
            </panelchildren>
        </panel>
    </div>
</window>
