<?page id="contratospage2"?>
<window id="contratosventana" onCreate="cargando()"  border="normal" >
    <style>
        .MyGridRowHeight tr.z-row td.z-row-inner  
        {
        background: white;
        border-top: none;
        border-left: 1px solid white;
        border-right: 1px solid #CCC;
        //border-bottom: 1px solid #DDD;
        border-bottom: none;
 
        }
        /*.MyGridRowHeight tr.z-grid-odd td.z-row-inner, tr.z-grid-odd{
        background: #F8F8F8;
        } */
        .MyGridRowHeight td.z-row-inner
        {
        padding: 0px;
        //overflow: hidden;
        }
    </style>
    <zscript>   <![CDATA[
    
  import bean.EventDAO; 
  import java.util.ArrayList; 
  import jcinform.persistencia.*;
  import jcinform.conexion.*;
  import jcinform.bean.*;
  import java.math.BigDecimal;
import java.text.SimpleDateFormat;
  import jcinform.bean.generarFacturas;
    import jcinform.bean.sources.*;
import jcinform.bean.sources.clasestmp.Pendientes;

  Session ses = Sessions.getCurrent();
  //ses.setAttribute(org.zkoss.web.Attributes.PREFERRED_LOCALE, Locale.ENGLISH);
    Administrador adm = new Administrador();
    static Contratos equi = new Contratos();
    Permisos permiso = new Permisos();
    Empleados usuarioActual = ses.getAttribute("user");
   Empresa empresa = ses.getAttribute("empresa");
    Empleadossucursal sucursalEmp = ses.getAttribute("sector");
      generarFacturas gen = new generarFacturas();
         String directorioReportes = empresa.getReportes();
      
      
List cantonesList = adm.query("Select o from Canton as o ");
List empleadosList = adm.query("Select o from Empleados as o ");
List bancos = adm.query("Select o from Bancos as o  order by o.nombre ");

  void facturasPendientes(){
        try{
            List facEncontradas =  gen.buscar(sucursalEmp.getSucursal(), vencimiento.value);
            facturasDatos.getRows().getChildren().clear();
            ArrayList contratosAnadidos = new ArrayList();
            int i =0;
            BigDecimal total = new BigDecimal(0);
            BigDecimal rtotal = new BigDecimal(0);
                for (Iterator itna = facEncontradas.iterator(); itna.hasNext();) {
                            Vector vec = (Vector) itna.next();
                            Row row = new Row();
                                   if(row == null){
                                        row = new Row();
                                   }
                                Checkbox ch = new Checkbox("");   
                                ch.addEventListener("onCheck", new EventListener() {
                                public void onEvent(org.zkoss.zk.ui.event.Event event) throws Exception {
                                        sumar();
                                }
                            });
                                row.appendChild(ch);
                            for (int j = 0; j < vec.size(); j++) {
                                Object dos = vec.get(j);
                                    if(row == null){
                                        row = new Row();
                                   }
                                   row.setValue(vec);
                                    if(dos instanceof Integer){
                                             
                                             row.appendChild(new Label(dos+""));
                                    }else if(dos instanceof Date && j < 2){
                                             SimpleDateFormat d1 = new SimpleDateFormat("dd-MMM-yyyy");
                                             Date d = (Date)dos;
                                             row.appendChild(new Label(d1.format(d)+""));
                                    }else{
                                        if(dos != null){
                                                if(j==1){
                                                        row.appendChild(new Label(dos.replace("FAC","00")+""));        
                                                }else{
                                                        row.appendChild(new Label(dos+""));
                                                }
                                        }else{
                                            row.appendChild(new Label(""));
                                       }
                                    }
                            }

                        try{
                                    filasFac.appendChild(row);
                            }catch(Exception exs){
                            System.out.println("NO SE AGREGÃ“ FILA POR ERROR: "+exs);
                            }
                }
            valortotal.value = total;
                   }catch(Exception e){
                            //Messagebox.show("Seleccione primero un CLIENTE  ...! \n"+e, "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                            System.out.println("ERROR: "+e);
                          
                        }
                
 }
                
 void buscarSectores(Integer codigo){
          bd.value = "";
        List NodosEncontrados = adm.query("Select o from Sector as o " + 
        " where o.canton.codigo = '"+codigo+"' and o.sucursal.codigo = '"+ sucursalEmp.getSucursal().getCodigo() +"'  order by o.numero" );
        sect = new Listbox();
        int a=0;
            for (Iterator it = sect.getItems().iterator(); it.hasNext();) {
                    sect.getItems().remove(a);
                }


               for (Iterator it = NodosEncontrados.iterator(); it.hasNext();) {
                      Sector acceIt = (Sector) it.next();
                      Listitem li = new Listitem();
                      li.setValue(acceIt);
                      li.appendChild(new Listcell(acceIt.getNumero()+ ".- " + acceIt.getNombre()+" "));
                      sect.appendChild(li);
             }
            a=0;
            for (Iterator it = sect2.getItems().iterator(); it.hasNext();) {
                    sect2.getItems().remove(a);
                }


               for (Iterator it = NodosEncontrados.iterator(); it.hasNext();) {
                      Sector acceIt = (Sector) it.next();
                      Listitem li = new Listitem();
                      li.setValue(acceIt);
                      li.appendChild(new Listcell(acceIt.getNumero()+".- "+acceIt.getNombre()+" "));
                      sect2.appendChild(li);
             }
    } 
    
    
    void sumar(){
                BigDecimal total = new BigDecimal(0);                
                BigDecimal rtotal = new BigDecimal(0);                
                       List col = facturasDatos.getRows().getChildren();
                              for (int i = 0; i < col.size(); i++) {
                                     Row object = (Row) col.get(i);
                                      List labels = object.getChildren();
                                        if(((Checkbox) labels.get(0)).isChecked()){
                                            BigDecimal val = new BigDecimal(labels.get(6).getValue());
                                            total = total.add(val);
                                            
                                            BigDecimal val = new BigDecimal(labels.get(15).getValue());
                                            rtotal = rtotal.add(val);
                                          
                                        }
                                        
                               }
                         subtotaltotal.value = total;
                         rvalortotal.value = rtotal;
                         valortotal.value = subtotaltotal.value.subtract(rvalortotal.value);
 }
    
    void seleccionarTodos(Checkbox estado,Integer tipo){
                    if(tipo == 0){
                       List col = facturasDatos.getRows().getChildren();
                              for (int i = 0; i < col.size(); i++) {
                                     Row object = (Row) col.get(i);
                                      List labels = object.getChildren();
                                        ((Checkbox) labels.get(0)).setChecked(estado.isChecked());
                               }
                 }else{
                        List col = facturasDatosAsignados.getRows().getChildren();
                              for (int i = 0; i < col.size(); i++) {
                                     Row object = (Row) col.get(i);
                                      List labels = object.getChildren();
                                        ((Checkbox) labels.get(0)).setChecked(estado.isChecked());
                               }
                 
                 }
    }
    void generarFacturas(){
 
                       List col = facturasDatos.getRows().getChildren();
                       Sucursal suc = sucursalEmp.getSucursal();
                       Integer num = numero.value;
                       
                       String vali = suc.getSerie1() + "" + suc.getSerie2() + "FAC" + llenarCeros("" + num);
                        List siExiste = adm.query("Select o from Factura as o where o.numero = '"+vali+"' ");
                        
                            if(siExiste.size()>0){
                                Messagebox.show("El # Inicial de la factura ya existe, rectifique y vuelva a intentarlo ...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                                numero.focus();
                                return;        
                            }
                            
                            if(num < suc.getDesde() || num > suc.getHasta()){
                                Messagebox.show("El # de AutorizaciÃ³n ya no sirve para el rango establecido, modifique en los datos de la Empresa ...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                                numero.focus();
                                return;        
                            }
                            
                        String nofacturas="";
                             for (int i = 0; i < col.size(); i++) {
                                     Row object = (Row) col.get(i);
                                      List labels = object.getChildren();
                                        if(((Checkbox) labels.get(0)).isChecked()){
                                             String nn = suc.getSerie1() + "" + suc.getSerie2() + "FAC" + llenarCeros("" + num);
                                             nofacturas += "'"+nn+"',";
                                             num++;
                                        }
                               }
                                        if(nofacturas.length()>0){
                                             nofacturas = nofacturas.substring(0,nofacturas.length()-1);
                                             siExiste = adm.query("Select o from Factura as o where o.numero in ("+nofacturas+") ");
                        
                                                        if(siExiste.size()>0){
                                                        String existentes  = "";
                                                                    for (Iterator itna = siExiste.iterator(); itna.hasNext();) {
                                                                            Factura f = (Factura) itna.next();  
                                                                            existentes += f.numero.substring(9)+" , ";

                                                                    }
                                                            Messagebox.show("Algunas # de Facturas ya se han Usado ...! \n"+existentes, "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                                                            numero.focus();
                                                            return;        
                                                        }
                                             
                                         }
                       Integer num2 = numero.value;
                              for (int i = 0; i < col.size(); i++) {
                                     Row object = (Row) col.get(i);
                                      List labels = object.getChildren();
                                        if(((Checkbox) labels.get(0)).isChecked()){
                                                Factura fac = adm. buscarClave(object.getValue(),Factura.class);
                                                String nn = suc.getSerie1() + "" + suc.getSerie2() + "FAC" + llenarCeros("" + num2);
                                                if(fac.getNumero() == null){
                                                   fac.setNumero(nn);
                                                   fac.setAutorizacion(autorizacion.value);
                                                   fac.setVencimiento(vencimiento.value);
                                                   fac.setEmision(adm.Date());
                                                  adm.actualizar(fac);
                                                    num2++;
                                                }
                                        }
                               }
                               facturasPendientes();
    }
    
      
    String llenarCeros(String numero) {
        
        while (numero.length() < 7) {
            numero = "0" + numero;
        }        
        return numero;
        
    }
    
    void anadirFilas(){
    
                     if(empleados.selectedItem == null){
                            Messagebox.show("Seleccione un Empleado..!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                            empleados.focus();
                            return;
                       }
                       List col = facturasDatos.getRows().getChildren();
                       ArrayList arr  = new ArrayList();
                       for (int i = 0; i < col.size(); i++) {
                                     Row object = (Row) col.get(i);
                                      List labels = object.getChildren();
                                        if(((Checkbox) labels.get(0)).isChecked() &&  !((Label) labels.get(2)).getValue().equals("")  ){
                                            try{
                                                  arr.add(object);
                                              }catch(Exception ax){
                                                System.out.println(""+ax);
                                            }
                                              
                                        }
                          }
                          for (int i = 0; i < arr.size(); i++) {
                                     Row object = (Row) arr.get(i);
                                      filasFacAsignados.appendChild(object);
                          }
                               
 }
 void quitarFilas(){
 
                       List col = facturasDatos.getRows().getChildren();
                       ArrayList arr  = new ArrayList();
                       for (int i = 0; i < col.size(); i++) {
                                     Row object = (Row) col.get(i);
                                      List labels = object.getChildren();
                                        if(((Checkbox) labels.get(0)).isChecked()){
                                            try{
                                                  arr.add(object);
                                              }catch(Exception ax){
                                                System.out.println(""+ax);
                                            }
                                              
                                        }
                          }
                          for (int i = 0; i < arr.size(); i++) {
                                     Row object = (Row) arr.get(i);
                                      filasFac.appendChild(object);
                          }
                               
 }


  void guardarFilas(){
  
        BigDecimal valor = valortotal.value;
        if(valor.doubleValue()<=0){
                Messagebox.show("Seleccione una o varias facturas para continuar...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                return;
        }
        
        if((bancosList.selectedItem.value+"").contains("-1")){
                Messagebox.show("Seleccione un Banco...!", "Administrador Educativo", Messagebox.OK, Messagebox.ERROR);
                return;
        }
                       List col = facturasDatos.getRows().getChildren();
                       String nodeDeposito = nodeposito.value;
                       Date creado = adm.Date();
                           for (int i = 0; i < col.size(); i++) {
                                     Row object = (Row) col.get(i);
                                      List labels = object.getChildren();
                                            try{
                                            if(((Checkbox) labels.get(0)).isChecked()){
                                                    //Vector vec = (Vector) itna.next();
                                                  Depositos dep = new Depositos(adm.getNuevaClave("Depositos", "codigo"));
                                                  dep.setNodeposito(nodeDeposito);
                                                  dep.setFactura((labels.get(2).getValue())+""); // char
                                                  dep.setCxcobrar(new Integer(labels.get(10).getValue())); //int
                                                  dep.setFechacxc(vencimiento.value);//date

                                                  dep.setContable((bancosList.selectedItem.value).getCuenta()); //char
                                                   
                                                  dep.setPago(new BigDecimal(labels.get(6).getValue())); //decimal
                                                  dep.setContrato(new Integer(labels.get(11).getValue()));//int
                                                  dep.setFecha(creado);//date
                                                  dep.setEmision(((Vector)object.getValue()).get(11));//date
                                                  dep.setVence(((Vector)object.getValue()).get(12));//date
                                                  
                                                  dep.setDetalle(mes(((Date)((Vector)object.getValue()).get(2)).getMonth()));//date
                                                  
                                                  
                                                  
                                                  dep.setCliente(labels.get(4).getValue()+"");//char
                                                  dep.setRuc(((Vector)object.getValue()).get(13)+"");//char
                                                  dep.setMonto(new BigDecimal(labels.get(5).getValue()));//date 
                                                    
                                                  dep.setEmpleados(usuarioActual); //int
                                                  Integer facturaCodigo = ((Vector)object.getValue()).get(0);
                                                   
                                                   List pagosHechos = adm.queryNativo("Select count(*) from Cxcobrar " + 
                                                        " where factura =  "+facturaCodigo+"  " + 
                                                        " and haber > 0 ");
                                                        Integer conteo = 0;
                                                   if(pagosHechos.size()>0){
                                                        Integer val = new Integer(pagosHechos.get(0).toString().replace("[","").replace("]",""));
                                                        conteo = val;
                                                   }
                                                   List abonoCancela = adm.queryNativo("Select if((SUM(debe) - SUM(haber)) = 0,'CA','AB') from Cxcobrar " + 
                                                        " where factura =  "+facturaCodigo+"  ");
                                                         String tipoCance = "CA";
                                                    if(abonoCancela.size()>0){
                                                        String val = (abonoCancela.get(0).toString().replace("[","").replace("]",""));
                                                         tipoCance = val;
                                                        }
                                                  dep.setTipo(tipoCance); //char
                                                  dep.setNopago(conteo);
                                                  dep.setComentario(conteo+"");//char
                                                     
                                                   
                                                  adm.guardar(dep);
                                                  
                                            }
                                              }catch(Exception ax){
                                                System.out.println(""+ax.printStackTrace());
                                            }

                                        
                          }
                          facturasPendientes();

 }
   
 void imprimirTodos(){
            List col = facturasDatos.getRows().getChildren();
            String codigos = "";
                           for (int i = 0; i < col.size(); i++) {
                                     Row object = (Row) col.get(i);
                                     List labels = object.getChildren();
                                     if(((Checkbox) labels.get(0)).isChecked()){
                                                if(!labels.get(1).equals("")){
                                                      Integer facCodigo = object.getValue();
                                                     codigos += facCodigo+",";
                                                }
                                     }
                                                 
                            }
            if(codigos.length() >0){
                codigos = codigos.substring(0,codigos.length()-1);
                Map parameters = new HashMap();
                parameters.put("empresa",empresa.getRazonsocial());
                parameters.put("ruc",empresa.getRuc());
                parameters.put("direccion",empresa.getDireccion());
                parameters.put("telefono",empresa.getTelefono());
                    List detalleFac = adm.query("Select o from Detalle as o " + 
                    "where o.factura.codigo in (" + codigos + ") order by o.factura.numero  ");
                    ArrayList detalles = new ArrayList();
                   for (Iterator itAbono =detalleFac.iterator(); itAbono.hasNext();) {
                        Detalle det = itAbono.next();
                         detalles.add(det);
                   }
                   ReporteFacturaDataSource ds = new ReporteFacturaDataSource(detalles);
                   reportelocal.setSrc(directorioReportes+"factura.jasper");
                   reportelocal.setParameters(parameters);
                   reportelocal.setDatasource(ds);
                   reportelocal.setType("pdf");
                   impresion.selected = true;
                
            }
                
 
 }
  
   public String mes(int mes) {
        switch (mes) {
            case 0:
                return "Enero";
            case 1:
                return "Febrero";
            case 2:
                return "Marzo";
            case 3:
                return "Abril";
            case 4:
                return "Mayo";
            case 5:
                return "Junio";
            case 6:
                return "Julio";
            case 7:
                return "Agosto";
            case 8:
                return "Septiembre";
            case 9:
                return "Octubre";
            case 10:
                return "Noviembre";
            case 11:
                return "Diciembre";
        }
        return "";

    }
  ]]>
    </zscript>
    <div>
        <!--button label="MOSTRAR" id="mensaje"  onClick="llamar()" /-->
                    <groupbox id="panel" mold="3d" width="100%">
                        <hbox>
                            <vbox >
                                <grid>
                                    <rows>
                                        <row>
                                            Fecha Pago: 
                                            <datebox format="dd/MM/yyyy"  onCreate="self.value = adm.Date(); " id="vencimiento" />
                                            <button label="Buscar Pagos" onClick="facturasPendientes(); todos.checked = false;"/>
                                            <separator orient="vertical" width="10px" bar="true"/>
                                            <separator orient="vertical" width="10px" bar="true"/>
                                            <separator orient="vertical" width="10px" bar="true"/>
                                            Ingrese # Deposito
                                            <textbox id="nodeposito"  constraint="no empty: Ingrese el No. de DepÃ³sito"  />
                                            <span>
                                                    <label style="font-weight:bold2" value="Banco:" />
                                                </span>
                                                
                                                            <listbox  id="bancosList" width="250px" mold="select" >
                                                                <listhead>
                                                                    <listheader label="Seleccione un Banco"/>
                                                                </listhead>
                                                                <listitem selected="true"  value="-1" label="[SELECCIONE]"/>
                                                                      
                                                                <listitem forEach="${bancos}"  value="${each}">
                                                                    <listcell label="${each.nombre}" />

                                                                </listitem>
                                                            </listbox>
                                                 
                                            AcciÃ³n:
                                            <button   label="Cerrar Cobros" image="/images/registrado.png" onClick="nodeposito.getValue(); guardarFilas(); "/>
                                        </row>
                                    </rows>
                                </grid>
                                <grid height="400px"   width="99%"   fixedLayout="true"  id="facturasDatos" >
                                    <columns>
                                        <column  width="35px" >
                                            <checkbox id="todos" onCheck="seleccionarTodos(self,0);  sumar();" />
                                        </column>
                                        <column visible="false" label="Cod."/>
                                        <column width="128px" label="# Fac."/>
                                        <column width="105px" label="Mes"/>
                                        <column label="Cliente "/>
                                        <column  width="68px"  label="Valor"/>
                                        <column  width="68px" label="Cancelado"/>
                                        <column width="68px"  label="Estado"/>
                                        <column width="68px" sort="auto"    label="Efectivo"/>
                                        <column width="68px" sort="auto"    label="Cheque"/>
                                        <column visible = "false" width="68px"  label="CxcCodigo"/>
                                        <column visible="false" label="contrato"/>
                                        <column visible="false" label="fecha"/>
                                        <column visible="true" label="vence"/>
                                        <column visible="true"  width="6px"  label=" "/>
                                        <column  width="68px" label="Retenido"/>
                                    </columns>
                                    <rows id="filasFac">
                                    </rows>
                                </grid>
                                <span style="text-align:right;font:14px;font-weight:bold;background:#E1E1E1;border:0px">
                                  SubTotal: <decimalbox format="#00.00"  style="font:14px;font-weight:bold;background:#E1E1E1;border:0px" id="subtotaltotal"  value="0.0"  readonly="true"   />    
                                  Retenido: <decimalbox format="#00.00"  style="font:14px;font-weight:bold;background:#E1E1E1;border:0px" id="rvalortotal"  value="0.0"  readonly="true"   />    
                                  Total: <decimalbox format="#00.00"  style="font:14px;font-weight:bold;background:#E1E1E1;border:0px" id="valortotal"  value="0.0"  readonly="true"   />    
                                </span>
                                    
                                <span>
                                
                           </span>
                            </vbox>
                        </hbox>
                    </groupbox>
 
        <panel framable="true" visible="false" id="contratosPanel" title="CONTRATOS CON Ã‰STE CLIENTE" style="position:absolute; top:5%; left:5%" width="600px">
            <panelchildren>
                <listbox mold="paging" rows="10" pageSize="10" onSelect="llenar(self.selectedItem.value); contratosPanel.visible = false;modificar.disabled = false;anadir.disabled = false;" id="contratosCliente" width="100%">
                    <listhead>
                        <listheader label="Contra."/>
                        <listheader label="Plan"/>
                        <listheader label="Fecha"/>
                        <listheader label="Estado"/>
                    </listhead>
                    <listitem forEach="${allEvents}" value="${each}">
                        <listcell label="${each.fecha}" />
                    </listitem>
                </listbox>
                <button label="CERRAR" onClick="contratosPanel.visible = false"/>
            </panelchildren>
        </panel>
    </div>
    <zscript>
        cargando(){
        Session ses = Sessions.getCurrent();
        Empleadossucursal sucursalEmp2 = ses.getAttribute("sector");    
        autorizacion.value = sucursalEmp2.getSucursal().getAutorizacion();
        }
    </zscript>
</window>
