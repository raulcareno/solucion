/*
 * frmRubros.java
 *
 * Created on 1 de noviembre de 2007, 09:10 PM
 */
package bean;

import java.io.File;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

import javax.swing.table.DefaultTableModel;
import jcinform.persistencia.Bancos;
import jcinform.persistencia.CarrerasMaterias;
import jcinform.persistencia.Cxcobrar;
import jcinform.persistencia.Descuentos;
import jcinform.persistencia.Detalles;
import jcinform.persistencia.Empleados;
import jcinform.persistencia.Estudiantes;
import jcinform.persistencia.Facturas;
import jcinform.persistencia.Institucion;
import jcinform.persistencia.MateriasMatricula;
import jcinform.persistencia.Matriculas;
import jcinform.persistencia.Parametros;
import jcinform.persistencia.Parientes;
import jcinform.persistencia.Periodos;
import jcinform.persistencia.Rubros;
import jcinform.persistencia.RubrosMatriculaPeriodo;
import jcinform.procesos.Administrador;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import sources.ReporteDataSource;
import util.WorkingDirectory;
import util.general;
import util.secuencial;

/**
 *
 * @author Francisco
 */
public class frmFacturas extends javax.swing.JInternalFrame {

    public boolean grabar = false;
    public boolean modificar = false;
    Administrador adm;
    public Periodos periodoActual;
    public Empleados empleadoActual;
    List<Parametros> parametrosList = null;
    public Institucion inst;
    public Matriculas actualMatricula;
    private String separador = File.separator;

    /**
     * Creates new form frmRubros
     */
    public frmFacturas() {
        initComponents();
        cmbPorcentaje.setVisible(false);
    }

    public frmFacturas(Administrador adm1) {

        adm = adm1;
        this.initComponents();

        frmActualizar.setVisible(false);
        panelencontrados1.setVisible(false);
        codigoPariente.setVisible(false);
        cargarBancos();
        separador = File.separator;
        editarDatos.setEnabled(false);
        panelAnadirRubros.setVisible(false);
        cargarRubros();
        cmbPorcentaje.setVisible(false);
    }

    private void cargarRubros() {
        cmbRubros.removeAllItems();

        general gen = new general(-1, "Seleccione..");
        cmbRubros.addItem(gen);
        List<Rubros> bancosList = adm.query("Select o from Rubros as o where o.eselcredito = false ");
        for (Iterator<Rubros> it = bancosList.iterator(); it.hasNext();) {
            Rubros bancos = it.next();
            gen = new general(bancos.getIdRubros(), bancos.getNombre(), bancos.getValor(), bancos.getNoaplica());
            cmbRubros.addItem(gen);

        }
        bancosList = null;

    }

    private void cargarBancos() {
        bancoA.removeAllItems();

        general gen = new general(-1, "Seleccione..");
        bancoA.addItem(gen);
        List<Bancos> bancosList = adm.query("Select o from Bancos as o ");
        for (Iterator<Bancos> it = bancosList.iterator(); it.hasNext();) {
            Bancos bancos = it.next();
            gen = new general(bancos.getIdBancos(), bancos.getNombre());
            bancoA.addItem(gen);

        }
        bancosList = null;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        frmActualizar = new javax.swing.JPanel();
        ruc1 = new javax.swing.JFormattedTextField();
        nombre1 = new javax.swing.JFormattedTextField();
        direccion1 = new javax.swing.JFormattedTextField();
        telefono1 = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        btnGuardarCerra = new javax.swing.JButton();
        panelencontrados1 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        encontrados1 = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        panelAnadirRubros = new javax.swing.JPanel();
        cmbRubros = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txtValorAgregar = new javax.swing.JFormattedTextField();
        btnAnadir = new javax.swing.JButton();
        btnCerrarAnadirRubros = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tFactura = new javax.swing.JTable();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        telefono = new javax.swing.JLabel();
        carrera = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        editarDatos = new javax.swing.JButton();
        buscarApellido = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        ruc = new javax.swing.JLabel();
        nombre = new javax.swing.JLabel();
        direccion = new javax.swing.JLabel();
        codigoPariente = new javax.swing.JFormattedTextField();
        subtotal = new javax.swing.JLabel();
        total1 = new javax.swing.JLabel();
        iva = new javax.swing.JLabel();
        total = new javax.swing.JLabel();
        total5 = new javax.swing.JLabel();
        chkTodo = new javax.swing.JRadioButton();
        chkMatricula = new javax.swing.JRadioButton();
        chkCreditos = new javax.swing.JRadioButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        categoriaSocial = new javax.swing.JLabel();
        total7 = new javax.swing.JLabel();
        total8 = new javax.swing.JLabel();
        chkNuevo = new javax.swing.JRadioButton();
        chkAntiguo = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        factura = new javax.swing.JFormattedTextField();
        total6 = new javax.swing.JLabel();
        descuento = new javax.swing.JLabel();
        busquedaVacio = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        btnAnadirRubrosVer = new javax.swing.JToggleButton();
        jPanel2 = new javax.swing.JPanel();
        total4 = new javax.swing.JLabel();
        descuento2 = new javax.swing.JLabel();
        valorA = new javax.swing.JFormattedTextField();
        fechaA = new com.toedter.calendar.JDateChooser();
        referenciaA = new javax.swing.JFormattedTextField();
        bancoA = new javax.swing.JComboBox();
        total10 = new javax.swing.JLabel();
        total11 = new javax.swing.JLabel();
        confirmadoA = new javax.swing.JCheckBox();
        anadir = new javax.swing.JButton();
        cmbPorcentaje = new javax.swing.JComboBox();
        valorLabel = new javax.swing.JLabel();
        tipoA = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        formasdePago = new javax.swing.JTable();
        totalCobros = new javax.swing.JLabel();
        total3 = new javax.swing.JLabel();
        total13 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        total14 = new javax.swing.JLabel();
        total15 = new javax.swing.JLabel();
        faltan = new javax.swing.JLabel();
        total16 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        observacion = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(236, 246, 255));
        setTitle("Facturaci√≥n");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/images/rubros.gif"))); // NOI18N
        getContentPane().setLayout(null);

        frmActualizar.setLayout(null);

        ruc1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ruc1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ruc1KeyPressed(evt);
            }
        });
        frmActualizar.add(ruc1);
        ruc1.setBounds(79, 10, 110, 20);

        nombre1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        nombre1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nombre1KeyPressed(evt);
            }
        });
        frmActualizar.add(nombre1);
        nombre1.setBounds(79, 30, 220, 20);

        direccion1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        direccion1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                direccion1KeyPressed(evt);
            }
        });
        frmActualizar.add(direccion1);
        direccion1.setBounds(79, 50, 220, 20);

        telefono1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        telefono1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                telefono1KeyPressed(evt);
            }
        });
        frmActualizar.add(telefono1);
        telefono1.setBounds(79, 70, 170, 20);

        jLabel11.setText("RUC: ");
        frmActualizar.add(jLabel11);
        jLabel11.setBounds(10, 10, 80, 14);

        jLabel12.setText("NOMBRES: ");
        frmActualizar.add(jLabel12);
        jLabel12.setBounds(10, 30, 80, 14);

        jLabel13.setText("DIRECCI√ìN:");
        frmActualizar.add(jLabel13);
        jLabel13.setBounds(10, 50, 80, 14);

        jLabel14.setText("TEL√âFONO:");
        frmActualizar.add(jLabel14);
        jLabel14.setBounds(10, 70, 80, 14);

        btnGuardarCerra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/guardar.png"))); // NOI18N
        btnGuardarCerra.setText("Guardar y Cerrar");
        btnGuardarCerra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarCerraActionPerformed(evt);
            }
        });
        frmActualizar.add(btnGuardarCerra);
        btnGuardarCerra.setBounds(80, 92, 133, 23);

        getContentPane().add(frmActualizar);
        frmActualizar.setBounds(0, 80, 310, 120);

        panelencontrados1.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.light"));
        panelencontrados1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelencontrados1.setLayout(null);

        encontrados1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Estudiantes..." };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        encontrados1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        encontrados1.setAlignmentX(0.2F);
        encontrados1.setVisibleRowCount(10);
        encontrados1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                encontrados1MouseClicked(evt);
            }
        });
        encontrados1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                encontrados1KeyPressed(evt);
            }
        });
        jScrollPane8.setViewportView(encontrados1);

        panelencontrados1.add(jScrollPane8);
        jScrollPane8.setBounds(10, 10, 260, 170);

        getContentPane().add(panelencontrados1);
        panelencontrados1.setBounds(90, 75, 280, 190);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setLayout(null);

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new.gif"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        jPanel1.add(btnNuevo);
        btnNuevo.setBounds(10, 5, 105, 30);

        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/modificar.gif"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.setEnabled(false);
        btnModificar.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        jPanel1.add(btnModificar);
        btnModificar.setBounds(120, 5, 110, 30);

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/exit.gif"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        jPanel1.add(btnSalir);
        btnSalir.setBounds(360, 5, 105, 30);

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancel.gif"))); // NOI18N
        btnEliminar.setText("Anular");
        btnEliminar.setEnabled(false);
        btnEliminar.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEliminar);
        btnEliminar.setBounds(240, 5, 105, 30);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(10, 0, 610, 40);

        panelAnadirRubros.setBackground(new java.awt.Color(255, 204, 102));
        panelAnadirRubros.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelAnadirRubros.setLayout(null);

        cmbRubros.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbRubros.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbRubrosItemStateChanged(evt);
            }
        });
        panelAnadirRubros.add(cmbRubros);
        cmbRubros.setBounds(10, 20, 210, 20);

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel18.setText("Valor: ");
        panelAnadirRubros.add(jLabel18);
        jLabel18.setBounds(10, 50, 40, 26);

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel19.setText("Rubros");
        panelAnadirRubros.add(jLabel19);
        jLabel19.setBounds(10, 2, 40, 14);

        txtValorAgregar.setText(".");
        panelAnadirRubros.add(txtValorAgregar);
        txtValorAgregar.setBounds(50, 50, 70, 26);

        btnAnadir.setText("<< A√±adir");
        btnAnadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnadirActionPerformed(evt);
            }
        });
        panelAnadirRubros.add(btnAnadir);
        btnAnadir.setBounds(13, 80, 100, 23);

        btnCerrarAnadirRubros.setText("(X) Cerrar");
        btnCerrarAnadirRubros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarAnadirRubrosActionPerformed(evt);
            }
        });
        panelAnadirRubros.add(btnCerrarAnadirRubros);
        btnCerrarAnadirRubros.setBounds(120, 80, 100, 23);

        getContentPane().add(panelAnadirRubros);
        panelAnadirRubros.setBounds(380, 200, 230, 110);

        jLabel17.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel17.setText("Digite un apellido");
        getContentPane().add(jLabel17);
        jLabel17.setBounds(380, 60, 180, 14);

        tFactura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "C√≥digo", "Nombre", "Cantidad", "Valor", "S.D.", "TIPO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tFactura.setOpaque(false);
        tFactura.setSelectionBackground(new java.awt.Color(236, 246, 255));
        tFactura.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tFactura.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tFacturaMouseClicked(evt);
            }
        });
        tFactura.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tFacturaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tFactura);
        tFactura.getColumnModel().getColumn(0).setMinWidth(0);
        tFactura.getColumnModel().getColumn(0).setPreferredWidth(0);
        tFactura.getColumnModel().getColumn(0).setMaxWidth(0);
        tFactura.getColumnModel().getColumn(1).setResizable(false);
        tFactura.getColumnModel().getColumn(1).setPreferredWidth(200);
        tFactura.getColumnModel().getColumn(2).setResizable(false);
        tFactura.getColumnModel().getColumn(2).setPreferredWidth(0);
        tFactura.getColumnModel().getColumn(3).setResizable(false);
        tFactura.getColumnModel().getColumn(4).setPreferredWidth(15);
        tFactura.getColumnModel().getColumn(5).setPreferredWidth(15);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 200, 580, 120);

        jDateChooser1.setDate(new Date());
        getContentPane().add(jDateChooser1);
        jDateChooser1.setBounds(460, 150, 140, 26);

        jLabel1.setText("Fecha: ");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(410, 150, 50, 30);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("B√∫squeda: ");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(20, 54, 70, 20);

        telefono.setText(".");
        getContentPane().add(telefono);
        telefono.setBounds(90, 140, 140, 14);

        carrera.setText(".");
        getContentPane().add(carrera);
        carrera.setBounds(90, 160, 300, 40);

        jLabel5.setText("NOMBRES: ");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(10, 100, 80, 14);

        jLabel6.setText("DIRECCI√ìN:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(10, 120, 80, 14);

        editarDatos.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        editarDatos.setText("EDITAR");
        editarDatos.setMargin(new java.awt.Insets(0, 0, 0, 0));
        editarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarDatosActionPerformed(evt);
            }
        });
        getContentPane().add(editarDatos);
        editarDatos.setBounds(230, 80, 70, 23);

        buscarApellido.setEnabled(false);
        buscarApellido.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        buscarApellido.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                buscarApellidoFocusGained(evt);
            }
        });
        buscarApellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                buscarApellidoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                buscarApellidoKeyReleased(evt);
            }
        });
        getContentPane().add(buscarApellido);
        buscarApellido.setBounds(90, 55, 280, 21);

        jLabel7.setBackground(new java.awt.Color(153, 153, 153));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        getContentPane().add(jLabel7);
        jLabel7.setBounds(10, 60, 610, 20);

        jLabel9.setText("RUC: ");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(10, 80, 80, 14);

        ruc.setText(".");
        getContentPane().add(ruc);
        ruc.setBounds(90, 80, 140, 14);

        nombre.setText(".");
        getContentPane().add(nombre);
        nombre.setBounds(90, 100, 230, 14);

        direccion.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        direccion.setText(". ");
        getContentPane().add(direccion);
        direccion.setBounds(90, 120, 320, 13);
        getContentPane().add(codigoPariente);
        codigoPariente.setBounds(130, 180, 20, 20);

        subtotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        subtotal.setForeground(new java.awt.Color(51, 51, 51));
        subtotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        subtotal.setText("00.00");
        getContentPane().add(subtotal);
        subtotal.setBounds(100, 320, 70, 30);

        total1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        total1.setForeground(new java.awt.Color(51, 51, 51));
        total1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        total1.setText("TOTAL:");
        getContentPane().add(total1);
        total1.setBounds(440, 320, 50, 30);

        iva.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        iva.setForeground(new java.awt.Color(51, 51, 51));
        iva.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        iva.setText("00.00");
        getContentPane().add(iva);
        iva.setBounds(380, 320, 60, 30);

        total.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total.setForeground(new java.awt.Color(0, 51, 153));
        total.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        total.setText("00.00");
        getContentPane().add(total);
        total.setBounds(490, 320, 110, 30);

        total5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        total5.setForeground(new java.awt.Color(51, 51, 51));
        total5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        total5.setText("IVA:");
        getContentPane().add(total5);
        total5.setBounds(290, 320, 80, 30);

        buttonGroup1.add(chkTodo);
        chkTodo.setSelected(true);
        chkTodo.setText("Todo");
        chkTodo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkTodoMouseClicked(evt);
            }
        });
        chkTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkTodoActionPerformed(evt);
            }
        });
        getContentPane().add(chkTodo);
        chkTodo.setBounds(390, 110, 70, 23);

        buttonGroup1.add(chkMatricula);
        chkMatricula.setText("Matricula");
        chkMatricula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMatriculaActionPerformed(evt);
            }
        });
        getContentPane().add(chkMatricula);
        chkMatricula.setBounds(460, 110, 80, 23);

        buttonGroup1.add(chkCreditos);
        chkCreditos.setText("Cr√©ditos");
        chkCreditos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCreditosActionPerformed(evt);
            }
        });
        getContentPane().add(chkCreditos);
        chkCreditos.setBounds(540, 110, 80, 23);

        jLabel15.setText("TEL√âFONO:");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(10, 140, 80, 14);

        jLabel16.setText("CARRERA:");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(10, 160, 80, 14);

        categoriaSocial.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        categoriaSocial.setForeground(new java.awt.Color(51, 51, 51));
        categoriaSocial.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        categoriaSocial.setText("A");
        getContentPane().add(categoriaSocial);
        categoriaSocial.setBounds(310, 140, 20, 15);

        total7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        total7.setForeground(new java.awt.Color(51, 51, 51));
        total7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        total7.setText("Dscto.");
        getContentPane().add(total7);
        total7.setBounds(180, 320, 50, 30);

        total8.setForeground(new java.awt.Color(51, 51, 51));
        total8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        total8.setText("CATEGOR√çA:");
        getContentPane().add(total8);
        total8.setBounds(240, 140, 80, 14);

        buttonGroup2.add(chkNuevo);
        chkNuevo.setSelected(true);
        chkNuevo.setText("Nuevo");
        chkNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkNuevoActionPerformed(evt);
            }
        });
        getContentPane().add(chkNuevo);
        chkNuevo.setBounds(460, 130, 70, 23);

        buttonGroup2.add(chkAntiguo);
        chkAntiguo.setText("Antiguo");
        chkAntiguo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAntiguoActionPerformed(evt);
            }
        });
        getContentPane().add(chkAntiguo);
        chkAntiguo.setBounds(540, 130, 80, 23);

        jLabel3.setText("Estudiante:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(400, 130, 70, 20);

        jLabel4.setText("Factura:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(410, 80, 60, 14);

        factura.setText("0000000");
        factura.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                facturaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                facturaFocusLost(evt);
            }
        });
        getContentPane().add(factura);
        factura.setBounds(470, 80, 150, 25);

        total6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        total6.setForeground(new java.awt.Color(51, 51, 51));
        total6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        total6.setText("Subtotal:");
        getContentPane().add(total6);
        total6.setBounds(20, 320, 80, 30);

        descuento.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        descuento.setForeground(new java.awt.Color(204, 51, 0));
        descuento.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        descuento.setText("00.00");
        getContentPane().add(descuento);
        descuento.setBounds(230, 320, 60, 30);

        busquedaVacio.setBackground(new java.awt.Color(204, 204, 204));
        getContentPane().add(busquedaVacio);
        busquedaVacio.setBounds(10, 50, 610, 30);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("B√∫squeda: ");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(10, 60, 70, 14);

        jButton2.setText("Historial");
        jButton2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        getContentPane().add(jButton2);
        jButton2.setBounds(500, 180, 100, 20);

        btnAnadirRubrosVer.setText("A√±adir Rubros");
        btnAnadirRubrosVer.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnAnadirRubrosVer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnadirRubrosVerActionPerformed(evt);
            }
        });
        getContentPane().add(btnAnadirRubrosVer);
        btnAnadirRubrosVer.setBounds(370, 180, 130, 20);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "FORMAS DE PAGO:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 11))); // NOI18N
        jPanel2.setLayout(null);

        total4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        total4.setForeground(new java.awt.Color(51, 51, 51));
        total4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        total4.setText("Confirmado");
        jPanel2.add(total4);
        total4.setBounds(430, 20, 80, 20);

        descuento2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        descuento2.setForeground(new java.awt.Color(204, 51, 0));
        descuento2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        descuento2.setText("00.00");
        jPanel2.add(descuento2);
        descuento2.setBounds(60, 160, 60, 30);

        valorA.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        valorA.setText("0.00");
        valorA.setEnabled(false);
        valorA.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        valorA.setMargin(new java.awt.Insets(0, 0, 0, 0));
        valorA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                valorAKeyPressed(evt);
            }
        });
        jPanel2.add(valorA);
        valorA.setBounds(120, 40, 60, 28);

        fechaA.setEnabled(false);
        fechaA.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        fechaA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fechaAKeyPressed(evt);
            }
        });
        jPanel2.add(fechaA);
        fechaA.setBounds(330, 40, 130, 28);

        referenciaA.setEnabled(false);
        referenciaA.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        referenciaA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                referenciaAKeyPressed(evt);
            }
        });
        jPanel2.add(referenciaA);
        referenciaA.setBounds(260, 40, 70, 28);

        bancoA.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        bancoA.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Pichincha", " " }));
        bancoA.setEnabled(false);
        bancoA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bancoAKeyPressed(evt);
            }
        });
        jPanel2.add(bancoA);
        bancoA.setBounds(180, 40, 80, 28);

        total10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        total10.setForeground(new java.awt.Color(51, 51, 51));
        total10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        total10.setText("Banco");
        jPanel2.add(total10);
        total10.setBounds(190, 20, 60, 20);

        total11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        total11.setForeground(new java.awt.Color(51, 51, 51));
        total11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        total11.setText("Referencia");
        jPanel2.add(total11);
        total11.setBounds(260, 20, 70, 20);

        confirmadoA.setEnabled(false);
        jPanel2.add(confirmadoA);
        confirmadoA.setBounds(460, 40, 30, 28);

        anadir.setText("A√±adir");
        anadir.setToolTipText("");
        anadir.setEnabled(false);
        anadir.setMargin(new java.awt.Insets(0, 0, 0, 0));
        anadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anadirActionPerformed(evt);
            }
        });
        jPanel2.add(anadir);
        anadir.setBounds(500, 40, 90, 28);

        cmbPorcentaje.setForeground(new java.awt.Color(0, 0, 153));
        cmbPorcentaje.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "%", "20", "25", "30", "35", "40" }));
        cmbPorcentaje.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPorcentajeItemStateChanged(evt);
            }
        });
        jPanel2.add(cmbPorcentaje);
        cmbPorcentaje.setBounds(120, 20, 60, 20);

        valorLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        valorLabel.setForeground(new java.awt.Color(51, 51, 51));
        valorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        valorLabel.setText("Valor:");
        jPanel2.add(valorLabel);
        valorLabel.setBounds(120, 20, 60, 20);

        tipoA.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione:", "Efectivo", "Cheque", "Debito", "Tarjeta", "Transferencia", "Beca", "Ayuda Financiera", " " }));
        tipoA.setEnabled(false);
        tipoA.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tipoAItemStateChanged(evt);
            }
        });
        jPanel2.add(tipoA);
        tipoA.setBounds(10, 40, 110, 28);

        formasdePago.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo", "Valor", "Banco", "Referencia", "Fecha", "Confirmado","%"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.math.BigDecimal.class, java.lang.Object.class, java.lang.String.class, java.util.Date.class, java.lang.Boolean.class,java.lang.String.class,
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        formasdePago.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formasdePagoKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(formasdePago);

        jPanel2.add(jScrollPane2);
        jScrollPane2.setBounds(10, 70, 580, 90);

        totalCobros.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        totalCobros.setForeground(new java.awt.Color(0, 51, 153));
        totalCobros.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        totalCobros.setText("00.00");
        jPanel2.add(totalCobros);
        totalCobros.setBounds(200, 160, 90, 30);

        total3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        total3.setForeground(new java.awt.Color(51, 51, 51));
        total3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        total3.setText("Dstos.:");
        jPanel2.add(total3);
        total3.setBounds(10, 160, 50, 30);

        total13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        total13.setForeground(new java.awt.Color(51, 51, 51));
        total13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        total13.setText("FALTAN: ");
        jPanel2.add(total13);
        total13.setBounds(300, 160, 60, 30);

        jLabel8.setForeground(new java.awt.Color(153, 0, 51));
        jLabel8.setText("Presione SUPR para quitar");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(470, 160, 160, 20);

        total14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        total14.setForeground(new java.awt.Color(51, 51, 51));
        total14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        total14.setText("Fecha Cheque");
        jPanel2.add(total14);
        total14.setBounds(330, 20, 110, 20);

        total15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        total15.setForeground(new java.awt.Color(51, 51, 51));
        total15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        total15.setText("A COBRAR:");
        jPanel2.add(total15);
        total15.setBounds(120, 160, 80, 30);

        faltan.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        faltan.setForeground(new java.awt.Color(204, 0, 0));
        faltan.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        faltan.setText("00.00");
        jPanel2.add(faltan);
        faltan.setBounds(360, 160, 90, 30);

        total16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        total16.setForeground(new java.awt.Color(51, 51, 51));
        total16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        total16.setText("Tipo:");
        jPanel2.add(total16);
        total16.setBounds(10, 20, 50, 20);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(10, 350, 600, 200);

        observacion.setColumns(20);
        observacion.setRows(5);
        jScrollPane3.setViewportView(observacion);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(10, 550, 600, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
// TODO add your handling code here:
        if (grabar == true) {
            grabar = false;
            modificar = false;

            this.btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/agregar.png")));
            this.btnNuevo.setLabel("Nuevo");
            this.btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/modificar.gif")));
            this.btnModificar.setLabel("Modificar");
//            this.txtNombre.setEnabled(false);
        }
        this.setVisible(false);
    }//GEN-LAST:event_btnSalirActionPerformed
    public void llenarFactura() {
        inst = (Institucion) adm.buscarClave(inst.getIdInstitucion(), Institucion.class);
        Long valor = Long.parseLong(inst.getFactura1()) + 1;
        String asFac = String.format("%07d", valor);
        this.factura.setText("" + asFac);

    }

    private void imprimir() {

        ArrayList detalle = new ArrayList();

        String recibo = factura.getText().trim();

        Facturas obj = (Facturas) adm.buscarClave(inst.getSerie1() + "FC" + recibo, Facturas.class);
        String selecc = "SELECT d FROM Detalles d WHERE d.idFacturas.idFacturas= '" + obj.getIdFacturas().trim() + "' ";
        List det = adm.query(selecc);
        Detalles mdes;
        for (Iterator it = det.iterator(); it.hasNext();) {
            Detalles elem = (Detalles) it.next();
            mdes = new Detalles();
            detalle.add(elem);
        }
//        globales rd = new globales();

        String direccio = "";
        WorkingDirectory w = new WorkingDirectory();
        direccio = w.get() + separador;
        if (direccio.contains("build")) {
            direccio = direccio.replace("\\build", "");
            direccio = direccio.replace("/build", "");
        }
        direccio = direccio + separador + "reportes" + separador;

        String dire = direccio + "factura.jasper";
        try {
            JasperReport masterReport = (JasperReport) JRLoader.loadObject(dire);
            ReporteDataSource ds = new ReporteDataSource(detalle);

            Map parametros = new HashMap();
            parametros.put("fecha", obj.getFecha());
            parametros.put("nombre", obj.getNombres());
            parametros.put("total", obj.getTotal());
            parametros.put("alumno", obj.getIdMatriculas().getIdEstudiantes().getApellidoPaterno() + " " + obj.getIdMatriculas().getIdEstudiantes().getApellidoMaterno() + " " + obj.getIdMatriculas().getIdEstudiantes().getNombre());
            parametros.put("ruc", obj.getRuc());
            parametros.put("direccion", obj.getDireccion());
            parametros.put("telefono", obj.getTelefono());
            parametros.put("curso", obj.getIdMatriculas().getIdCarreras() + "");
            parametros.put("escuela", obj.getIdMatriculas().getIdCarreras().getIdEscuela().getNombre() + "");
            parametros.put("jornada", obj.getIdMatriculas().getIdCarreras().getIdJornada().getNombre() + "");
            parametros.put("observacion", observacion.getText() + "");
            parametros.put("usuario", empleadoActual.getApellidoPaterno() + " " + empleadoActual.getNombre());

            JasperPrint masterPrint = JasperFillManager.fillReport(masterReport, parametros, ds);
//            JasperViewer viewer = new JasperViewer(masterPrint, false);
//            if (vistaprevia.isSelected()) {
//                viewer.show();
//            } else {
            try {
                JasperPrintManager.printPage(masterPrint, 0, true);
            } catch (JRException ex) {
                ex.printStackTrace();
            }
//            }
        } catch (JRException ex) {
            ex.printStackTrace();
        }

    }

    public void limpiar() {
        actualMatricula = new Matriculas();
        EstudianteSeleccionado = new general("0", "");
        DefaultTableModel dtm = (DefaultTableModel) formasdePago.getModel();
        dtm.getDataVector().removeAllElements();
        formasdePago.setModel(dtm);
        dtm = (DefaultTableModel) tFactura.getModel();
        dtm.getDataVector().removeAllElements();
        tFactura.setModel(dtm);
        formasdePago.repaint();
        tFactura.repaint();
        chkTodo.setSelected(true);
        chkNuevo.setSelected(true);
        codigoPariente.setText("0");
        ruc.setText(".");
        nombre.setText(".");
        direccion.setText(".");
        telefono.setText(".");
        carrera.setText(".");
    }
    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
// TODO add your handling code here:

        if (grabar == false) {
            limpiar();
            buscarApellido.setEnabled(true);
            editarDatos.setEnabled(true);
            llenarFactura();
            this.btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/guardar.png")));
            this.btnNuevo.setLabel("Guardar");
            this.btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancelar.png")));
            this.btnModificar.setLabel("Cancelar");
            this.btnModificar.setEnabled(true);
            buscarApellido.requestFocusInWindow();
            grabar = true;
            modificar = false;
        } else if (grabar == true) {
            if (!comprobarAntesAnadir()) {
                JOptionPane.showMessageDialog(this, "DEBE INGRESAR COMO SE VA A PAGAR LA PRESENTE FACTURA...!", "JCINFORM", JOptionPane.ERROR_MESSAGE);
                return;
            }
            Facturas cab = new Facturas();
//                secuencial sec = new secuencial();
            inst = (Institucion) adm.buscarClave(inst.getIdInstitucion(), Institucion.class);

            buscarApellido.setEnabled(false);
            editarDatos.setEnabled(false);
            //FACTURAS
            Date fecha = adm.Date();
            cab.setFecha(fecha);
            cab.setFechaEmision(fecha);
            cab.setFechaVence(fecha);
            cab.setIdMatriculas(actualMatricula);
            cab.setRuc(ruc.getText());
            cab.setNombres(nombre.getText());
            cab.setSubtotal(new BigDecimal(subtotal.getText()));
            cab.setTelefono(telefono.getText());
            cab.setDireccion(direccion.getText());
            cab.setIva(new BigDecimal(iva.getText()));
            cab.setBaseiva(BigDecimal.ZERO);
            cab.setBasecero(new BigDecimal(subtotal.getText()));
            cab.setDescuento(new BigDecimal(descuento.getText()));
            cab.setAutorizacion(true); //NO SE QUE HACE PERO LO OCUPO PARA VER SI EST√Å ANULADA
            cab.setIdFacturas(inst.getSerie1() + "FC" + factura.getText());
            cab.setObservacion(observacion.getText());
            cab.setTotal(cab.getBasecero().subtract(cab.getDescuento())); 
            adm.guardar(cab);
            //ACTUALIZAR DOCUMENTO FACTURA
            //ACTUALIZAR DOCUMENTO FACTURA
            inst.setFactura1(factura.getText().trim());
            adm.actualizar(inst);
            
          

            secuencial sec = new secuencial();
            Boolean tipoInscripcion = false;
            Boolean tipoMatricula = false;
            for (int i = 0; i < this.tFactura.getRowCount(); i++) {
                Detalles det = new Detalles();
                det.setIdDetalles(sec.generarClave());
                det.setIdFacturas(cab);
                det.setCantidad((Integer) tFactura.getValueAt(i, 2));
                det.setIdRubros(new Rubros((Integer) tFactura.getValueAt(i, 0)));
                det.setValorUnitario((BigDecimal) tFactura.getValueAt(i, 3));
                det.setValorTotal(((BigDecimal) tFactura.getValueAt(i, 3)));
                adm.guardar(det);
                if(((String) tFactura.getValueAt(i, 5)).equals("I")){ 
                    tipoInscripcion = true;
                }
                if(((String) tFactura.getValueAt(i, 5)).equals("M")){ 
                    tipoMatricula = true;
                }
                //CXC

            }
            if(tipoInscripcion){
                actualMatricula.setPagadainscripcion(true);
                actualMatricula.setEstadoMat("I");
            } 
            if(tipoMatricula){
                actualMatricula.setPagadainscripcion(true);
                actualMatricula.setEstadoMat("M");
            } 

            
            
            adm.actualizar(actualMatricula);
            
            Cxcobrar cx = new Cxcobrar();
            cx.setIdCxcobrar(adm.getNuevaClave("Cxcobrar", "idCxcobrar"));
            cx.setDebe(cab.getTotal());
            cx.setHaber(BigDecimal.ZERO);
            cx.setFecha(fecha);
            cx.setFechareferencia(fecha);
            cx.setIdFacturas(cab);
            cx.setReferencia("" + cab.getIdFacturas());
            cx.setTipopago("F");
            cx.setTotal(BigDecimal.ZERO);
            adm.guardar(cx);
            for (int i = 0; i < this.formasdePago.getRowCount(); i++) {
                cx = new Cxcobrar();
                cx.setIdCxcobrar(adm.getNuevaClave("Cxcobrar", "idCxcobrar"));
                cx.setTipopago(formasdePago.getValueAt(i, 0).toString());
                cx.setTotal(((BigDecimal) formasdePago.getValueAt(i, 1)));
                cx.setDebe(BigDecimal.ZERO);
                cx.setHaber(((BigDecimal) formasdePago.getValueAt(i, 1)));
                cx.setFecha(fecha);
                cx.setIdFacturas(cab);
                cx.setReferencia(formasdePago.getValueAt(i, 3).toString());
                cx.setFechareferencia((Date) formasdePago.getValueAt(i, 4));
                cx.setConfirmado((Boolean) formasdePago.getValueAt(i, 5));

                if (cx.getTipopago().contains("Ayuda") || cx.getTipopago().contains("Beca")) {
                    Descuentos desc = new Descuentos(adm.getNuevaClave("Descuentos", "idDescuentos"));
                    desc.setIdEstudiantes(es);
                    desc.setIdFacturas(cab);
                    desc.setValor(cx.getTotal());
                    desc.setPorcentaje(new BigDecimal(formasdePago.getValueAt(i, 6).toString()));
                    desc.setTipo(formasdePago.getValueAt(i, 0).toString());
                    adm.guardar(desc);
                } else {
                    adm.guardar(cx);
                }

                //CXC

            }
            //FACTURAS
            imprimir();
            grabar = false;
            modificar = false;
            this.btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new.gif")));
            this.btnNuevo.setLabel("Nuevo");
            this.btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/modificar.gif")));
            this.btnModificar.setLabel("Modificar");
            this.btnModificar.setEnabled(false);
            grabar = false;
            modificar = false;
        }



    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
// TODO add your handling code here:
        if (grabar == false) {
//            if (codigoRubro.getText().isEmpty()) {
//                return;
//            }

            this.btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/guardar.png")));
            this.btnNuevo.setLabel("Guardar");
            this.btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancelar.png")));
            this.btnModificar.setLabel("Cancelar");
            modificar = true;
            grabar = true;
        } else {
            grabar = false;
            modificar = false;
            buscarApellido.setEnabled(false);
            editarDatos.setEnabled(false);

            this.btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/agregar.png")));
            this.btnNuevo.setLabel("Nuevo");
            this.btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/modificar.gif")));
            this.btnModificar.setLabel("Modificar");
            this.btnModificar.setEnabled(false);

        }

    }//GEN-LAST:event_btnModificarActionPerformed

    private void tFacturaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tFacturaMouseClicked
// TODO add your handling code here:
//        int fila = tableRubros.getSelectedRow();
        //boolean val = new Boolean(tableRubros.getValueAt(fila, 3).toString());
//        this.chkEscredito.setSelected(Boolean.valueOf(val));
//        this.codigoContable.setText((String) this.tableRubros.getValueAt(fila, 4));
//        this.unidadContable.setText((String) this.tableRubros.getValueAt(fila, 5));
        //boolean val2 = new Boolean(.toString());
//        this.chkEstado.setSelected((Boolean)tableRubros.getValueAt(fila,3));
    }//GEN-LAST:event_tFacturaMouseClicked
    private void sumar() {
        int filas = tFactura.getRowCount();
        tipoA.setEnabled(false);
        BigDecimal totalCalc = new BigDecimal(0);
        for (int i = 0; i < filas; i++) {
            totalCalc = totalCalc.add((BigDecimal) tFactura.getValueAt(i, 3));
        }
        this.subtotal.setText(totalCalc + "");
        if (totalCalc.doubleValue() > 0) {
            tipoA.setEnabled(true);

        }
        BigDecimal valorIva = regresaVariableParametrosDecimal("IVA", parametrosList);
        if (valorIva.doubleValue() > 0) {
            iva.setText(valorIva.divide(new BigDecimal(100), 2, RoundingMode.HALF_UP).multiply(totalCalc).setScale(2, RoundingMode.HALF_UP) + "");
            total5.setText("IVA " + valorIva + "%:");
            //BigDecimal subtotalLocal = new BigDecimal(subtotal.getText());
            BigDecimal subTotal = totalCalc.subtract(new BigDecimal(descuento.getText()));
            BigDecimal totalLocal = subTotal.multiply(valorIva.divide(new BigDecimal(100), 2, RoundingMode.HALF_UP)).add(subTotal);
            total.setText(totalLocal.setScale(2, RoundingMode.HALF_UP) + "");
        } else {
            BigDecimal subTotal = totalCalc.subtract(new BigDecimal(descuento.getText()));
            total.setText(subTotal.setScale(2, RoundingMode.HALF_UP) + "");
        }


    }

    public Double redondear(Double numero, int decimales) {
        try {
            BigDecimal d = new BigDecimal(numero);
            d = d.setScale(decimales, RoundingMode.HALF_UP);
            return d.doubleValue();
        } catch (Exception e) {
            return 0.0;
        }
    }

    public String regresaVariableString(String variable, List<Parametros> textos) {
        String dato = "";
        for (Iterator<Parametros> it = textos.iterator(); it.hasNext();) {
            Parametros textos1 = it.next();
            if (textos1.getVariable().equals(variable)) {
                return textos1.getVCaracter();
            }
        }
        return dato;
    }

    public BigDecimal regresaVariableParametrosDecimal(String variable, List<Parametros> textos) {
        for (Iterator<Parametros> it = textos.iterator(); it.hasNext();) {
            Parametros textos1 = it.next();
            if (textos1.getVariable().equals(variable)) {
                return textos1.getVNumerico();
            }
        }

        return new BigDecimal(0);
    }

    public Boolean regresaVariableParametrosLogico(String variable, List<Parametros> textos) {
        for (Iterator<Parametros> it = textos.iterator(); it.hasNext();) {
            Parametros textos1 = it.next();
            if (textos1.getVariable().equals(variable)) {
                return textos1.getVLogico();
            }
        }
        return false;
    }
    Estudiantes es = null;
    public general EstudianteSeleccionado = null;
   public void cargarRubros2(general gen) {
        if (gen.getCodigoString().equals("0")) {
            return;
        }
        es = (Estudiantes) adm.buscarClave(gen.getCodigoString(), Estudiantes.class);
        Parientes factura = new Parientes();
        if (es.getIdParientes().getTipoRepresentante().equals("F")) {
            factura = es.getIdParientes();
        } else if (es.getParIdParientes().getTipoRepresentante().equals("F")) {
            factura = es.getParIdParientes();
        } else if (es.getParIdParientes2().getTipoRepresentante().equals("F")) {
            factura = es.getParIdParientes2();
        }
        codigoPariente.setText(factura.getIdParientes() + "");
        ruc.setText(factura.getIdentificacion());
        nombre.setText(factura.getNombres());
        direccion.setText(factura.getDireccion());
        telefono.setText(factura.getTelefonoTrabajo());
        ruc1.setText(factura.getIdentificacion());
        nombre1.setText(factura.getNombres());
        direccion1.setText(factura.getDireccion());
        telefono1.setText(factura.getTelefonoTrabajo());

        List<Matriculas> matriculaList = adm.query("Select o from Matriculas as o "
                + " where o.idEstudiantes.idEstudiantes = '" + es.getIdEstudiantes() + "' "
                + " and o.idPeriodos.idPeriodos = '" + periodoActual.getIdPeriodos() + "' and o.estadoMat = 'I' ");


        if (parametrosList == null) {
            parametrosList = adm.query("Select o from Parametros as o "
                    + " where o.idPeriodos.idPeriodos = '" + periodoActual.getIdPeriodos() + "' ");
        }
        if (matriculaList.size() > 0) {

            actualMatricula = matriculaList.get(0);
            carrera.setText("<html>" + actualMatricula.getIdCarreras().getNombre() + " " + actualMatricula.getIdCarreras().getIdEscuela().getNombre() + " " + " " + actualMatricula.getIdCarreras().getIdJornada().getNombre() + " " + " " + actualMatricula.getIdCarreras().getIdModalidad().getNombre() + " </html> ");
            categoriaSocial.setText("" + actualMatricula.getIdCategoriasSociales().getNombre());
            //VERIFICO SI ES QUE HA PAGADO UNO O VARIOS DE ESTOS RUBROS PARA PROCEDER A CAMBIARLE EL ESTADO A LA MATRICULA Y NO PAGUE 
//            List<Facturas> facturaLista = adm.query("Select o from Detalles");

            //tengo que verificar si el estado esta null o false y le cargo los rubros que se encuetnra en matricula
            //de acuerdo a la carrera y al perido actual buscando en rbrosMatriculasPeriodo
            if (actualMatricula.getPagada() == null) {
                actualMatricula.setPagada(false);
            }

            DefaultTableModel dtm = (DefaultTableModel) this.tFactura.getModel();
            dtm.getDataVector().removeAllElements();
            DefaultTableModel dtm2 = (DefaultTableModel) formasdePago.getModel();
            dtm2.getDataVector().removeAllElements();

            if (actualMatricula.getPagadainscripcion()!=null) {
            if (actualMatricula.getPagadainscripcion()) {
                //limpiar();
                tFactura.setModel(dtm);
                formasdePago.setModel(dtm2);
                sumar();
                sumarPagos();
                llenarFactura();
                JOptionPane.showMessageDialog(this, "No tiene deudas pendientes", "JC INFORM", JOptionPane.ERROR_MESSAGE);
                return;
            }    
                
            }

    
                    Rubros rubroCredito = null;
                    List<Rubros> rub = adm.query("Select o from Rubros as o where o.esinscripcion = true ");
                    if (rub.size() > 0) {
                        rubroCredito = rub.get(0);
                    }//no existe el cr√©dito
                    Object[] obj = new Object[20];
                    obj[0] = rub.get(0).getIdRubros();
                    obj[1] = rubroCredito.getNombre();
                    obj[2] = 1;
                    obj[3] = actualMatricula.getIdCategoriasSociales().getValorCredito().multiply(new BigDecimal(1));
                    obj[4] = rubroCredito.getNoaplica();
                    obj[5] = "I";
                    dtm.addRow(obj);

          
            tFactura.setModel(dtm);
            sumar();

        } else {
            JOptionPane.showMessageDialog(this, "Estudiante no se encuentra matriculado", "JC INFORM", JOptionPane.ERROR_MESSAGE);
        }


    }
    private void cargarRubros(general gen) {
        if (gen.getCodigoString().equals("0")) {
            return;
        }
        es = (Estudiantes) adm.buscarClave(gen.getCodigoString(), Estudiantes.class);
        Parientes factura = new Parientes();
        if (es.getIdParientes().getTipoRepresentante().equals("F")) {
            factura = es.getIdParientes();
        } else if (es.getParIdParientes().getTipoRepresentante().equals("F")) {
            factura = es.getParIdParientes();
        } else if (es.getParIdParientes2().getTipoRepresentante().equals("F")) {
            factura = es.getParIdParientes2();
        }
        codigoPariente.setText(factura.getIdParientes() + "");
        ruc.setText(factura.getIdentificacion());
        nombre.setText(factura.getNombres());
        direccion.setText(factura.getDireccion());
        telefono.setText(factura.getTelefonoTrabajo());
        ruc1.setText(factura.getIdentificacion());
        nombre1.setText(factura.getNombres());
        direccion1.setText(factura.getDireccion());
        telefono1.setText(factura.getTelefonoTrabajo());

        List<Matriculas> matriculaList = adm.query("Select o from Matriculas as o "
                + " where o.idEstudiantes.idEstudiantes = '" + es.getIdEstudiantes() + "' "
                + " and o.idPeriodos.idPeriodos = '" + periodoActual.getIdPeriodos() + "' ");


        if (parametrosList == null) {
            parametrosList = adm.query("Select o from Parametros as o "
                    + " where o.idPeriodos.idPeriodos = '" + periodoActual.getIdPeriodos() + "' ");
        }
        if (matriculaList.size() > 0) {

            actualMatricula = matriculaList.get(0);
            carrera.setText("<html>" + actualMatricula.getIdCarreras().getNombre() + " " + actualMatricula.getIdCarreras().getIdEscuela().getNombre() + " " + " " + actualMatricula.getIdCarreras().getIdJornada().getNombre() + " " + " " + actualMatricula.getIdCarreras().getIdModalidad().getNombre() + " </html> ");
            categoriaSocial.setText("" + actualMatricula.getIdCategoriasSociales().getNombre());
            //VERIFICO SI ES QUE HA PAGADO UNO O VARIOS DE ESTOS RUBROS PARA PROCEDER A CAMBIARLE EL ESTADO A LA MATRICULA Y NO PAGUE 
//            List<Facturas> facturaLista = adm.query("Select o from Detalles");

            //tengo que verificar si el estado esta null o false y le cargo los rubros que se encuetnra en matricula
            //de acuerdo a la carrera y al perido actual buscando en rbrosMatriculasPeriodo
            if (actualMatricula.getPagada() == null) {
                actualMatricula.setPagada(false);
            }

            DefaultTableModel dtm = (DefaultTableModel) this.tFactura.getModel();
            dtm.getDataVector().removeAllElements();
            DefaultTableModel dtm2 = (DefaultTableModel) formasdePago.getModel();
            dtm2.getDataVector().removeAllElements();

            if (actualMatricula.getPagada()) {
                //limpiar();
                tFactura.setModel(dtm);
                formasdePago.setModel(dtm2);
                sumar();
                sumarPagos();
                llenarFactura();
                JOptionPane.showMessageDialog(this, "No tiene deudas pendientes", "JC INFORM", JOptionPane.ERROR_MESSAGE);
                return;
            }

            //no ha estado pagada
            if (chkMatricula.isSelected() || chkTodo.isSelected()) {
                if (actualMatricula.getPagada() == false) {
                    //AQU√ç HE BUSCADO LOS RUBROS QUE EST√ÅN ASIGNADOS PARA LA MATRICULA
                    List<RubrosMatriculaPeriodo> rubros = adm.query("Select o from RubrosMatriculaPeriodo as o "
                            + " where o.idPeriodos.idPeriodos = '" + actualMatricula.getIdPeriodos().getIdPeriodos() + "' and "
                            + "o.idCarreras.idCarreras = '" + actualMatricula.getIdCarreras().getIdCarreras() + "' ");
                    for (Iterator<RubrosMatriculaPeriodo> it = rubros.iterator(); it.hasNext();) {
                        RubrosMatriculaPeriodo elem = it.next();
                        Object[] obj = new Object[20];
                        obj[0] = elem.getIdRubros().getIdRubros();
                        obj[1] = elem.getIdRubros().getNombre();
                        obj[2] = 1;
                        obj[3] = (chkNuevo.isSelected() ? elem.getValorNueva() : elem.getValorAntigua());
                        obj[4] = elem.getIdRubros().getNoaplica();
                        obj[5] = "M";
                        dtm.addRow(obj);
                    }
                }
            }
            if (chkCreditos.isSelected() || chkTodo.isSelected()) {

                //BUSCO LAS MATERIAS QUE EST√Å TOMANDO PARA PROCEDER A FACTURAR LOS CR√âDITOS
                List<MateriasMatricula> rubrosCreditos = adm.query("Select o from MateriasMatricula as o "
                        + " where o.idMatriculas.idMatriculas = '" + actualMatricula.getIdMatriculas() + "' ");
                int creditos = 0;
                for (Iterator<MateriasMatricula> it = rubrosCreditos.iterator(); it.hasNext();) {
                    MateriasMatricula materiasMatricula = it.next();
                    List<CarrerasMaterias> noCreditos = adm.query("SELECT o FROM CarrerasMaterias as o "
                            + " WHERE o.idCarreras.idCarreras = " + materiasMatricula.getIdMatriculas().getIdCarreras().getIdCarreras() + " "
                            + " AND o.idMaterias.idMaterias = '" + materiasMatricula.getIdMaterias().getIdMaterias() + "' ");
                    if (noCreditos.size() > 0) {
                        CarrerasMaterias carM = noCreditos.get(0);
                        creditos += carM.getNumeroCreditos();
                    }

                }
                if (creditos > 0) {
                    Rubros rubroCredito = null;
                    List<Rubros> rub = adm.query("Select o from Rubros as o where o.eselcredito = true ");
                    if (rub.size() > 0) {
                        rubroCredito = rub.get(0);
                    }//no existe el cr√©dito
                    Object[] obj = new Object[20];
                    obj[0] = rubroCredito.getIdRubros();
                    obj[1] = rubroCredito.getNombre();
                    obj[2] = creditos;
                    obj[3] = actualMatricula.getIdCategoriasSociales().getValorCredito().multiply(new BigDecimal(creditos));
                    obj[4] = rubroCredito.getNoaplica();
                    obj[5] = "C";
                    dtm.addRow(obj);

                }

            }
            tFactura.setModel(dtm);
            sumar();

        } else {
            JOptionPane.showMessageDialog(this, "Estudiante no se encuentra matriculado", "JC INFORM", JOptionPane.ERROR_MESSAGE);
        }


    }
    private void encontrados1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_encontrados1MouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            this.panelencontrados1.setVisible(false);
            EstudianteSeleccionado = (general) this.encontrados1.getSelectedValue();
            cargarRubros(EstudianteSeleccionado);
            faltan.setText(total.getText());
            buscarApellido.setText("");
        }
    }//GEN-LAST:event_encontrados1MouseClicked

    private void encontrados1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_encontrados1KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.panelencontrados1.setVisible(false);
            EstudianteSeleccionado = (general) this.encontrados1.getSelectedValue();
            cargarRubros(EstudianteSeleccionado);
            buscarApellido.setText("");
            faltan.setText(total.getText());

        } else if (evt.getKeyCode() == evt.VK_UP && encontrados1.getSelectedIndex() == 0) {
            this.buscarApellido.requestFocusInWindow();
        } else if (evt.getKeyCode() == evt.VK_ESCAPE) {
            this.panelencontrados1.setVisible(false);

        } else {
            //principal.tecla(evt.getKeyCode());
        }
    }//GEN-LAST:event_encontrados1KeyPressed

    private void buscarApellidoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_buscarApellidoFocusGained
        // TODO add your handling code here:
        buscarApellido.selectAll();
    }//GEN-LAST:event_buscarApellidoFocusGained

    private void buscarApellidoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buscarApellidoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_DOWN) {
            encontrados1.setSelectedIndex(0);
            encontrados1.requestFocusInWindow();
        } else if (evt.getKeyCode() == evt.VK_ESCAPE) {
            panelencontrados1.setVisible(false);
        } else {
            //      principal.tecla(evt.getKeyCode());
        }
    }//GEN-LAST:event_buscarApellidoKeyPressed

    private void buscarApellidoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buscarApellidoKeyReleased
        // TODO add your handling code here:
        if (!buscarApellido.getText().isEmpty()) {
            List lista = adm.query("Select o.idEstudiantes, o.apellidoPaterno, o.apellidoMaterno, o.nombre from Estudiantes as o "
                    + "where o.apellidoPaterno like '" + buscarApellido.getText() + "%' order by o.apellidoPaterno ", 0, 10);
            if (lista.size() > 0) {
                DefaultListModel dtm = new DefaultListModel();
                dtm.removeAllElements();
                encontrados1.setModel(dtm);
                int j = 0;
                for (Iterator it = lista.iterator(); it.hasNext();) {
                    Object[] elem = (Object[]) it.next();
                    Estudiantes est = new Estudiantes(elem[0] + "");
                    est.setApellidoPaterno(elem[1] + "");
                    est.setApellidoMaterno(elem[2] + "");
                    est.setNombre(elem[3] + "");
                    general gen = new general(est.getIdEstudiantes(), est.getApellidoPaterno() + " " + est.getApellidoMaterno() + " " + est.getNombre());
                    dtm.add(j, gen);
                }
                encontrados1.setModel(dtm);
                this.panelencontrados1.setVisible(true);
            } else {
                DefaultListModel dtm = new DefaultListModel();
                dtm.removeAllElements();
                encontrados1.setModel(dtm);
                this.panelencontrados1.setVisible(false);
            }

        } else {
            DefaultListModel dtm = new DefaultListModel();
            dtm.removeAllElements();
            encontrados1.setModel(dtm);
            this.panelencontrados1.setVisible(false);
        }
    }//GEN-LAST:event_buscarApellidoKeyReleased

    private void btnGuardarCerraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarCerraActionPerformed
        // TODO add your handling code here:
        Parientes par = new Parientes(new Integer(codigoPariente.getText()));
        par.setIdentificacion(ruc1.getText());
        par.setNombres(nombre1.getText());
        par.setDireccion(direccion1.getText());
        par.setTelefonoTrabajo(telefono1.getText());
        par.setTipoRepresentante("F");
        adm.actualizar(par);
        adm.actualizar(par);
        ruc.setText(ruc1.getText());
        nombre.setText(nombre1.getText());
        direccion.setText(direccion1.getText());
        telefono.setText(telefono1.getText());


        frmActualizar.setVisible(false);
    }//GEN-LAST:event_btnGuardarCerraActionPerformed

    private void editarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarDatosActionPerformed
        // TODO add your handling code here:

        frmActualizar.setVisible(true);
        ruc1.requestFocusInWindow();
    }//GEN-LAST:event_editarDatosActionPerformed

    private void ruc1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ruc1KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER) {
            nombre1.requestFocusInWindow();
        }
    }//GEN-LAST:event_ruc1KeyPressed

    private void nombre1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombre1KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER) {
            direccion1.requestFocusInWindow();
        }
    }//GEN-LAST:event_nombre1KeyPressed

    private void direccion1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_direccion1KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER) {
            telefono1.requestFocusInWindow();
        }
    }//GEN-LAST:event_direccion1KeyPressed

    private void telefono1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_telefono1KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER) {
            btnGuardarCerra.requestFocusInWindow();
        }
    }//GEN-LAST:event_telefono1KeyPressed

    private void chkTodoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkTodoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_chkTodoMouseClicked

    private void chkTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkTodoActionPerformed
        // TODO add your handling code here:
        //general fac = (general) this.encontrados1.getSelectedValue();
        cargarRubros(EstudianteSeleccionado);
        tFactura.repaint();
    }//GEN-LAST:event_chkTodoActionPerformed

    private void chkMatriculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMatriculaActionPerformed
        // TODO add your handling code here:
        cargarRubros(EstudianteSeleccionado);
        tFactura.repaint();
    }//GEN-LAST:event_chkMatriculaActionPerformed

    private void chkCreditosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCreditosActionPerformed
        // TODO add your handling code here:
        //general fac = (general) this.encontrados1.getSelectedValue();
        cargarRubros(EstudianteSeleccionado);
        tFactura.repaint();
    }//GEN-LAST:event_chkCreditosActionPerformed

    private void chkNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkNuevoActionPerformed
        // TODO add your handling code here:

        cargarRubros(EstudianteSeleccionado);
        tFactura.repaint();
    }//GEN-LAST:event_chkNuevoActionPerformed

    private void chkAntiguoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAntiguoActionPerformed
        // TODO add your handling code here:

        cargarRubros(EstudianteSeleccionado);
        tFactura.repaint();
    }//GEN-LAST:event_chkAntiguoActionPerformed

    private void tipoAItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tipoAItemStateChanged
        // TODO add your handling code here:
        if (tipoA.getSelectedIndex() > 0) {
            valorLabel.setVisible(true);
            cmbPorcentaje.setVisible(false);
            if (tipoA.getSelectedItem().toString().contains("Efec") || tipoA.getSelectedItem().toString().contains("Beca") || tipoA.getSelectedItem().toString().contains("Ayuda")) {
                valorA.setEnabled(true);
                if (tipoA.getSelectedItem().toString().contains("Ayuda") || tipoA.getSelectedItem().toString().contains("Beca")) {
                    referenciaA.setEnabled(true);
                    cmbPorcentaje.setVisible(true);
                    valorLabel.setVisible(false);
                }

                anadir.setEnabled(true);
                valorA.setText(faltan.getText());
                valorA.requestFocusInWindow();
                valorA.selectAll();
            } else {
                valorA.setText(faltan.getText());
                valorA.setEnabled(true);
                referenciaA.setEnabled(true);
                bancoA.setEnabled(true);
                fechaA.setEnabled(true);
                anadir.setEnabled(true);
                if (!tipoA.getSelectedItem().toString().contains("Tarje")) {
                    confirmadoA.setEnabled(true);
                }
                valorA.requestFocusInWindow();
                valorA.selectAll();
            }
        }
    }//GEN-LAST:event_tipoAItemStateChanged

    private void valorAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_valorAKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER) {
            if (tipoA.getSelectedItem().toString().contains("Efe")) {
                anadir.requestFocusInWindow();
            } else if (tipoA.getSelectedItem().toString().contains("Desc")) {
                referenciaA.requestFocusInWindow();
            } else {
                bancoA.requestFocusInWindow();
            }
        }
    }//GEN-LAST:event_valorAKeyPressed

    private void fechaAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fechaAKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER) {
            if (tipoA.getSelectedItem().toString().contains("Tarj")) {
                anadir.requestFocusInWindow();
            } else {
                confirmadoA.requestFocusInWindow();
            }
        }
    }//GEN-LAST:event_fechaAKeyPressed
    private void sumarPagos() {

        int filas = formasdePago.getRowCount();
        BigDecimal totalCalc = new BigDecimal(BigInteger.ZERO);
        BigDecimal descuentos0 = new BigDecimal(BigInteger.ZERO);
        for (int i = 0; i < filas; i++) {
            if (formasdePago.getValueAt(i, 0).toString().contains("Ayuda") || formasdePago.getValueAt(i, 0).toString().contains("Beca")) {
                descuentos0 = descuentos0.add((BigDecimal) formasdePago.getValueAt(i, 1));
            } else {
                totalCalc = totalCalc.add((BigDecimal) formasdePago.getValueAt(i, 1));
            }
        }
        descuento2.setText(descuentos0 + "");
        descuento.setText(descuentos0 + "");
        totalCobros.setText("" + totalCalc);
        sumar();
    }

    public boolean comprobarAntesAnadir() {
        int filas = formasdePago.getRowCount();
        BigDecimal totalCobrado = new BigDecimal(BigInteger.ZERO);

        for (int i = 0; i < filas; i++) {
            if (formasdePago.getValueAt(i, 0).toString().contains("Ayuda") || formasdePago.getValueAt(i, 0).toString().contains("Beca") ) {
            } else {
                totalCobrado = totalCobrado.add((BigDecimal) formasdePago.getValueAt(i, 1));
            }
        }
        BigDecimal acobrar = new BigDecimal(total.getText());
        if (acobrar.compareTo(totalCobrado) == -1 || acobrar.compareTo(totalCobrado) == 1) {
            return false;
        } else {
            return true;
        }
    }
    private void anadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anadirActionPerformed
        // TODO add your handling code here:

        DefaultTableModel dtm = (DefaultTableModel) formasdePago.getModel();
        //dtm.getDataVector().removeAllElements();
        if (valorA.getText().isEmpty()) {
            valorA.requestFocusInWindow();
            valorA.selectAll();
            return;
        }
        if (new Double(valorA.getText()) <= 0.0) {
            valorA.requestFocusInWindow();
            valorA.selectAll();
            return;
        }
        if (!tipoA.getSelectedItem().toString().contains("Efe")) {

            if (referenciaA.getText().isEmpty()) {
                referenciaA.requestFocusInWindow();
                referenciaA.selectAll();
                return;
            }
            if (!tipoA.getSelectedItem().toString().contains("Ayuda") && !tipoA.getSelectedItem().toString().contains("Beca")) {
                if (bancoA.getSelectedIndex() == 0) {
                    bancoA.requestFocus(true);
                    bancoA.requestFocusInWindow();
                    return;
                }
                if (fechaA.getDate() == null) {
                    fechaA.requestFocus(true);
                    fechaA.requestFocusInWindow();
                    return;
                }
            }
        }


        Object[] obj = new Object[10];
        obj[0] = tipoA.getSelectedItem().toString();
        obj[1] = new BigDecimal(valorA.getText());
        obj[2] = (bancoA.getSelectedIndex() > 0 ? bancoA.getSelectedItem() : null);
        obj[3] = referenciaA.getText();
        obj[4] = fechaA.getDate();
        obj[5] = confirmadoA.isSelected();
        if(tipoA.getSelectedItem().toString().contains("Beca") || tipoA.getSelectedItem().toString().contains("Ayuda")){
            obj[6] = cmbPorcentaje.getSelectedItem().toString();    
        }else{
            obj[6] = "0";    
        }
        
        dtm.addRow(obj);
        formasdePago.setModel(dtm);

        valorA.setEnabled(false);
        referenciaA.setEnabled(false);
        anadir.setEnabled(false);
        bancoA.setEnabled(false);
        fechaA.setEnabled(false);
        confirmadoA.setEnabled(false);

        valorA.setText("0.00");
        referenciaA.setText("");
        anadir.setEnabled(false);
        bancoA.setSelectedIndex(0);
        fechaA.setDate(new Date());
        confirmadoA.setEnabled(false);
        tipoA.setSelectedIndex(0);
        tipoA.requestFocusInWindow();
        sumarPagos();
        sumar();
        BigDecimal to = new BigDecimal(total.getText());
        BigDecimal co = new BigDecimal(totalCobros.getText());
        faltan.setText("" + (to.subtract(co)));

    }//GEN-LAST:event_anadirActionPerformed

    private void bancoAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bancoAKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER) {

            referenciaA.requestFocusInWindow();

        }
    }//GEN-LAST:event_bancoAKeyPressed

    private void referenciaAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_referenciaAKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER) {
            if (tipoA.getSelectedItem().toString().contains("Desc")) {
                anadir.requestFocusInWindow();
            } else {
                fechaA.requestFocusInWindow();
                fechaA.requestFocus();
            }
        }
    }//GEN-LAST:event_referenciaAKeyPressed

    private void formasdePagoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formasdePagoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_DELETE) {
            int fil = formasdePago.getSelectedRow();
            DefaultTableModel dtm = (DefaultTableModel) formasdePago.getModel();
            dtm.removeRow(fil);
            formasdePago.setModel(dtm);
            this.sumarPagos();
            this.sumar();
        }
    }//GEN-LAST:event_formasdePagoKeyPressed

    private void facturaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_facturaFocusGained
        // TODO add your handling code here:
        factura.selectAll();
    }//GEN-LAST:event_facturaFocusGained

    private void facturaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_facturaFocusLost
        // TODO add your handling code here:
        String codigo = factura.getText() + "";
        while (codigo.length() < 7) {
            codigo = "0" + codigo;
        }
        factura.setText("" + codigo);

        String abuscar = "" + inst.getSerie1() + "FC" + factura.getText();
        Facturas cabe = (Facturas) adm.buscarClave(abuscar, Facturas.class);
        if (cabe != null) {
            JOptionPane.showMessageDialog(this, "N√öMERO DE FACTURA YA EXISTE, CAMBIE DE N√öMERO...!");
            factura.setText("");
            factura.requestFocusInWindow();
        }

    }//GEN-LAST:event_facturaFocusLost

    private void btnCerrarAnadirRubrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarAnadirRubrosActionPerformed
        // TODO add your handling code here:
        panelAnadirRubros.setVisible(false);
        btnAnadirRubrosVer.setSelected(false);
    }//GEN-LAST:event_btnCerrarAnadirRubrosActionPerformed

    private void btnAnadirRubrosVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnadirRubrosVerActionPerformed
        // TODO add your handling code here:
        if (btnAnadirRubrosVer.isSelected()) {
            panelAnadirRubros.setVisible(true);
        } else {
            panelAnadirRubros.setVisible(false);
        }
    }//GEN-LAST:event_btnAnadirRubrosVerActionPerformed

    private void cmbRubrosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbRubrosItemStateChanged
        // TODO add your handling code here:
        if (cmbRubros.getSelectedIndex() > 0) {
            general gen = (general) cmbRubros.getSelectedItem();
            txtValorAgregar.setText("" + gen.getValor());

        }
    }//GEN-LAST:event_cmbRubrosItemStateChanged

    private void btnAnadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnadirActionPerformed
        // TODO add your handling code here:
        if (txtValorAgregar.getText().isEmpty()) {
            return;
        } else {
            general gen = (general) cmbRubros.getSelectedItem();

            DefaultTableModel dtm = (DefaultTableModel) tFactura.getModel();
            Object[] obj = new Object[20];
            obj[0] = gen.getCodigo();
            obj[1] = gen.getDescripcion();
            obj[2] = 1;
            obj[3] = new BigDecimal(txtValorAgregar.getText());
            obj[4] = gen.getVerdadero();
            obj[5] = "N";

            dtm.addRow(obj);
            tFactura.setModel(dtm);
            panelAnadirRubros.setVisible(false);
            btnAnadirRubrosVer.setSelected(false);

            sumarPagos();
            faltan.setText(total.getText());
        }

    }//GEN-LAST:event_btnAnadirActionPerformed

    private void tFacturaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFacturaKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_DELETE) {
            int fil = tFactura.getSelectedRow();
            DefaultTableModel dtm = (DefaultTableModel) tFactura.getModel();
            dtm.removeRow(fil);
            tFactura.setModel(dtm);
            this.sumar();
            this.sumarPagos();

        }
    }//GEN-LAST:event_tFacturaKeyPressed
public BigDecimal sumarSegun(String tipo){
     int filas = tFactura.getRowCount();
            BigDecimal totalCalc = new BigDecimal(0);
        for (int i = 0; i < filas; i++) {
            if(tFactura.getValueAt(i,5).toString().contains(tipo))
                totalCalc = totalCalc.add((BigDecimal) tFactura.getValueAt(i, 3));
        }
        return totalCalc;
}

    private void cmbPorcentajeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPorcentajeItemStateChanged
        // TODO add your handling code here:
if(cmbPorcentaje.getSelectedIndex()>0){
    if(tipoA.getSelectedItem().toString().contains("Ayuda")){
        BigDecimal totalMatriculas = sumarSegun("C");
        BigDecimal descontar = new BigDecimal(cmbPorcentaje.getSelectedItem().toString()).multiply(totalMatriculas).divide(new BigDecimal(100));
        valorA.setText(descontar+"");
         
    }else if(tipoA.getSelectedItem().toString().contains("Beca")){
        BigDecimal totalMatriculas = sumarSegun("M");
        BigDecimal descontar = new BigDecimal(cmbPorcentaje.getSelectedItem().toString()).multiply(totalMatriculas).divide(new BigDecimal(100));
        valorA.setText(descontar+"");
    }
        
}else{
    
}
    

    }//GEN-LAST:event_cmbPorcentajeItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton anadir;
    private javax.swing.JComboBox bancoA;
    private javax.swing.JButton btnAnadir;
    private javax.swing.JToggleButton btnAnadirRubrosVer;
    private javax.swing.JButton btnCerrarAnadirRubros;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardarCerra;
    private javax.swing.JButton btnModificar;
    public javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnSalir;
    private javax.swing.JFormattedTextField buscarApellido;
    private javax.swing.JPanel busquedaVacio;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel carrera;
    private javax.swing.JLabel categoriaSocial;
    private javax.swing.JRadioButton chkAntiguo;
    private javax.swing.JRadioButton chkCreditos;
    private javax.swing.JRadioButton chkMatricula;
    private javax.swing.JRadioButton chkNuevo;
    private javax.swing.JRadioButton chkTodo;
    private javax.swing.JComboBox cmbPorcentaje;
    private javax.swing.JComboBox cmbRubros;
    private javax.swing.JFormattedTextField codigoPariente;
    private javax.swing.JCheckBox confirmadoA;
    private javax.swing.JLabel descuento;
    private javax.swing.JLabel descuento2;
    private javax.swing.JLabel direccion;
    private javax.swing.JFormattedTextField direccion1;
    private javax.swing.JButton editarDatos;
    private javax.swing.JList encontrados1;
    private javax.swing.JFormattedTextField factura;
    private javax.swing.JLabel faltan;
    private com.toedter.calendar.JDateChooser fechaA;
    private javax.swing.JTable formasdePago;
    private javax.swing.JPanel frmActualizar;
    private javax.swing.JLabel iva;
    private javax.swing.JButton jButton2;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel nombre;
    private javax.swing.JFormattedTextField nombre1;
    private javax.swing.JTextArea observacion;
    private javax.swing.JPanel panelAnadirRubros;
    private javax.swing.JPanel panelencontrados1;
    private javax.swing.JFormattedTextField referenciaA;
    private javax.swing.JLabel ruc;
    private javax.swing.JFormattedTextField ruc1;
    private javax.swing.JLabel subtotal;
    private javax.swing.JTable tFactura;
    private javax.swing.JLabel telefono;
    private javax.swing.JFormattedTextField telefono1;
    private javax.swing.JComboBox tipoA;
    private javax.swing.JLabel total;
    private javax.swing.JLabel total1;
    private javax.swing.JLabel total10;
    private javax.swing.JLabel total11;
    private javax.swing.JLabel total13;
    private javax.swing.JLabel total14;
    private javax.swing.JLabel total15;
    private javax.swing.JLabel total16;
    private javax.swing.JLabel total3;
    private javax.swing.JLabel total4;
    private javax.swing.JLabel total5;
    private javax.swing.JLabel total6;
    private javax.swing.JLabel total7;
    private javax.swing.JLabel total8;
    private javax.swing.JLabel totalCobros;
    private javax.swing.JFormattedTextField txtValorAgregar;
    private javax.swing.JFormattedTextField valorA;
    private javax.swing.JLabel valorLabel;
    // End of variables declaration//GEN-END:variables

    public Periodos getPeriodoActual() {
        return periodoActual;
    }

    public void setPeriodoActual(Periodos periodoActual) {
        this.periodoActual = periodoActual;
    }

    public Empleados getEmpleadoActual() {
        return empleadoActual;
    }

    public void setEmpleadoActual(Empleados empleadoActual) {
        this.empleadoActual = empleadoActual;
    }
}
